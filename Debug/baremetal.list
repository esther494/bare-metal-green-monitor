
baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08004648  08004648  00005648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f0  080049f0  000061c8  2**0
                  CONTENTS
  4 .ARM          00000008  080049f0  080049f0  000059f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f8  080049f8  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049fc  080049fc  000059fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08004a00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001c8  08004bc8  000061c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08004bc8  00006350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f51  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ba6  00000000  00000000  00008149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00008cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b4  00000000  00000000  00008f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001072f  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004382  00000000  00000000  0001985b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056cd6  00000000  00000000  0001dbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000748b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001854  00000000  00000000  000748f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0007614c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004630 	.word	0x08004630

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	08004630 	.word	0x08004630

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <ADC_Init>:
 *      Author: esthe
 */

#include "adcdma.h"

void ADC_Init(void) {
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
    // Reset CR1 & CR2
    ADC1->CR2 = 0;
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <ADC_Init+0xb8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
    ADC1->CR1 = 0;
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <ADC_Init+0xb8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]

    ADC->CCR |= (1U << ADC_CCR_ADCPRE_Pos);             // Set ADC prescaler to divide by 4
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <ADC_Init+0xbc>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a29      	ldr	r2, [pc, #164]	@ (8000c74 <ADC_Init+0xbc>)
 8000bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bd2:	6053      	str	r3, [r2, #4]
    ADC1->CR1 &= ~(3U << ADC_CR1_RES_Pos);              // Clear resolution bits (1 2-bit)
 8000bd4:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <ADC_Init+0xb8>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a25      	ldr	r2, [pc, #148]	@ (8000c70 <ADC_Init+0xb8>)
 8000bda:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000bde:	6053      	str	r3, [r2, #4]

    // ADC1->CR2 |= ADC_CR2_CONT;                       // Set ADC to continuous mode
    ADC1->CR1 |= ADC_CR1_SCAN;                          // Enable scan mode
 8000be0:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <ADC_Init+0xb8>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	4a22      	ldr	r2, [pc, #136]	@ (8000c70 <ADC_Init+0xb8>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bea:	6053      	str	r3, [r2, #4]

    ADC1->SMPR2 |= (4U << ADC_SMPR2_SMP0_Pos);          // Set sampling time for channel 0 (PA0)
 8000bec:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <ADC_Init+0xb8>)
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c70 <ADC_Init+0xb8>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6113      	str	r3, [r2, #16]
    ADC1->SMPR2 |= (4U << ADC_SMPR2_SMP1_Pos);          // Set sampling time for channel 1 (PA1)
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <ADC_Init+0xb8>)
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8000c70 <ADC_Init+0xb8>)
 8000bfe:	f043 0320 	orr.w	r3, r3, #32
 8000c02:	6113      	str	r3, [r2, #16]

    ADC1->SQR3 = (1 << ADC_SQR3_SQ2_Pos) | (0 << ADC_SQR3_SQ1_Pos); // Configure sequence order
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <ADC_Init+0xb8>)
 8000c06:	2220      	movs	r2, #32
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SQR1 |= 1 << ADC_SQR1_L_Pos;                              // Set number of channels to convert (2 channels)
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <ADC_Init+0xb8>)
 8000c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0e:	4a18      	ldr	r2, [pc, #96]	@ (8000c70 <ADC_Init+0xb8>)
 8000c10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    ADC1->CR2 |= 0 << 10;                                // EOC configuration (Why set to 0?)
 8000c16:	4b16      	ldr	r3, [pc, #88]	@ (8000c70 <ADC_Init+0xb8>)
 8000c18:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <ADC_Init+0xb8>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= 0b0110 << 24;                           // Set TIM2 TRGO
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <ADC_Init+0xb8>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <ADC_Init+0xb8>)
 8000c24:	f043 63c0 	orr.w	r3, r3, #100663296	@ 0x6000000
 8000c28:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_EXTEN_0;                        // Enable external trigger
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <ADC_Init+0xb8>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	4a10      	ldr	r2, [pc, #64]	@ (8000c70 <ADC_Init+0xb8>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6093      	str	r3, [r2, #8]

    ADC1->CR2 |= 1 << 8;                                 // Enable DMA
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <ADC_Init+0xb8>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <ADC_Init+0xb8>)
 8000c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c40:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= 1 << 9;                                 // Set DDS
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <ADC_Init+0xb8>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <ADC_Init+0xb8>)
 8000c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4c:	6093      	str	r3, [r2, #8]

    ADC1->CR2 |= ADC_CR2_ADON;                           // Set ADON bit to enable ADC
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <ADC_Init+0xb8>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <ADC_Init+0xb8>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART;                        // Start conversion
 8000c5a:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <ADC_Init+0xb8>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <ADC_Init+0xb8>)
 8000c60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c64:	6093      	str	r3, [r2, #8]
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40012000 	.word	0x40012000
 8000c74:	40012300 	.word	0x40012300

08000c78 <DMA_Init>:

void DMA_Init(void) {
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
    DMA2_Stream0->CR &= ~DMA_SxCR_EN;                     // Disable DMA Stream 0
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf8 <DMA_Init+0x80>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf8 <DMA_Init+0x80>)
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]
    while (DMA2_Stream0->CR & DMA_SxCR_EN);               // Wait until DMA Stream 0 is disabled
 8000c88:	bf00      	nop
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <DMA_Init+0x80>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f9      	bne.n	8000c8a <DMA_Init+0x12>

    DMA2_Stream0->CR |= (0 << DMA_SxCR_CHSEL_Pos);        // Set Channel 0 for ADC1
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <DMA_Init+0x80>)
 8000c98:	4a17      	ldr	r2, [pc, #92]	@ (8000cf8 <DMA_Init+0x80>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR &= ~DMA_SxCR_DIR;                    // Clear direction bits (Peripheral-to-Memory)
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <DMA_Init+0x80>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a15      	ldr	r2, [pc, #84]	@ (8000cf8 <DMA_Init+0x80>)
 8000ca4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000ca8:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR |= (2 << DMA_SxCR_MSIZE_Pos) |       // Set memory data size to 16 bits
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <DMA_Init+0x80>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <DMA_Init+0x80>)
 8000cb0:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8000cb4:	6013      	str	r3, [r2, #0]
                        (2 << DMA_SxCR_PSIZE_Pos);        // Set peripheral data size to 16 bits
    DMA2_Stream0->CR |= DMA_SxCR_MINC;                    // Enable memory increment mode
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <DMA_Init+0x80>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <DMA_Init+0x80>)
 8000cbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc0:	6013      	str	r3, [r2, #0]
    DMA2_Stream0->CR |= DMA_SxCR_CIRC;                    // Enable circular mode
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <DMA_Init+0x80>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <DMA_Init+0x80>)
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ccc:	6013      	str	r3, [r2, #0]

    DMA2_Stream0->NDTR = 2;                               // Set number of data items to transfer
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <DMA_Init+0x80>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	605a      	str	r2, [r3, #4]
    DMA2_Stream0->PAR = (uint32_t)&ADC1->DR;              // Set peripheral address to ADC1 data register
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <DMA_Init+0x80>)
 8000cd6:	4a09      	ldr	r2, [pc, #36]	@ (8000cfc <DMA_Init+0x84>)
 8000cd8:	609a      	str	r2, [r3, #8]
    DMA2_Stream0->M0AR = (uint32_t)ADC_Buffer;            // Set memory address to ADC_Buffer
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <DMA_Init+0x80>)
 8000cdc:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <DMA_Init+0x88>)
 8000cde:	60da      	str	r2, [r3, #12]
    DMA2_Stream0->CR |= DMA_SxCR_EN;                      // Enable DMA Stream 0
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <DMA_Init+0x80>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <DMA_Init+0x80>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40026410 	.word	0x40026410
 8000cfc:	4001204c 	.word	0x4001204c
 8000d00:	200001e4 	.word	0x200001e4

08000d04 <GPIO_Init>:
 *      Author: esthe
 */

#include "gpio.h"

void GPIO_Init(void) {
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
    // Initialize PA0 as Moisture Sensor Sensor (ANALOG)
    SET_PIN_MODE(GPIOA, 0, GPIO_MODE_ANALOG);
 8000d08:	4b5e      	ldr	r3, [pc, #376]	@ (8000e84 <GPIO_Init+0x180>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8000e84 <GPIO_Init+0x180>)
 8000d0e:	f043 0303 	orr.w	r3, r3, #3
 8000d12:	6013      	str	r3, [r2, #0]

    // Initialize PA1 as Light Sensor (ANALOG)
    SET_PIN_MODE(GPIOA, 1, GPIO_MODE_ANALOG);
 8000d14:	4b5b      	ldr	r3, [pc, #364]	@ (8000e84 <GPIO_Init+0x180>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a5a      	ldr	r2, [pc, #360]	@ (8000e84 <GPIO_Init+0x180>)
 8000d1a:	f043 030c 	orr.w	r3, r3, #12
 8000d1e:	6013      	str	r3, [r2, #0]

    // Configure PB6 for LCD SCL (I2C1)
    SET_PIN_MODE(GPIOB, 6, GPIO_MODE_AF);                  // Alternate Function Mode
 8000d20:	4b59      	ldr	r3, [pc, #356]	@ (8000e88 <GPIO_Init+0x184>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a58      	ldr	r2, [pc, #352]	@ (8000e88 <GPIO_Init+0x184>)
 8000d26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d2a:	6013      	str	r3, [r2, #0]
    SET_PIN_OTYPE(GPIOB, 6, GPIO_OTYPE_OPENDRAIN);         // Open-drain
 8000d2c:	4b56      	ldr	r3, [pc, #344]	@ (8000e88 <GPIO_Init+0x184>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a55      	ldr	r2, [pc, #340]	@ (8000e88 <GPIO_Init+0x184>)
 8000d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d36:	6053      	str	r3, [r2, #4]
    SET_PIN_SPEED(GPIOB, 6, GPIO_OSPEED_HIGH);             // High Speed
 8000d38:	4b53      	ldr	r3, [pc, #332]	@ (8000e88 <GPIO_Init+0x184>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	4a52      	ldr	r2, [pc, #328]	@ (8000e88 <GPIO_Init+0x184>)
 8000d3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d42:	6093      	str	r3, [r2, #8]
    SET_PIN_AF(GPIOB, 6, GPIO_AF4);                        // AF4
 8000d44:	4b50      	ldr	r3, [pc, #320]	@ (8000e88 <GPIO_Init+0x184>)
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4a4f      	ldr	r2, [pc, #316]	@ (8000e88 <GPIO_Init+0x184>)
 8000d4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d4e:	6213      	str	r3, [r2, #32]
    SET_PIN_PUPD(GPIOB, 6, GPIO_PUPD_PULLUP);              // Pull-up
 8000d50:	4b4d      	ldr	r3, [pc, #308]	@ (8000e88 <GPIO_Init+0x184>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	4a4c      	ldr	r2, [pc, #304]	@ (8000e88 <GPIO_Init+0x184>)
 8000d56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d5a:	60d3      	str	r3, [r2, #12]

    // Configure PB7 for LCD SDA (I2C1)
    SET_PIN_MODE(GPIOB, 7, GPIO_MODE_AF);                  // Alternate Function Mode
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <GPIO_Init+0x184>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a49      	ldr	r2, [pc, #292]	@ (8000e88 <GPIO_Init+0x184>)
 8000d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d66:	6013      	str	r3, [r2, #0]
    SET_PIN_OTYPE(GPIOB, 7, GPIO_OTYPE_OPENDRAIN);         // Open-drain
 8000d68:	4b47      	ldr	r3, [pc, #284]	@ (8000e88 <GPIO_Init+0x184>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	4a46      	ldr	r2, [pc, #280]	@ (8000e88 <GPIO_Init+0x184>)
 8000d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d72:	6053      	str	r3, [r2, #4]
    SET_PIN_SPEED(GPIOB, 7, GPIO_OSPEED_HIGH);             // High Speed
 8000d74:	4b44      	ldr	r3, [pc, #272]	@ (8000e88 <GPIO_Init+0x184>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4a43      	ldr	r2, [pc, #268]	@ (8000e88 <GPIO_Init+0x184>)
 8000d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d7e:	6093      	str	r3, [r2, #8]
    SET_PIN_AF(GPIOB, 7, GPIO_AF4);                        // AF4
 8000d80:	4b41      	ldr	r3, [pc, #260]	@ (8000e88 <GPIO_Init+0x184>)
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	4a40      	ldr	r2, [pc, #256]	@ (8000e88 <GPIO_Init+0x184>)
 8000d86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000d8a:	6213      	str	r3, [r2, #32]
    SET_PIN_PUPD(GPIOB, 7, GPIO_PUPD_PULLUP);              // Pull-up
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e88 <GPIO_Init+0x184>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	4a3d      	ldr	r2, [pc, #244]	@ (8000e88 <GPIO_Init+0x184>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d96:	60d3      	str	r3, [r2, #12]

    // Configure PA8 for Temperature Sensor SCL (I2C3)
    SET_PIN_MODE(GPIOA, 8, GPIO_MODE_AF);                  // Alternate Function Mode
 8000d98:	4b3a      	ldr	r3, [pc, #232]	@ (8000e84 <GPIO_Init+0x180>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a39      	ldr	r2, [pc, #228]	@ (8000e84 <GPIO_Init+0x180>)
 8000d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da2:	6013      	str	r3, [r2, #0]
    SET_PIN_OTYPE(GPIOA, 8, GPIO_OTYPE_OPENDRAIN);         // Open-drain
 8000da4:	4b37      	ldr	r3, [pc, #220]	@ (8000e84 <GPIO_Init+0x180>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a36      	ldr	r2, [pc, #216]	@ (8000e84 <GPIO_Init+0x180>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dae:	6053      	str	r3, [r2, #4]
    SET_PIN_SPEED(GPIOA, 8, GPIO_OSPEED_HIGH);             // High Speed
 8000db0:	4b34      	ldr	r3, [pc, #208]	@ (8000e84 <GPIO_Init+0x180>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	4a33      	ldr	r2, [pc, #204]	@ (8000e84 <GPIO_Init+0x180>)
 8000db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dba:	6093      	str	r3, [r2, #8]
    SET_PIN_AF(GPIOA, 8, GPIO_AF4);                        // AF4
 8000dbc:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <GPIO_Init+0x180>)
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc0:	4a30      	ldr	r2, [pc, #192]	@ (8000e84 <GPIO_Init+0x180>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6253      	str	r3, [r2, #36]	@ 0x24
    SET_PIN_PUPD(GPIOA, 8, GPIO_PUPD_PULLUP);              // Pull-up
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <GPIO_Init+0x180>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8000e84 <GPIO_Init+0x180>)
 8000dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd2:	60d3      	str	r3, [r2, #12]

    // Configure PC9 for Temperature Sensor SDL (I2C3)
    SET_PIN_MODE(GPIOC, 9, GPIO_MODE_AF);                  // Alternate Function Mode
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <GPIO_Init+0x188>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e8c <GPIO_Init+0x188>)
 8000dda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dde:	6013      	str	r3, [r2, #0]
    SET_PIN_OTYPE(GPIOC, 9, GPIO_OTYPE_OPENDRAIN);         // Open-drain
 8000de0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <GPIO_Init+0x188>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a29      	ldr	r2, [pc, #164]	@ (8000e8c <GPIO_Init+0x188>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dea:	6053      	str	r3, [r2, #4]
    SET_PIN_SPEED(GPIOC, 9, GPIO_OSPEED_HIGH);             // High Speed
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <GPIO_Init+0x188>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <GPIO_Init+0x188>)
 8000df2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000df6:	6093      	str	r3, [r2, #8]
    SET_PIN_AF(GPIOC, 9, GPIO_AF4);                        // AF4
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <GPIO_Init+0x188>)
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfc:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <GPIO_Init+0x188>)
 8000dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e02:	6253      	str	r3, [r2, #36]	@ 0x24
    SET_PIN_PUPD(GPIOC, 9, GPIO_PUPD_PULLUP);              // Pull-up
 8000e04:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <GPIO_Init+0x188>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <GPIO_Init+0x188>)
 8000e0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e0e:	60d3      	str	r3, [r2, #12]

    // Configure PA9 for UART Transmit
    SET_PIN_MODE(GPIOA, 9, GPIO_MODE_AF);                  // Alternate Function Mode
 8000e10:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <GPIO_Init+0x180>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <GPIO_Init+0x180>)
 8000e16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e1a:	6013      	str	r3, [r2, #0]
    SET_PIN_OTYPE(GPIOA, 9, GPIO_OTYPE_PUSHPULL);          // Push-pull
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <GPIO_Init+0x180>)
 8000e1e:	4a19      	ldr	r2, [pc, #100]	@ (8000e84 <GPIO_Init+0x180>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	6053      	str	r3, [r2, #4]
    SET_PIN_SPEED(GPIOA, 9, GPIO_OSPEED_HIGH);             // High Speed
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <GPIO_Init+0x180>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	4a16      	ldr	r2, [pc, #88]	@ (8000e84 <GPIO_Init+0x180>)
 8000e2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e2e:	6093      	str	r3, [r2, #8]
    SET_PIN_AF(GPIOA, 9, GPIO_AF7);                        // AF7
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <GPIO_Init+0x180>)
 8000e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e34:	4a13      	ldr	r2, [pc, #76]	@ (8000e84 <GPIO_Init+0x180>)
 8000e36:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000e3a:	6253      	str	r3, [r2, #36]	@ 0x24
    SET_PIN_PUPD(GPIOA, 9, GPIO_PUPD_NONE);                // No pull-up, pull-down
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <GPIO_Init+0x180>)
 8000e3e:	4a11      	ldr	r2, [pc, #68]	@ (8000e84 <GPIO_Init+0x180>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	60d3      	str	r3, [r2, #12]

    // Configure PA10 for UART Receive
    SET_PIN_MODE(GPIOA, 10, GPIO_MODE_AF);                 // Alternate Function Mode
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <GPIO_Init+0x180>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0e      	ldr	r2, [pc, #56]	@ (8000e84 <GPIO_Init+0x180>)
 8000e4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e4e:	6013      	str	r3, [r2, #0]
    SET_PIN_OTYPE(GPIOA, 10, GPIO_OTYPE_PUSHPULL);         // Push-pull
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <GPIO_Init+0x180>)
 8000e52:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <GPIO_Init+0x180>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	6053      	str	r3, [r2, #4]
    SET_PIN_SPEED(GPIOA, 10, GPIO_OSPEED_HIGH);            // High Speed
 8000e58:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <GPIO_Init+0x180>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4a09      	ldr	r2, [pc, #36]	@ (8000e84 <GPIO_Init+0x180>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e62:	6093      	str	r3, [r2, #8]
    SET_PIN_AF(GPIOA, 10, GPIO_AF7);                       // AF7
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <GPIO_Init+0x180>)
 8000e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e68:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <GPIO_Init+0x180>)
 8000e6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000e6e:	6253      	str	r3, [r2, #36]	@ 0x24
    SET_PIN_PUPD(GPIOA, 10, GPIO_PUPD_NONE);               // No pull-up, pull-down
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <GPIO_Init+0x180>)
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <GPIO_Init+0x180>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40020800 	.word	0x40020800

08000e90 <I2C1_Init>:
 *      Author: esthe
 */

#include "i2c.h"

void I2C1_Init(void) {
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
    I2C1->CR1 &= ~I2C_CR1_PE;                            // Turn off I2C1
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <I2C1_Init+0x54>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <I2C1_Init+0x54>)
 8000e9a:	f023 0301 	bic.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]

    I2C1->CR1 = I2C_CR1_SWRST;                           // Reset I2C1
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <I2C1_Init+0x54>)
 8000ea2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ea6:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;                         // Release reset
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <I2C1_Init+0x54>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <I2C1_Init+0x54>)
 8000eae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000eb2:	6013      	str	r3, [r2, #0]

    I2C1->CR2 |= 0x10;                                   // Set the peripheral clock frequency (16 MHz)
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <I2C1_Init+0x54>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <I2C1_Init+0x54>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6053      	str	r3, [r2, #4]

    I2C1->CCR = 0x50;                                    // Set clock control register value
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <I2C1_Init+0x54>)
 8000ec2:	2250      	movs	r2, #80	@ 0x50
 8000ec4:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 0x11;                                  // Set rise time register value
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <I2C1_Init+0x54>)
 8000ec8:	2211      	movs	r2, #17
 8000eca:	621a      	str	r2, [r3, #32]

    I2C1->CR1 |= I2C_CR1_PE;                             // Enable I2C peripheral
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <I2C1_Init+0x54>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <I2C1_Init+0x54>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40005400 	.word	0x40005400

08000ee8 <I2C3_Init>:

void I2C3_Init(void) {
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
    // Turn off I2C3
    I2C3->CR1 &= ~I2C_CR1_PE;
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <I2C3_Init+0x54>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <I2C3_Init+0x54>)
 8000ef2:	f023 0301 	bic.w	r3, r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]

    // Reset I2C3
    I2C3->CR1 = I2C_CR1_SWRST;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <I2C3_Init+0x54>)
 8000efa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000efe:	601a      	str	r2, [r3, #0]
    I2C3->CR1 &= ~I2C_CR1_SWRST;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <I2C3_Init+0x54>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <I2C3_Init+0x54>)
 8000f06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f0a:	6013      	str	r3, [r2, #0]

    // Set I2C3 parameters
    I2C3->CR2 |= 0x10;                       // Set the peripheral clock frequency (assuming 16 MHz here)
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <I2C3_Init+0x54>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <I2C3_Init+0x54>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6053      	str	r3, [r2, #4]
    I2C3->CCR = 0x50;                        // Set the I2C3 clock control register
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <I2C3_Init+0x54>)
 8000f1a:	2250      	movs	r2, #80	@ 0x50
 8000f1c:	61da      	str	r2, [r3, #28]
    I2C3->TRISE = 0x11;                      // Set the rise time
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <I2C3_Init+0x54>)
 8000f20:	2211      	movs	r2, #17
 8000f22:	621a      	str	r2, [r3, #32]

    I2C3->CR1 |= I2C_CR1_PE;                 // Enable I2C peripheral
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <I2C3_Init+0x54>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <I2C3_Init+0x54>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40005c00 	.word	0x40005c00

08000f40 <Clock_Init>:
 *      Author: esthe
 */

#include "init.h"

void Clock_Init(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
    // Enable clocks for GPIO ports
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 8000f44:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a29      	ldr	r2, [pc, #164]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;  // Enable GPIOB clock
 8000f50:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	4a26      	ldr	r2, [pc, #152]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;  // Enable GPIOC clock
 8000f5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30

    // Enable clock for ADC
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;    // Enable ADC1 clock
 8000f68:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6c:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f72:	6453      	str	r3, [r2, #68]	@ 0x44

    // Enable clock for DMA
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;    // Enable DMA2 clock
 8000f74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f7e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Enable clocks for I2C peripherals
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;    // Enable I2C1 clock
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f8a:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;    // Enable I2C3 clock
 8000f8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	4a17      	ldr	r2, [pc, #92]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f96:	6413      	str	r3, [r2, #64]	@ 0x40

    // Enable clock for UART
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // Enable USART1 clock
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <Clock_Init+0xb0>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6453      	str	r3, [r2, #68]	@ 0x44

    // Configure TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;     // Enable TIM2 clock
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <Clock_Init+0xb0>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a11      	ldr	r2, [pc, #68]	@ (8000ff0 <Clock_Init+0xb0>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 16000 - 1;                  // Set prescaler to 16000
 8000fb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000fb8:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 10000 - 1;                  // Set auto-reload value to 10000
 8000fba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fbe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR2 |= TIM_CR2_MMS_1;             // Set Master Mode Selection
 8000fc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fce:	f043 0320 	orr.w	r3, r3, #32
 8000fd2:	6053      	str	r3, [r2, #4]
    TIM2->CR1 |= TIM_CR1_CEN;               // Enable the timer
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <delay_ms>:
#define CLOCK_FREQUENCY 16000000UL // 16 MHz
#define CYCLES_PER_MS (CLOCK_FREQUENCY / 1000)

static inline void delay_ms(uint32_t ms);

static inline void delay_ms(uint32_t ms) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    uint32_t total_cycles = ms * CYCLES_PER_MS;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	60fb      	str	r3, [r7, #12]
    while (total_cycles--) {
 8001008:	e000      	b.n	800100c <delay_ms+0x18>
        __asm("nop");
 800100a:	bf00      	nop
    while (total_cycles--) {
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	1e5a      	subs	r2, r3, #1
 8001010:	60fa      	str	r2, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f9      	bne.n	800100a <delay_ms+0x16>
    }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <main>:
uint16_t raw_humidity, raw_temperature;
float humidity = 0, temperature = 0;

void Display_Value(int row, int col, const char *format, ...);

int main(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af02      	add	r7, sp, #8
    // INITIALIZATIONS
    Clock_Init();
 800102a:	f7ff ff89 	bl	8000f40 <Clock_Init>
    GPIO_Init();
 800102e:	f7ff fe69 	bl	8000d04 <GPIO_Init>
    ADC_Init();
 8001032:	f7ff fdc1 	bl	8000bb8 <ADC_Init>
    DMA_Init();
 8001036:	f7ff fe1f 	bl	8000c78 <DMA_Init>
    I2C1_Init();
 800103a:	f7ff ff29 	bl	8000e90 <I2C1_Init>
    I2C3_Init();
 800103e:	f7ff ff53 	bl	8000ee8 <I2C3_Init>
    USART1_Init();
 8001042:	f000 f9ad 	bl	80013a0 <USART1_Init>

    // ADC starts in the initialization functions

    // I2C1
    LCD_Init();
 8001046:	f000 fc05 	bl	8001854 <LCD_Init>
    //LCD_Clear_Display();
    LCD_Cursor_Position(0, 0);
 800104a:	2100      	movs	r1, #0
 800104c:	2000      	movs	r0, #0
 800104e:	f000 fc50 	bl	80018f2 <LCD_Cursor_Position>
    LCD_Send_String("Humi:");
 8001052:	484a      	ldr	r0, [pc, #296]	@ (800117c <main+0x158>)
 8001054:	f000 fc38 	bl	80018c8 <LCD_Send_String>
    LCD_Cursor_Position(1, 0);
 8001058:	2100      	movs	r1, #0
 800105a:	2001      	movs	r0, #1
 800105c:	f000 fc49 	bl	80018f2 <LCD_Cursor_Position>
    LCD_Send_String("Temp:");
 8001060:	4847      	ldr	r0, [pc, #284]	@ (8001180 <main+0x15c>)
 8001062:	f000 fc31 	bl	80018c8 <LCD_Send_String>
    LCD_Cursor_Position(2, 0);
 8001066:	2100      	movs	r1, #0
 8001068:	2002      	movs	r0, #2
 800106a:	f000 fc42 	bl	80018f2 <LCD_Cursor_Position>
    LCD_Send_String("Moist:");
 800106e:	4845      	ldr	r0, [pc, #276]	@ (8001184 <main+0x160>)
 8001070:	f000 fc2a 	bl	80018c8 <LCD_Send_String>
    LCD_Cursor_Position(3, 0);
 8001074:	2100      	movs	r1, #0
 8001076:	2003      	movs	r0, #3
 8001078:	f000 fc3b 	bl	80018f2 <LCD_Cursor_Position>
    LCD_Send_String("Light:");
 800107c:	4842      	ldr	r0, [pc, #264]	@ (8001188 <main+0x164>)
 800107e:	f000 fc23 	bl	80018c8 <LCD_Send_String>

    AM2320_Wakeup();
 8001082:	f000 f9db 	bl	800143c <AM2320_Wakeup>
    AM2320_Send_Command();
 8001086:	f000 fa0b 	bl	80014a0 <AM2320_Send_Command>
    delay_ms(4);
 800108a:	2004      	movs	r0, #4
 800108c:	f7ff ffb2 	bl	8000ff4 <delay_ms>
    AM2320_Receive();
 8001090:	f000 fa74 	bl	800157c <AM2320_Receive>
    delay_ms(200);
 8001094:	20c8      	movs	r0, #200	@ 0xc8
 8001096:	f7ff ffad 	bl	8000ff4 <delay_ms>
    // USART
    //USART1_Transmit();

    while (1) {
        // READ HUMIDITY AND TEMPERATURE
        AM2320_Wakeup();
 800109a:	f000 f9cf 	bl	800143c <AM2320_Wakeup>
        AM2320_Send_Command();
 800109e:	f000 f9ff 	bl	80014a0 <AM2320_Send_Command>
        delay_ms(2);
 80010a2:	2002      	movs	r0, #2
 80010a4:	f7ff ffa6 	bl	8000ff4 <delay_ms>
        AM2320_Receive();
 80010a8:	f000 fa68 	bl	800157c <AM2320_Receive>
        delay_ms(3000);
 80010ac:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010b0:	f7ff ffa0 	bl	8000ff4 <delay_ms>

        // HANDLE SENSOR DATA HERE
        raw_humidity = (AM2320_Buffer[2] << 8) | AM2320_Buffer[3];
 80010b4:	4b35      	ldr	r3, [pc, #212]	@ (800118c <main+0x168>)
 80010b6:	789b      	ldrb	r3, [r3, #2]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b33      	ldr	r3, [pc, #204]	@ (800118c <main+0x168>)
 80010be:	78db      	ldrb	r3, [r3, #3]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <main+0x16c>)
 80010ca:	801a      	strh	r2, [r3, #0]
        raw_temperature = (AM2320_Buffer[4] << 8) | AM2320_Buffer[5];
 80010cc:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <main+0x168>)
 80010ce:	791b      	ldrb	r3, [r3, #4]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <main+0x168>)
 80010d6:	795b      	ldrb	r3, [r3, #5]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <main+0x170>)
 80010e2:	801a      	strh	r2, [r3, #0]

        humidity = raw_humidity / 10;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <main+0x16c>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001198 <main+0x174>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fa:	4b28      	ldr	r3, [pc, #160]	@ (800119c <main+0x178>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]
        temperature = raw_temperature / 10;
 8001100:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <main+0x170>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	4a24      	ldr	r2, [pc, #144]	@ (8001198 <main+0x174>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	08db      	lsrs	r3, r3, #3
 800110c:	b29b      	uxth	r3, r3
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <main+0x17c>)
 8001118:	edc3 7a00 	vstr	s15, [r3]

        // ADC data (light and moisture level) are sampled by the DMA

        // DISPLAY DATA TO LCD
        Display_Value(0, 5, "%.1f", humidity);
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <main+0x178>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa19 	bl	8000558 <__aeabi_f2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	e9cd 2300 	strd	r2, r3, [sp]
 800112e:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <main+0x180>)
 8001130:	2105      	movs	r1, #5
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f83c 	bl	80011b0 <Display_Value>
        Display_Value(1, 5, "%.1f", temperature);
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <main+0x17c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa0b 	bl	8000558 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	e9cd 2300 	strd	r2, r3, [sp]
 800114a:	4a16      	ldr	r2, [pc, #88]	@ (80011a4 <main+0x180>)
 800114c:	2105      	movs	r1, #5
 800114e:	2001      	movs	r0, #1
 8001150:	f000 f82e 	bl	80011b0 <Display_Value>
        Display_Value(2, 6, "%.lu", ADC_Buffer[0]);
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <main+0x184>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <main+0x188>)
 800115a:	2106      	movs	r1, #6
 800115c:	2002      	movs	r0, #2
 800115e:	f000 f827 	bl	80011b0 <Display_Value>
        Display_Value(3, 6, "%.lu", ADC_Buffer[1]);
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <main+0x184>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <main+0x188>)
 8001168:	2106      	movs	r1, #6
 800116a:	2003      	movs	r0, #3
 800116c:	f000 f820 	bl	80011b0 <Display_Value>

        delay_ms(3000);
 8001170:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001174:	f7ff ff3e 	bl	8000ff4 <delay_ms>
        AM2320_Wakeup();
 8001178:	bf00      	nop
 800117a:	e78e      	b.n	800109a <main+0x76>
 800117c:	08004648 	.word	0x08004648
 8001180:	08004650 	.word	0x08004650
 8001184:	08004658 	.word	0x08004658
 8001188:	08004660 	.word	0x08004660
 800118c:	200001ec 	.word	0x200001ec
 8001190:	200001f4 	.word	0x200001f4
 8001194:	200001f6 	.word	0x200001f6
 8001198:	cccccccd 	.word	0xcccccccd
 800119c:	200001f8 	.word	0x200001f8
 80011a0:	200001fc 	.word	0x200001fc
 80011a4:	08004668 	.word	0x08004668
 80011a8:	200001e4 	.word	0x200001e4
 80011ac:	08004670 	.word	0x08004670

080011b0 <Display_Value>:
    }
}

void Display_Value(int row, int col, const char * format, ...) {
 80011b0:	b40c      	push	{r2, r3}
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b088      	sub	sp, #32
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	char buffer[16];

	va_list var;
	va_start(var, format); // read var after format
 80011bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c0:	60fb      	str	r3, [r7, #12]
	vsprintf(buffer, format, var);
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 f95c 	bl	8002488 <vsiprintf>
	va_end(var);

	LCD_Cursor_Position(row, col);
 80011d0:	6839      	ldr	r1, [r7, #0]
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 fb8d 	bl	80018f2 <LCD_Cursor_Position>
	LCD_Send_String(buffer);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fb73 	bl	80018c8 <LCD_Send_String>
}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011ec:	b002      	add	sp, #8
 80011ee:	4770      	bx	lr

080011f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return 1;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_kill>:

int _kill(int pid, int sig)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800120a:	f001 f999 	bl	8002540 <__errno>
 800120e:	4603      	mov	r3, r0
 8001210:	2216      	movs	r2, #22
 8001212:	601a      	str	r2, [r3, #0]
  return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_exit>:

void _exit (int status)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffe7 	bl	8001200 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001232:	bf00      	nop
 8001234:	e7fd      	b.n	8001232 <_exit+0x12>

08001236 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e00a      	b.n	800125e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001248:	f3af 8000 	nop.w
 800124c:	4601      	mov	r1, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	60ba      	str	r2, [r7, #8]
 8001254:	b2ca      	uxtb	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	dbf0      	blt.n	8001248 <_read+0x12>
  }

  return len;
 8001266:	687b      	ldr	r3, [r7, #4]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e009      	b.n	8001296 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	60ba      	str	r2, [r7, #8]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbf1      	blt.n	8001282 <_write+0x12>
  }
  return len;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_close>:

int _close(int file)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d0:	605a      	str	r2, [r3, #4]
  return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_isatty>:

int _isatty(int file)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	@ (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f001 f8fe 	bl	8002540 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20018000 	.word	0x20018000
 8001370:	00000400 	.word	0x00000400
 8001374:	20000200 	.word	0x20000200
 8001378:	20000350 	.word	0x20000350

0800137c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <USART1_Init>:
 *      Author: esthe
 */

#include "usart.h"

void USART1_Init(void) {
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
    USART1->CR1 &= ~USART_CR1_UE;  // Disable USART for configuration
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <USART1_Init+0x68>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <USART1_Init+0x68>)
 80013aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80013ae:	60d3      	str	r3, [r2, #12]

    USART1->CR1 &= ~USART_CR1_M;  // Word length = 8 bits
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <USART1_Init+0x68>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <USART1_Init+0x68>)
 80013b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013ba:	60d3      	str	r3, [r2, #12]
    USART1->CR1 &= ~USART_CR1_PCE;  // No parity control
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <USART1_Init+0x68>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <USART1_Init+0x68>)
 80013c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013c6:	60d3      	str	r3, [r2, #12]
    USART1->CR2 &= ~USART_CR2_STOP;  // 1 stop bit
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <USART1_Init+0x68>)
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <USART1_Init+0x68>)
 80013ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013d2:	6113      	str	r3, [r2, #16]

    // Baud rate setup (assuming 16 MHz clock and 115200 baud rate)
    USART1->BRR = 138;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <USART1_Init+0x68>)
 80013d6:	228a      	movs	r2, #138	@ 0x8a
 80013d8:	609a      	str	r2, [r3, #8]

    USART1->CR1 |= USART_CR1_TE;  // Enable transmitter
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <USART1_Init+0x68>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <USART1_Init+0x68>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_RE;  // Enable receiver (optional, if needed)
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <USART1_Init+0x68>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <USART1_Init+0x68>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	60d3      	str	r3, [r2, #12]

    USART1->CR1 |= USART_CR1_UE;  // Enable USART1
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <USART1_Init+0x68>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <USART1_Init+0x68>)
 80013f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013fc:	60d3      	str	r3, [r2, #12]
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40011000 	.word	0x40011000

0800140c <delay_ms>:
static inline void delay_ms(uint32_t ms) {
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    uint32_t total_cycles = ms * CYCLES_PER_MS;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	60fb      	str	r3, [r7, #12]
    while (total_cycles--) {
 8001420:	e000      	b.n	8001424 <delay_ms+0x18>
        __asm("nop");
 8001422:	bf00      	nop
    while (total_cycles--) {
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e5a      	subs	r2, r3, #1
 8001428:	60fa      	str	r2, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <delay_ms+0x16>
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <AM2320_Wakeup>:
 *      Author: esthe
 */

#include "peripherals/am2320.h"

void AM2320_Wakeup(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
    uint8_t reg;
    // START CONDITION
    I2C3->CR1 &= ~I2C_CR1_POS;
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <AM2320_Wakeup+0x60>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a15      	ldr	r2, [pc, #84]	@ (800149c <AM2320_Wakeup+0x60>)
 8001448:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800144c:	6013      	str	r3, [r2, #0]
    I2C3->CR1 |= I2C_CR1_START;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <AM2320_Wakeup+0x60>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a12      	ldr	r2, [pc, #72]	@ (800149c <AM2320_Wakeup+0x60>)
 8001454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001458:	6013      	str	r3, [r2, #0]
    while (!(I2C3->SR1 & I2C_SR1_SB));
 800145a:	bf00      	nop
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <AM2320_Wakeup+0x60>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f9      	beq.n	800145c <AM2320_Wakeup+0x20>
    reg = I2C3->SR1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <AM2320_Wakeup+0x60>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	71fb      	strb	r3, [r7, #7]

    // SLAVE ADDRESS
    I2C3->DR = 0xB8; // Set slave address
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <AM2320_Wakeup+0x60>)
 8001470:	22b8      	movs	r2, #184	@ 0xb8
 8001472:	611a      	str	r2, [r3, #16]
    //while (!(I2C3->SR1 & I2C_SR1_ADDR));
    //reg = I2C3->SR1 | I2C3->SR2; // Clear address flag
    //while (!(I2C3->SR1 & I2C_SR1_TXE)); // Wait until data register is empty

    delay_ms(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff ffc9 	bl	800140c <delay_ms>
    // Send a stop signal
    I2C3->CR1 |= I2C_CR1_STOP; // Stop transmission
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <AM2320_Wakeup+0x60>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a07      	ldr	r2, [pc, #28]	@ (800149c <AM2320_Wakeup+0x60>)
 8001480:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001484:	6013      	str	r3, [r2, #0]
    reg = I2C3->SR1; // Read status register
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <AM2320_Wakeup+0x60>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	71fb      	strb	r3, [r7, #7]
    reg = I2C3->SR2; // Read status register 2 to clear flags
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <AM2320_Wakeup+0x60>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	71fb      	strb	r3, [r7, #7]
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40005c00 	.word	0x40005c00

080014a0 <AM2320_Send_Command>:

void AM2320_Send_Command(void) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
    uint8_t reg;
    // START CONDITION
    I2C3->CR1 &= ~I2C_CR1_POS;
 80014a6:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a32      	ldr	r2, [pc, #200]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80014b0:	6013      	str	r3, [r2, #0]
    I2C3->CR1 |= I2C_CR1_START;
 80014b2:	4b30      	ldr	r3, [pc, #192]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014bc:	6013      	str	r3, [r2, #0]
    while (!(I2C3->SR1 & I2C_SR1_SB));
 80014be:	bf00      	nop
 80014c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f9      	beq.n	80014c0 <AM2320_Send_Command+0x20>
    reg = I2C3->SR1;
 80014cc:	4b29      	ldr	r3, [pc, #164]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	70fb      	strb	r3, [r7, #3]

    // SLAVE ADDRESS
    I2C3->DR = 0xB8; // Set slave address
 80014d2:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014d4:	22b8      	movs	r2, #184	@ 0xb8
 80014d6:	611a      	str	r2, [r3, #16]
    while (!(I2C3->SR1 & I2C_SR1_ADDR));
 80014d8:	bf00      	nop
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f9      	beq.n	80014da <AM2320_Send_Command+0x3a>
    reg = I2C3->SR1 | I2C3->SR2; // Clear address flag
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	70fb      	strb	r3, [r7, #3]
    while (!(I2C3->SR1 & I2C_SR1_TXE)); // Wait until data register is empty
 80014f6:	bf00      	nop
 80014f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <AM2320_Send_Command+0xd4>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f9      	beq.n	80014f8 <AM2320_Send_Command+0x58>

    // SEND CMD
    uint8_t cmd[3] = {0x03, 0x00, 0x04};
 8001504:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <AM2320_Send_Command+0xd8>)
 8001506:	463b      	mov	r3, r7
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	4611      	mov	r1, r2
 800150c:	8019      	strh	r1, [r3, #0]
 800150e:	3302      	adds	r3, #2
 8001510:	0c12      	lsrs	r2, r2, #16
 8001512:	701a      	strb	r2, [r3, #0]
    for (int i = 0 ; i < 3; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	e017      	b.n	800154a <AM2320_Send_Command+0xaa>
        I2C3->DR = cmd[i]; // Send command byte
 800151a:	463a      	mov	r2, r7
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <AM2320_Send_Command+0xd4>)
 8001524:	611a      	str	r2, [r3, #16]
        while(!(I2C3->SR1 & I2C_SR1_BTF)); // Wait until byte transfer finished
 8001526:	bf00      	nop
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <AM2320_Send_Command+0xd4>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f9      	beq.n	8001528 <AM2320_Send_Command+0x88>
        reg = 0x00; // Clear reg
 8001534:	2300      	movs	r3, #0
 8001536:	70fb      	strb	r3, [r7, #3]
        reg = I2C3->SR1; // Read status register
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <AM2320_Send_Command+0xd4>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	70fb      	strb	r3, [r7, #3]
        reg = I2C3->SR2; // Read status register 2 to clear flags
 800153e:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <AM2320_Send_Command+0xd4>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	70fb      	strb	r3, [r7, #3]
    for (int i = 0 ; i < 3; i++) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b02      	cmp	r3, #2
 800154e:	dde4      	ble.n	800151a <AM2320_Send_Command+0x7a>
    }

    // Send a stop signal
    I2C3->CR1 |= I2C_CR1_STOP; // Stop transmission
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <AM2320_Send_Command+0xd4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <AM2320_Send_Command+0xd4>)
 8001556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155a:	6013      	str	r3, [r2, #0]
    reg = I2C3->SR1; // Read status register
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <AM2320_Send_Command+0xd4>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	70fb      	strb	r3, [r7, #3]
    reg = I2C3->SR2; // Read status register 2 to clear flags
 8001562:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <AM2320_Send_Command+0xd4>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	70fb      	strb	r3, [r7, #3]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40005c00 	.word	0x40005c00
 8001578:	08004678 	.word	0x08004678

0800157c <AM2320_Receive>:

void AM2320_Receive(void) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
    uint8_t reg;
    // START CONDITION
    I2C3->CR1 &= ~I2C_CR1_POS;
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <AM2320_Receive+0xc0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2d      	ldr	r2, [pc, #180]	@ (800163c <AM2320_Receive+0xc0>)
 8001588:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800158c:	6013      	str	r3, [r2, #0]
    I2C3->CR1 |= I2C_CR1_START;
 800158e:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <AM2320_Receive+0xc0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a2a      	ldr	r2, [pc, #168]	@ (800163c <AM2320_Receive+0xc0>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]
    I2C3 -> CR1 |= I2C_CR1_ACK;
 800159a:	4b28      	ldr	r3, [pc, #160]	@ (800163c <AM2320_Receive+0xc0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a27      	ldr	r2, [pc, #156]	@ (800163c <AM2320_Receive+0xc0>)
 80015a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a4:	6013      	str	r3, [r2, #0]
    while (!(I2C3->SR1 & I2C_SR1_SB));
 80015a6:	bf00      	nop
 80015a8:	4b24      	ldr	r3, [pc, #144]	@ (800163c <AM2320_Receive+0xc0>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f9      	beq.n	80015a8 <AM2320_Receive+0x2c>
    reg = I2C3->SR1;
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <AM2320_Receive+0xc0>)
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	70fb      	strb	r3, [r7, #3]

    // SLAVE ADDRESS
    I2C3->DR = 0xB9; // Set slave address
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <AM2320_Receive+0xc0>)
 80015bc:	22b9      	movs	r2, #185	@ 0xb9
 80015be:	611a      	str	r2, [r3, #16]
    while (!(I2C3->SR1 & I2C_SR1_ADDR));
 80015c0:	bf00      	nop
 80015c2:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <AM2320_Receive+0xc0>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f9      	beq.n	80015c2 <AM2320_Receive+0x46>
    reg = I2C3->SR1 | I2C3->SR2; // Clear address flag
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <AM2320_Receive+0xc0>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <AM2320_Receive+0xc0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	70fb      	strb	r3, [r7, #3]
    //while (!(I2C3->SR1 & I2C_SR1_TXE)); // Wait until data register is empty
    // you dont need to do this because you are in read mode now

    // READ DATA
    for (int i = 0; i < 8; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	e020      	b.n	8001626 <AM2320_Receive+0xaa>
        if (i + 1 == 8) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	d10b      	bne.n	8001602 <AM2320_Receive+0x86>
            I2C3->CR1 &= ~I2C_CR1_ACK;
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <AM2320_Receive+0xc0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a13      	ldr	r2, [pc, #76]	@ (800163c <AM2320_Receive+0xc0>)
 80015f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015f4:	6013      	str	r3, [r2, #0]
            I2C3->CR1 |= I2C_CR1_STOP;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <AM2320_Receive+0xc0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a10      	ldr	r2, [pc, #64]	@ (800163c <AM2320_Receive+0xc0>)
 80015fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001600:	6013      	str	r3, [r2, #0]
        }
        while (!(I2C3->SR1 & I2C_SR1_RXNE));
 8001602:	bf00      	nop
 8001604:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <AM2320_Receive+0xc0>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f9      	beq.n	8001604 <AM2320_Receive+0x88>
        AM2320_Buffer[i] = I2C3->DR;
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <AM2320_Receive+0xc0>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	b2d9      	uxtb	r1, r3
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <AM2320_Receive+0xc4>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	460a      	mov	r2, r1
 800161e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3301      	adds	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b07      	cmp	r3, #7
 800162a:	dddb      	ble.n	80015e4 <AM2320_Receive+0x68>
    }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40005c00 	.word	0x40005c00
 8001640:	200001ec 	.word	0x200001ec

08001644 <delay_ms>:
static inline void delay_ms(uint32_t ms) {
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    uint32_t total_cycles = ms * CYCLES_PER_MS;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	60fb      	str	r3, [r7, #12]
    while (total_cycles--) {
 8001658:	e000      	b.n	800165c <delay_ms+0x18>
        __asm("nop");
 800165a:	bf00      	nop
    while (total_cycles--) {
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	60fa      	str	r2, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <delay_ms+0x16>
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LCD_Send_Command>:
 */

#include "peripherals/lcd.h"


void LCD_Send_Command(char cmd) {
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
    uint16_t reg;
    char data = cmd;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	74fb      	strb	r3, [r7, #19]

    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data&0xf0);
 8001682:	7cfb      	ldrb	r3, [r7, #19]
 8001684:	f023 030f 	bic.w	r3, r3, #15
 8001688:	74bb      	strb	r3, [r7, #18]
    data_l = ((data<<4)&0xf0);
 800168a:	7cfb      	ldrb	r3, [r7, #19]
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	747b      	strb	r3, [r7, #17]
    data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001690:	7cbb      	ldrb	r3, [r7, #18]
 8001692:	f043 030c 	orr.w	r3, r3, #12
 8001696:	b2db      	uxtb	r3, r3
 8001698:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x08;  //en=0, rs=0
 800169a:	7cbb      	ldrb	r3, [r7, #18]
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0C;  //en=1, rs=0
 80016a4:	7c7b      	ldrb	r3, [r7, #17]
 80016a6:	f043 030c 	orr.w	r3, r3, #12
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x08;  //en=0, rs=0
 80016ae:	7c7b      	ldrb	r3, [r7, #17]
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	72fb      	strb	r3, [r7, #11]

    // START CONDITION
    while (I2C1->SR2 & I2C_SR2_BUSY);
 80016b8:	bf00      	nop
 80016ba:	4b24      	ldr	r3, [pc, #144]	@ (800174c <LCD_Send_Command+0xd8>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f9      	bne.n	80016ba <LCD_Send_Command+0x46>
    I2C1->CR1 |= I2C_CR1_START;
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <LCD_Send_Command+0xd8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a20      	ldr	r2, [pc, #128]	@ (800174c <LCD_Send_Command+0xd8>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d0:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80016d2:	bf00      	nop
 80016d4:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <LCD_Send_Command+0xd8>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f9      	beq.n	80016d4 <LCD_Send_Command+0x60>

    // SLAVE ADDRESS
    I2C1->DR = 0x4E; // 0 is write 0x4E for LCD 0x5C << 1 for sensor
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <LCD_Send_Command+0xd8>)
 80016e2:	224e      	movs	r2, #78	@ 0x4e
 80016e4:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80016e6:	bf00      	nop
 80016e8:	4b18      	ldr	r3, [pc, #96]	@ (800174c <LCD_Send_Command+0xd8>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f9      	beq.n	80016e8 <LCD_Send_Command+0x74>
    reg = I2C1->SR1 | I2C1->SR2;
 80016f4:	4b15      	ldr	r3, [pc, #84]	@ (800174c <LCD_Send_Command+0xd8>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b14      	ldr	r3, [pc, #80]	@ (800174c <LCD_Send_Command+0xd8>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < 4; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e010      	b.n	800172c <LCD_Send_Command+0xb8>
        I2C1->DR = data_t[i];
 800170a:	f107 0208 	add.w	r2, r7, #8
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	4413      	add	r3, r2
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <LCD_Send_Command+0xd8>)
 8001716:	611a      	str	r2, [r3, #16]
        while(!(I2C1 -> SR1 & I2C_SR1_BTF));
 8001718:	bf00      	nop
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <LCD_Send_Command+0xd8>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f9      	beq.n	800171a <LCD_Send_Command+0xa6>
    for (int i = 0; i < 4; i++) {
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b03      	cmp	r3, #3
 8001730:	ddeb      	ble.n	800170a <LCD_Send_Command+0x96>
    }

    // Send a stop signal
    I2C1->CR1 |= I2C_CR1_STOP;
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <LCD_Send_Command+0xd8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <LCD_Send_Command+0xd8>)
 8001738:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173c:	6013      	str	r3, [r2, #0]
}
 800173e:	bf00      	nop
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40005400 	.word	0x40005400

08001750 <LCD_Send_Data>:

void LCD_Send_Data(char data) {
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
    uint16_t reg;

    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data&0xf0);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f023 030f 	bic.w	r3, r3, #15
 8001760:	74fb      	strb	r3, [r7, #19]
    data_l = ((data<<4)&0xf0);
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	74bb      	strb	r3, [r7, #18]
    data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001768:	7cfb      	ldrb	r3, [r7, #19]
 800176a:	f043 030d 	orr.w	r3, r3, #13
 800176e:	b2db      	uxtb	r3, r3
 8001770:	733b      	strb	r3, [r7, #12]
    data_t[1] = data_u|0x09;  //en=0, rs=1
 8001772:	7cfb      	ldrb	r3, [r7, #19]
 8001774:	f043 0309 	orr.w	r3, r3, #9
 8001778:	b2db      	uxtb	r3, r3
 800177a:	737b      	strb	r3, [r7, #13]
    data_t[2] = data_l|0x0D;  //en=1, rs=1
 800177c:	7cbb      	ldrb	r3, [r7, #18]
 800177e:	f043 030d 	orr.w	r3, r3, #13
 8001782:	b2db      	uxtb	r3, r3
 8001784:	73bb      	strb	r3, [r7, #14]
    data_t[3] = data_l|0x09;  //en=0, rs=1
 8001786:	7cbb      	ldrb	r3, [r7, #18]
 8001788:	f043 0309 	orr.w	r3, r3, #9
 800178c:	b2db      	uxtb	r3, r3
 800178e:	73fb      	strb	r3, [r7, #15]

    // START CONDITION
    I2C1->CR1 &= ~I2C_CR1_POS;
 8001790:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <LCD_Send_Data+0x100>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2e      	ldr	r2, [pc, #184]	@ (8001850 <LCD_Send_Data+0x100>)
 8001796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800179a:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= I2C_CR1_START;
 800179c:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <LCD_Send_Data+0x100>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001850 <LCD_Send_Data+0x100>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80017a8:	bf00      	nop
 80017aa:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <LCD_Send_Data+0x100>)
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f9      	beq.n	80017aa <LCD_Send_Data+0x5a>
    reg = I2C1->SR1;
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <LCD_Send_Data+0x100>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	823b      	strh	r3, [r7, #16]

    // SLAVE ADDRESS
    I2C1->DR = 0x4E; // 0 is write 0x4E for LCD 0x5C << 1 for sensor
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <LCD_Send_Data+0x100>)
 80017be:	224e      	movs	r2, #78	@ 0x4e
 80017c0:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80017c2:	bf00      	nop
 80017c4:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <LCD_Send_Data+0x100>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f9      	beq.n	80017c4 <LCD_Send_Data+0x74>
    reg = I2C1->SR1 | I2C1->SR2;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <LCD_Send_Data+0x100>)
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <LCD_Send_Data+0x100>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	823b      	strh	r3, [r7, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80017e0:	bf00      	nop
 80017e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <LCD_Send_Data+0x100>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f9      	beq.n	80017e2 <LCD_Send_Data+0x92>

    for (int i = 0; i < 4; i++) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e018      	b.n	8001826 <LCD_Send_Data+0xd6>
        I2C1->DR = data_t[i];
 80017f4:	f107 020c 	add.w	r2, r7, #12
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4413      	add	r3, r2
 80017fc:	781a      	ldrb	r2, [r3, #0]
 80017fe:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <LCD_Send_Data+0x100>)
 8001800:	611a      	str	r2, [r3, #16]
        while(!(I2C1 -> SR1 & I2C_SR1_BTF));
 8001802:	bf00      	nop
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <LCD_Send_Data+0x100>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f9      	beq.n	8001804 <LCD_Send_Data+0xb4>
        reg = 0x00;
 8001810:	2300      	movs	r3, #0
 8001812:	823b      	strh	r3, [r7, #16]
        reg = I2C1 -> SR1;
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <LCD_Send_Data+0x100>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	823b      	strh	r3, [r7, #16]
        reg = I2C1 -> SR2;
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <LCD_Send_Data+0x100>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	823b      	strh	r3, [r7, #16]
    for (int i = 0; i < 4; i++) {
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b03      	cmp	r3, #3
 800182a:	dde3      	ble.n	80017f4 <LCD_Send_Data+0xa4>
    }

    // Send a stop signal
    I2C1->CR1 |= I2C_CR1_STOP;
 800182c:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <LCD_Send_Data+0x100>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	@ (8001850 <LCD_Send_Data+0x100>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001836:	6013      	str	r3, [r2, #0]
    reg = I2C1 -> SR1;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <LCD_Send_Data+0x100>)
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	823b      	strh	r3, [r7, #16]
    reg = I2C1 -> SR2;
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <LCD_Send_Data+0x100>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	823b      	strh	r3, [r7, #16]
}
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40005400 	.word	0x40005400

08001854 <LCD_Init>:

void LCD_Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    delay_ms(40);
 8001858:	2028      	movs	r0, #40	@ 0x28
 800185a:	f7ff fef3 	bl	8001644 <delay_ms>
    LCD_Send_Command(0x30);
 800185e:	2030      	movs	r0, #48	@ 0x30
 8001860:	f7ff ff08 	bl	8001674 <LCD_Send_Command>
    delay_ms(5);
 8001864:	2005      	movs	r0, #5
 8001866:	f7ff feed 	bl	8001644 <delay_ms>
    LCD_Send_Command(0x30);
 800186a:	2030      	movs	r0, #48	@ 0x30
 800186c:	f7ff ff02 	bl	8001674 <LCD_Send_Command>
    delay_ms(1);
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fee7 	bl	8001644 <delay_ms>
    LCD_Send_Command(0x30);
 8001876:	2030      	movs	r0, #48	@ 0x30
 8001878:	f7ff fefc 	bl	8001674 <LCD_Send_Command>
    delay_ms(10);
 800187c:	200a      	movs	r0, #10
 800187e:	f7ff fee1 	bl	8001644 <delay_ms>
    LCD_Send_Command(0x20);
 8001882:	2020      	movs	r0, #32
 8001884:	f7ff fef6 	bl	8001674 <LCD_Send_Command>
    delay_ms(10);
 8001888:	200a      	movs	r0, #10
 800188a:	f7ff fedb 	bl	8001644 <delay_ms>

    LCD_Send_Command(0x28);
 800188e:	2028      	movs	r0, #40	@ 0x28
 8001890:	f7ff fef0 	bl	8001674 <LCD_Send_Command>
    delay_ms(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff fed5 	bl	8001644 <delay_ms>
    LCD_Send_Command(0x08);
 800189a:	2008      	movs	r0, #8
 800189c:	f7ff feea 	bl	8001674 <LCD_Send_Command>
    delay_ms(1);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff fecf 	bl	8001644 <delay_ms>
    LCD_Send_Command(0x01);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f7ff fee4 	bl	8001674 <LCD_Send_Command>
    delay_ms(5);
 80018ac:	2005      	movs	r0, #5
 80018ae:	f7ff fec9 	bl	8001644 <delay_ms>
    LCD_Send_Command(0x06);
 80018b2:	2006      	movs	r0, #6
 80018b4:	f7ff fede 	bl	8001674 <LCD_Send_Command>
    delay_ms(1);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff fec3 	bl	8001644 <delay_ms>
    LCD_Send_Command(0x0C);
 80018be:	200c      	movs	r0, #12
 80018c0:	f7ff fed8 	bl	8001674 <LCD_Send_Command>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <LCD_Send_String>:

void LCD_Send_String (char *str) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
    while (*str) LCD_Send_Data (*str++);
 80018d0:	e006      	b.n	80018e0 <LCD_Send_String+0x18>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff38 	bl	8001750 <LCD_Send_Data>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f4      	bne.n	80018d2 <LCD_Send_String+0xa>
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <LCD_Cursor_Position>:
    for (int i = 0; i < 70; i++) {
        LCD_Send_Data(' ');
    }
}

void LCD_Cursor_Position (int row, int col) {
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
    uint8_t address;
    if (row == 0) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <LCD_Cursor_Position+0x16>
        address = col;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e016      	b.n	8001936 <LCD_Cursor_Position+0x44>
    }
    else if (row == 1) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d104      	bne.n	8001918 <LCD_Cursor_Position+0x26>
        address = 0x40 + col;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	3340      	adds	r3, #64	@ 0x40
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	e00e      	b.n	8001936 <LCD_Cursor_Position+0x44>
    }
    else if (row == 2) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d104      	bne.n	8001928 <LCD_Cursor_Position+0x36>
        address = 0x14 + col;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3314      	adds	r3, #20
 8001924:	73fb      	strb	r3, [r7, #15]
 8001926:	e006      	b.n	8001936 <LCD_Cursor_Position+0x44>
    }
    else if (row == 3) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d10b      	bne.n	8001946 <LCD_Cursor_Position+0x54>
        address = 0x54 + col;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3354      	adds	r3, #84	@ 0x54
 8001934:	73fb      	strb	r3, [r7, #15]
    }
    else {
        return;
    }
    LCD_Send_Command(0x80 | address);
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fe98 	bl	8001674 <LCD_Send_Command>
 8001944:	e000      	b.n	8001948 <LCD_Cursor_Position+0x56>
        return;
 8001946:	bf00      	nop
}
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001954:	f7ff fd12 	bl	800137c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	@ (800199c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800197e:	f000 fde5 	bl	800254c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001982:	f7ff fb4f 	bl	8001024 <main>
  bx  lr    
 8001986:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001988:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8001994:	08004a00 	.word	0x08004a00
  ldr r2, =_sbss
 8001998:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800199c:	20000350 	.word	0x20000350

080019a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC_IRQHandler>

080019a2 <__cvt>:
 80019a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019a6:	ec57 6b10 	vmov	r6, r7, d0
 80019aa:	2f00      	cmp	r7, #0
 80019ac:	460c      	mov	r4, r1
 80019ae:	4619      	mov	r1, r3
 80019b0:	463b      	mov	r3, r7
 80019b2:	bfbb      	ittet	lt
 80019b4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80019b8:	461f      	movlt	r7, r3
 80019ba:	2300      	movge	r3, #0
 80019bc:	232d      	movlt	r3, #45	@ 0x2d
 80019be:	700b      	strb	r3, [r1, #0]
 80019c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80019c2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80019c6:	4691      	mov	r9, r2
 80019c8:	f023 0820 	bic.w	r8, r3, #32
 80019cc:	bfbc      	itt	lt
 80019ce:	4632      	movlt	r2, r6
 80019d0:	4616      	movlt	r6, r2
 80019d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80019d6:	d005      	beq.n	80019e4 <__cvt+0x42>
 80019d8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80019dc:	d100      	bne.n	80019e0 <__cvt+0x3e>
 80019de:	3401      	adds	r4, #1
 80019e0:	2102      	movs	r1, #2
 80019e2:	e000      	b.n	80019e6 <__cvt+0x44>
 80019e4:	2103      	movs	r1, #3
 80019e6:	ab03      	add	r3, sp, #12
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	ab02      	add	r3, sp, #8
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	ec47 6b10 	vmov	d0, r6, r7
 80019f2:	4653      	mov	r3, sl
 80019f4:	4622      	mov	r2, r4
 80019f6:	f000 fe5b 	bl	80026b0 <_dtoa_r>
 80019fa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80019fe:	4605      	mov	r5, r0
 8001a00:	d119      	bne.n	8001a36 <__cvt+0x94>
 8001a02:	f019 0f01 	tst.w	r9, #1
 8001a06:	d00e      	beq.n	8001a26 <__cvt+0x84>
 8001a08:	eb00 0904 	add.w	r9, r0, r4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2300      	movs	r3, #0
 8001a10:	4630      	mov	r0, r6
 8001a12:	4639      	mov	r1, r7
 8001a14:	f7ff f860 	bl	8000ad8 <__aeabi_dcmpeq>
 8001a18:	b108      	cbz	r0, 8001a1e <__cvt+0x7c>
 8001a1a:	f8cd 900c 	str.w	r9, [sp, #12]
 8001a1e:	2230      	movs	r2, #48	@ 0x30
 8001a20:	9b03      	ldr	r3, [sp, #12]
 8001a22:	454b      	cmp	r3, r9
 8001a24:	d31e      	bcc.n	8001a64 <__cvt+0xc2>
 8001a26:	9b03      	ldr	r3, [sp, #12]
 8001a28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001a2a:	1b5b      	subs	r3, r3, r5
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	b004      	add	sp, #16
 8001a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001a3a:	eb00 0904 	add.w	r9, r0, r4
 8001a3e:	d1e5      	bne.n	8001a0c <__cvt+0x6a>
 8001a40:	7803      	ldrb	r3, [r0, #0]
 8001a42:	2b30      	cmp	r3, #48	@ 0x30
 8001a44:	d10a      	bne.n	8001a5c <__cvt+0xba>
 8001a46:	2200      	movs	r2, #0
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	4639      	mov	r1, r7
 8001a4e:	f7ff f843 	bl	8000ad8 <__aeabi_dcmpeq>
 8001a52:	b918      	cbnz	r0, 8001a5c <__cvt+0xba>
 8001a54:	f1c4 0401 	rsb	r4, r4, #1
 8001a58:	f8ca 4000 	str.w	r4, [sl]
 8001a5c:	f8da 3000 	ldr.w	r3, [sl]
 8001a60:	4499      	add	r9, r3
 8001a62:	e7d3      	b.n	8001a0c <__cvt+0x6a>
 8001a64:	1c59      	adds	r1, r3, #1
 8001a66:	9103      	str	r1, [sp, #12]
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	e7d9      	b.n	8001a20 <__cvt+0x7e>

08001a6c <__exponent>:
 8001a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a6e:	2900      	cmp	r1, #0
 8001a70:	bfba      	itte	lt
 8001a72:	4249      	neglt	r1, r1
 8001a74:	232d      	movlt	r3, #45	@ 0x2d
 8001a76:	232b      	movge	r3, #43	@ 0x2b
 8001a78:	2909      	cmp	r1, #9
 8001a7a:	7002      	strb	r2, [r0, #0]
 8001a7c:	7043      	strb	r3, [r0, #1]
 8001a7e:	dd29      	ble.n	8001ad4 <__exponent+0x68>
 8001a80:	f10d 0307 	add.w	r3, sp, #7
 8001a84:	461d      	mov	r5, r3
 8001a86:	270a      	movs	r7, #10
 8001a88:	461a      	mov	r2, r3
 8001a8a:	fbb1 f6f7 	udiv	r6, r1, r7
 8001a8e:	fb07 1416 	mls	r4, r7, r6, r1
 8001a92:	3430      	adds	r4, #48	@ 0x30
 8001a94:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001a98:	460c      	mov	r4, r1
 8001a9a:	2c63      	cmp	r4, #99	@ 0x63
 8001a9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001aa0:	4631      	mov	r1, r6
 8001aa2:	dcf1      	bgt.n	8001a88 <__exponent+0x1c>
 8001aa4:	3130      	adds	r1, #48	@ 0x30
 8001aa6:	1e94      	subs	r4, r2, #2
 8001aa8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001aac:	1c41      	adds	r1, r0, #1
 8001aae:	4623      	mov	r3, r4
 8001ab0:	42ab      	cmp	r3, r5
 8001ab2:	d30a      	bcc.n	8001aca <__exponent+0x5e>
 8001ab4:	f10d 0309 	add.w	r3, sp, #9
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	42ac      	cmp	r4, r5
 8001abc:	bf88      	it	hi
 8001abe:	2300      	movhi	r3, #0
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	4403      	add	r3, r0
 8001ac4:	1a18      	subs	r0, r3, r0
 8001ac6:	b003      	add	sp, #12
 8001ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aca:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001ace:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001ad2:	e7ed      	b.n	8001ab0 <__exponent+0x44>
 8001ad4:	2330      	movs	r3, #48	@ 0x30
 8001ad6:	3130      	adds	r1, #48	@ 0x30
 8001ad8:	7083      	strb	r3, [r0, #2]
 8001ada:	70c1      	strb	r1, [r0, #3]
 8001adc:	1d03      	adds	r3, r0, #4
 8001ade:	e7f1      	b.n	8001ac4 <__exponent+0x58>

08001ae0 <_printf_float>:
 8001ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae4:	b08d      	sub	sp, #52	@ 0x34
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001aec:	4616      	mov	r6, r2
 8001aee:	461f      	mov	r7, r3
 8001af0:	4605      	mov	r5, r0
 8001af2:	f000 fcdb 	bl	80024ac <_localeconv_r>
 8001af6:	6803      	ldr	r3, [r0, #0]
 8001af8:	9304      	str	r3, [sp, #16]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fbc0 	bl	8000280 <strlen>
 8001b00:	2300      	movs	r3, #0
 8001b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8001b04:	f8d8 3000 	ldr.w	r3, [r8]
 8001b08:	9005      	str	r0, [sp, #20]
 8001b0a:	3307      	adds	r3, #7
 8001b0c:	f023 0307 	bic.w	r3, r3, #7
 8001b10:	f103 0208 	add.w	r2, r3, #8
 8001b14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001b18:	f8d4 b000 	ldr.w	fp, [r4]
 8001b1c:	f8c8 2000 	str.w	r2, [r8]
 8001b20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001b24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8001b28:	9307      	str	r3, [sp, #28]
 8001b2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8001b2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8001b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001b36:	4b9c      	ldr	r3, [pc, #624]	@ (8001da8 <_printf_float+0x2c8>)
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	f7fe fffe 	bl	8000b3c <__aeabi_dcmpun>
 8001b40:	bb70      	cbnz	r0, 8001ba0 <_printf_float+0xc0>
 8001b42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001b46:	4b98      	ldr	r3, [pc, #608]	@ (8001da8 <_printf_float+0x2c8>)
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	f7fe ffd8 	bl	8000b00 <__aeabi_dcmple>
 8001b50:	bb30      	cbnz	r0, 8001ba0 <_printf_float+0xc0>
 8001b52:	2200      	movs	r2, #0
 8001b54:	2300      	movs	r3, #0
 8001b56:	4640      	mov	r0, r8
 8001b58:	4649      	mov	r1, r9
 8001b5a:	f7fe ffc7 	bl	8000aec <__aeabi_dcmplt>
 8001b5e:	b110      	cbz	r0, 8001b66 <_printf_float+0x86>
 8001b60:	232d      	movs	r3, #45	@ 0x2d
 8001b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b66:	4a91      	ldr	r2, [pc, #580]	@ (8001dac <_printf_float+0x2cc>)
 8001b68:	4b91      	ldr	r3, [pc, #580]	@ (8001db0 <_printf_float+0x2d0>)
 8001b6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8001b6e:	bf94      	ite	ls
 8001b70:	4690      	movls	r8, r2
 8001b72:	4698      	movhi	r8, r3
 8001b74:	2303      	movs	r3, #3
 8001b76:	6123      	str	r3, [r4, #16]
 8001b78:	f02b 0304 	bic.w	r3, fp, #4
 8001b7c:	6023      	str	r3, [r4, #0]
 8001b7e:	f04f 0900 	mov.w	r9, #0
 8001b82:	9700      	str	r7, [sp, #0]
 8001b84:	4633      	mov	r3, r6
 8001b86:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001b88:	4621      	mov	r1, r4
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f000 f9d2 	bl	8001f34 <_printf_common>
 8001b90:	3001      	adds	r0, #1
 8001b92:	f040 808d 	bne.w	8001cb0 <_printf_float+0x1d0>
 8001b96:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9a:	b00d      	add	sp, #52	@ 0x34
 8001b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ba0:	4642      	mov	r2, r8
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	4649      	mov	r1, r9
 8001ba8:	f7fe ffc8 	bl	8000b3c <__aeabi_dcmpun>
 8001bac:	b140      	cbz	r0, 8001bc0 <_printf_float+0xe0>
 8001bae:	464b      	mov	r3, r9
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bfbc      	itt	lt
 8001bb4:	232d      	movlt	r3, #45	@ 0x2d
 8001bb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8001bba:	4a7e      	ldr	r2, [pc, #504]	@ (8001db4 <_printf_float+0x2d4>)
 8001bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8001db8 <_printf_float+0x2d8>)
 8001bbe:	e7d4      	b.n	8001b6a <_printf_float+0x8a>
 8001bc0:	6863      	ldr	r3, [r4, #4]
 8001bc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8001bc6:	9206      	str	r2, [sp, #24]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	d13b      	bne.n	8001c44 <_printf_float+0x164>
 8001bcc:	2306      	movs	r3, #6
 8001bce:	6063      	str	r3, [r4, #4]
 8001bd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6022      	str	r2, [r4, #0]
 8001bd8:	9303      	str	r3, [sp, #12]
 8001bda:	ab0a      	add	r3, sp, #40	@ 0x28
 8001bdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8001be0:	ab09      	add	r3, sp, #36	@ 0x24
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	6861      	ldr	r1, [r4, #4]
 8001be6:	ec49 8b10 	vmov	d0, r8, r9
 8001bea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f7ff fed7 	bl	80019a2 <__cvt>
 8001bf4:	9b06      	ldr	r3, [sp, #24]
 8001bf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001bf8:	2b47      	cmp	r3, #71	@ 0x47
 8001bfa:	4680      	mov	r8, r0
 8001bfc:	d129      	bne.n	8001c52 <_printf_float+0x172>
 8001bfe:	1cc8      	adds	r0, r1, #3
 8001c00:	db02      	blt.n	8001c08 <_printf_float+0x128>
 8001c02:	6863      	ldr	r3, [r4, #4]
 8001c04:	4299      	cmp	r1, r3
 8001c06:	dd41      	ble.n	8001c8c <_printf_float+0x1ac>
 8001c08:	f1aa 0a02 	sub.w	sl, sl, #2
 8001c0c:	fa5f fa8a 	uxtb.w	sl, sl
 8001c10:	3901      	subs	r1, #1
 8001c12:	4652      	mov	r2, sl
 8001c14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8001c18:	9109      	str	r1, [sp, #36]	@ 0x24
 8001c1a:	f7ff ff27 	bl	8001a6c <__exponent>
 8001c1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001c20:	1813      	adds	r3, r2, r0
 8001c22:	2a01      	cmp	r2, #1
 8001c24:	4681      	mov	r9, r0
 8001c26:	6123      	str	r3, [r4, #16]
 8001c28:	dc02      	bgt.n	8001c30 <_printf_float+0x150>
 8001c2a:	6822      	ldr	r2, [r4, #0]
 8001c2c:	07d2      	lsls	r2, r2, #31
 8001c2e:	d501      	bpl.n	8001c34 <_printf_float+0x154>
 8001c30:	3301      	adds	r3, #1
 8001c32:	6123      	str	r3, [r4, #16]
 8001c34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0a2      	beq.n	8001b82 <_printf_float+0xa2>
 8001c3c:	232d      	movs	r3, #45	@ 0x2d
 8001c3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c42:	e79e      	b.n	8001b82 <_printf_float+0xa2>
 8001c44:	9a06      	ldr	r2, [sp, #24]
 8001c46:	2a47      	cmp	r2, #71	@ 0x47
 8001c48:	d1c2      	bne.n	8001bd0 <_printf_float+0xf0>
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1c0      	bne.n	8001bd0 <_printf_float+0xf0>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e7bd      	b.n	8001bce <_printf_float+0xee>
 8001c52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001c56:	d9db      	bls.n	8001c10 <_printf_float+0x130>
 8001c58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8001c5c:	d118      	bne.n	8001c90 <_printf_float+0x1b0>
 8001c5e:	2900      	cmp	r1, #0
 8001c60:	6863      	ldr	r3, [r4, #4]
 8001c62:	dd0b      	ble.n	8001c7c <_printf_float+0x19c>
 8001c64:	6121      	str	r1, [r4, #16]
 8001c66:	b913      	cbnz	r3, 8001c6e <_printf_float+0x18e>
 8001c68:	6822      	ldr	r2, [r4, #0]
 8001c6a:	07d0      	lsls	r0, r2, #31
 8001c6c:	d502      	bpl.n	8001c74 <_printf_float+0x194>
 8001c6e:	3301      	adds	r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	6123      	str	r3, [r4, #16]
 8001c74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8001c76:	f04f 0900 	mov.w	r9, #0
 8001c7a:	e7db      	b.n	8001c34 <_printf_float+0x154>
 8001c7c:	b913      	cbnz	r3, 8001c84 <_printf_float+0x1a4>
 8001c7e:	6822      	ldr	r2, [r4, #0]
 8001c80:	07d2      	lsls	r2, r2, #31
 8001c82:	d501      	bpl.n	8001c88 <_printf_float+0x1a8>
 8001c84:	3302      	adds	r3, #2
 8001c86:	e7f4      	b.n	8001c72 <_printf_float+0x192>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e7f2      	b.n	8001c72 <_printf_float+0x192>
 8001c8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8001c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001c92:	4299      	cmp	r1, r3
 8001c94:	db05      	blt.n	8001ca2 <_printf_float+0x1c2>
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	6121      	str	r1, [r4, #16]
 8001c9a:	07d8      	lsls	r0, r3, #31
 8001c9c:	d5ea      	bpl.n	8001c74 <_printf_float+0x194>
 8001c9e:	1c4b      	adds	r3, r1, #1
 8001ca0:	e7e7      	b.n	8001c72 <_printf_float+0x192>
 8001ca2:	2900      	cmp	r1, #0
 8001ca4:	bfd4      	ite	le
 8001ca6:	f1c1 0202 	rsble	r2, r1, #2
 8001caa:	2201      	movgt	r2, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	e7e0      	b.n	8001c72 <_printf_float+0x192>
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	055a      	lsls	r2, r3, #21
 8001cb4:	d407      	bmi.n	8001cc6 <_printf_float+0x1e6>
 8001cb6:	6923      	ldr	r3, [r4, #16]
 8001cb8:	4642      	mov	r2, r8
 8001cba:	4631      	mov	r1, r6
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	47b8      	blx	r7
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	d12b      	bne.n	8001d1c <_printf_float+0x23c>
 8001cc4:	e767      	b.n	8001b96 <_printf_float+0xb6>
 8001cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001cca:	f240 80dd 	bls.w	8001e88 <_printf_float+0x3a8>
 8001cce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f7fe feff 	bl	8000ad8 <__aeabi_dcmpeq>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d033      	beq.n	8001d46 <_printf_float+0x266>
 8001cde:	4a37      	ldr	r2, [pc, #220]	@ (8001dbc <_printf_float+0x2dc>)
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	4631      	mov	r1, r6
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	47b8      	blx	r7
 8001ce8:	3001      	adds	r0, #1
 8001cea:	f43f af54 	beq.w	8001b96 <_printf_float+0xb6>
 8001cee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8001cf2:	4543      	cmp	r3, r8
 8001cf4:	db02      	blt.n	8001cfc <_printf_float+0x21c>
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	07d8      	lsls	r0, r3, #31
 8001cfa:	d50f      	bpl.n	8001d1c <_printf_float+0x23c>
 8001cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001d00:	4631      	mov	r1, r6
 8001d02:	4628      	mov	r0, r5
 8001d04:	47b8      	blx	r7
 8001d06:	3001      	adds	r0, #1
 8001d08:	f43f af45 	beq.w	8001b96 <_printf_float+0xb6>
 8001d0c:	f04f 0900 	mov.w	r9, #0
 8001d10:	f108 38ff 	add.w	r8, r8, #4294967295
 8001d14:	f104 0a1a 	add.w	sl, r4, #26
 8001d18:	45c8      	cmp	r8, r9
 8001d1a:	dc09      	bgt.n	8001d30 <_printf_float+0x250>
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	079b      	lsls	r3, r3, #30
 8001d20:	f100 8103 	bmi.w	8001f2a <_printf_float+0x44a>
 8001d24:	68e0      	ldr	r0, [r4, #12]
 8001d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001d28:	4298      	cmp	r0, r3
 8001d2a:	bfb8      	it	lt
 8001d2c:	4618      	movlt	r0, r3
 8001d2e:	e734      	b.n	8001b9a <_printf_float+0xba>
 8001d30:	2301      	movs	r3, #1
 8001d32:	4652      	mov	r2, sl
 8001d34:	4631      	mov	r1, r6
 8001d36:	4628      	mov	r0, r5
 8001d38:	47b8      	blx	r7
 8001d3a:	3001      	adds	r0, #1
 8001d3c:	f43f af2b 	beq.w	8001b96 <_printf_float+0xb6>
 8001d40:	f109 0901 	add.w	r9, r9, #1
 8001d44:	e7e8      	b.n	8001d18 <_printf_float+0x238>
 8001d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	dc39      	bgt.n	8001dc0 <_printf_float+0x2e0>
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dbc <_printf_float+0x2dc>)
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4631      	mov	r1, r6
 8001d52:	4628      	mov	r0, r5
 8001d54:	47b8      	blx	r7
 8001d56:	3001      	adds	r0, #1
 8001d58:	f43f af1d 	beq.w	8001b96 <_printf_float+0xb6>
 8001d5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8001d60:	ea59 0303 	orrs.w	r3, r9, r3
 8001d64:	d102      	bne.n	8001d6c <_printf_float+0x28c>
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	07d9      	lsls	r1, r3, #31
 8001d6a:	d5d7      	bpl.n	8001d1c <_printf_float+0x23c>
 8001d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001d70:	4631      	mov	r1, r6
 8001d72:	4628      	mov	r0, r5
 8001d74:	47b8      	blx	r7
 8001d76:	3001      	adds	r0, #1
 8001d78:	f43f af0d 	beq.w	8001b96 <_printf_float+0xb6>
 8001d7c:	f04f 0a00 	mov.w	sl, #0
 8001d80:	f104 0b1a 	add.w	fp, r4, #26
 8001d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d86:	425b      	negs	r3, r3
 8001d88:	4553      	cmp	r3, sl
 8001d8a:	dc01      	bgt.n	8001d90 <_printf_float+0x2b0>
 8001d8c:	464b      	mov	r3, r9
 8001d8e:	e793      	b.n	8001cb8 <_printf_float+0x1d8>
 8001d90:	2301      	movs	r3, #1
 8001d92:	465a      	mov	r2, fp
 8001d94:	4631      	mov	r1, r6
 8001d96:	4628      	mov	r0, r5
 8001d98:	47b8      	blx	r7
 8001d9a:	3001      	adds	r0, #1
 8001d9c:	f43f aefb 	beq.w	8001b96 <_printf_float+0xb6>
 8001da0:	f10a 0a01 	add.w	sl, sl, #1
 8001da4:	e7ee      	b.n	8001d84 <_printf_float+0x2a4>
 8001da6:	bf00      	nop
 8001da8:	7fefffff 	.word	0x7fefffff
 8001dac:	0800467b 	.word	0x0800467b
 8001db0:	0800467f 	.word	0x0800467f
 8001db4:	08004683 	.word	0x08004683
 8001db8:	08004687 	.word	0x08004687
 8001dbc:	0800468b 	.word	0x0800468b
 8001dc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001dc2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001dc6:	4553      	cmp	r3, sl
 8001dc8:	bfa8      	it	ge
 8001dca:	4653      	movge	r3, sl
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	4699      	mov	r9, r3
 8001dd0:	dc36      	bgt.n	8001e40 <_printf_float+0x360>
 8001dd2:	f04f 0b00 	mov.w	fp, #0
 8001dd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001dda:	f104 021a 	add.w	r2, r4, #26
 8001dde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001de0:	9306      	str	r3, [sp, #24]
 8001de2:	eba3 0309 	sub.w	r3, r3, r9
 8001de6:	455b      	cmp	r3, fp
 8001de8:	dc31      	bgt.n	8001e4e <_printf_float+0x36e>
 8001dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001dec:	459a      	cmp	sl, r3
 8001dee:	dc3a      	bgt.n	8001e66 <_printf_float+0x386>
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	07da      	lsls	r2, r3, #31
 8001df4:	d437      	bmi.n	8001e66 <_printf_float+0x386>
 8001df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001df8:	ebaa 0903 	sub.w	r9, sl, r3
 8001dfc:	9b06      	ldr	r3, [sp, #24]
 8001dfe:	ebaa 0303 	sub.w	r3, sl, r3
 8001e02:	4599      	cmp	r9, r3
 8001e04:	bfa8      	it	ge
 8001e06:	4699      	movge	r9, r3
 8001e08:	f1b9 0f00 	cmp.w	r9, #0
 8001e0c:	dc33      	bgt.n	8001e76 <_printf_float+0x396>
 8001e0e:	f04f 0800 	mov.w	r8, #0
 8001e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001e16:	f104 0b1a 	add.w	fp, r4, #26
 8001e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e1c:	ebaa 0303 	sub.w	r3, sl, r3
 8001e20:	eba3 0309 	sub.w	r3, r3, r9
 8001e24:	4543      	cmp	r3, r8
 8001e26:	f77f af79 	ble.w	8001d1c <_printf_float+0x23c>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	465a      	mov	r2, fp
 8001e2e:	4631      	mov	r1, r6
 8001e30:	4628      	mov	r0, r5
 8001e32:	47b8      	blx	r7
 8001e34:	3001      	adds	r0, #1
 8001e36:	f43f aeae 	beq.w	8001b96 <_printf_float+0xb6>
 8001e3a:	f108 0801 	add.w	r8, r8, #1
 8001e3e:	e7ec      	b.n	8001e1a <_printf_float+0x33a>
 8001e40:	4642      	mov	r2, r8
 8001e42:	4631      	mov	r1, r6
 8001e44:	4628      	mov	r0, r5
 8001e46:	47b8      	blx	r7
 8001e48:	3001      	adds	r0, #1
 8001e4a:	d1c2      	bne.n	8001dd2 <_printf_float+0x2f2>
 8001e4c:	e6a3      	b.n	8001b96 <_printf_float+0xb6>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	4631      	mov	r1, r6
 8001e52:	4628      	mov	r0, r5
 8001e54:	9206      	str	r2, [sp, #24]
 8001e56:	47b8      	blx	r7
 8001e58:	3001      	adds	r0, #1
 8001e5a:	f43f ae9c 	beq.w	8001b96 <_printf_float+0xb6>
 8001e5e:	9a06      	ldr	r2, [sp, #24]
 8001e60:	f10b 0b01 	add.w	fp, fp, #1
 8001e64:	e7bb      	b.n	8001dde <_printf_float+0x2fe>
 8001e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001e6a:	4631      	mov	r1, r6
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	47b8      	blx	r7
 8001e70:	3001      	adds	r0, #1
 8001e72:	d1c0      	bne.n	8001df6 <_printf_float+0x316>
 8001e74:	e68f      	b.n	8001b96 <_printf_float+0xb6>
 8001e76:	9a06      	ldr	r2, [sp, #24]
 8001e78:	464b      	mov	r3, r9
 8001e7a:	4442      	add	r2, r8
 8001e7c:	4631      	mov	r1, r6
 8001e7e:	4628      	mov	r0, r5
 8001e80:	47b8      	blx	r7
 8001e82:	3001      	adds	r0, #1
 8001e84:	d1c3      	bne.n	8001e0e <_printf_float+0x32e>
 8001e86:	e686      	b.n	8001b96 <_printf_float+0xb6>
 8001e88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001e8c:	f1ba 0f01 	cmp.w	sl, #1
 8001e90:	dc01      	bgt.n	8001e96 <_printf_float+0x3b6>
 8001e92:	07db      	lsls	r3, r3, #31
 8001e94:	d536      	bpl.n	8001f04 <_printf_float+0x424>
 8001e96:	2301      	movs	r3, #1
 8001e98:	4642      	mov	r2, r8
 8001e9a:	4631      	mov	r1, r6
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	47b8      	blx	r7
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	f43f ae78 	beq.w	8001b96 <_printf_float+0xb6>
 8001ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001eaa:	4631      	mov	r1, r6
 8001eac:	4628      	mov	r0, r5
 8001eae:	47b8      	blx	r7
 8001eb0:	3001      	adds	r0, #1
 8001eb2:	f43f ae70 	beq.w	8001b96 <_printf_float+0xb6>
 8001eb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001ec2:	f7fe fe09 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ec6:	b9c0      	cbnz	r0, 8001efa <_printf_float+0x41a>
 8001ec8:	4653      	mov	r3, sl
 8001eca:	f108 0201 	add.w	r2, r8, #1
 8001ece:	4631      	mov	r1, r6
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	47b8      	blx	r7
 8001ed4:	3001      	adds	r0, #1
 8001ed6:	d10c      	bne.n	8001ef2 <_printf_float+0x412>
 8001ed8:	e65d      	b.n	8001b96 <_printf_float+0xb6>
 8001eda:	2301      	movs	r3, #1
 8001edc:	465a      	mov	r2, fp
 8001ede:	4631      	mov	r1, r6
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	47b8      	blx	r7
 8001ee4:	3001      	adds	r0, #1
 8001ee6:	f43f ae56 	beq.w	8001b96 <_printf_float+0xb6>
 8001eea:	f108 0801 	add.w	r8, r8, #1
 8001eee:	45d0      	cmp	r8, sl
 8001ef0:	dbf3      	blt.n	8001eda <_printf_float+0x3fa>
 8001ef2:	464b      	mov	r3, r9
 8001ef4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8001ef8:	e6df      	b.n	8001cba <_printf_float+0x1da>
 8001efa:	f04f 0800 	mov.w	r8, #0
 8001efe:	f104 0b1a 	add.w	fp, r4, #26
 8001f02:	e7f4      	b.n	8001eee <_printf_float+0x40e>
 8001f04:	2301      	movs	r3, #1
 8001f06:	4642      	mov	r2, r8
 8001f08:	e7e1      	b.n	8001ece <_printf_float+0x3ee>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	464a      	mov	r2, r9
 8001f0e:	4631      	mov	r1, r6
 8001f10:	4628      	mov	r0, r5
 8001f12:	47b8      	blx	r7
 8001f14:	3001      	adds	r0, #1
 8001f16:	f43f ae3e 	beq.w	8001b96 <_printf_float+0xb6>
 8001f1a:	f108 0801 	add.w	r8, r8, #1
 8001f1e:	68e3      	ldr	r3, [r4, #12]
 8001f20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8001f22:	1a5b      	subs	r3, r3, r1
 8001f24:	4543      	cmp	r3, r8
 8001f26:	dcf0      	bgt.n	8001f0a <_printf_float+0x42a>
 8001f28:	e6fc      	b.n	8001d24 <_printf_float+0x244>
 8001f2a:	f04f 0800 	mov.w	r8, #0
 8001f2e:	f104 0919 	add.w	r9, r4, #25
 8001f32:	e7f4      	b.n	8001f1e <_printf_float+0x43e>

08001f34 <_printf_common>:
 8001f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f38:	4616      	mov	r6, r2
 8001f3a:	4698      	mov	r8, r3
 8001f3c:	688a      	ldr	r2, [r1, #8]
 8001f3e:	690b      	ldr	r3, [r1, #16]
 8001f40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f44:	4293      	cmp	r3, r2
 8001f46:	bfb8      	it	lt
 8001f48:	4613      	movlt	r3, r2
 8001f4a:	6033      	str	r3, [r6, #0]
 8001f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f50:	4607      	mov	r7, r0
 8001f52:	460c      	mov	r4, r1
 8001f54:	b10a      	cbz	r2, 8001f5a <_printf_common+0x26>
 8001f56:	3301      	adds	r3, #1
 8001f58:	6033      	str	r3, [r6, #0]
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	0699      	lsls	r1, r3, #26
 8001f5e:	bf42      	ittt	mi
 8001f60:	6833      	ldrmi	r3, [r6, #0]
 8001f62:	3302      	addmi	r3, #2
 8001f64:	6033      	strmi	r3, [r6, #0]
 8001f66:	6825      	ldr	r5, [r4, #0]
 8001f68:	f015 0506 	ands.w	r5, r5, #6
 8001f6c:	d106      	bne.n	8001f7c <_printf_common+0x48>
 8001f6e:	f104 0a19 	add.w	sl, r4, #25
 8001f72:	68e3      	ldr	r3, [r4, #12]
 8001f74:	6832      	ldr	r2, [r6, #0]
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	42ab      	cmp	r3, r5
 8001f7a:	dc26      	bgt.n	8001fca <_printf_common+0x96>
 8001f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	3b00      	subs	r3, #0
 8001f84:	bf18      	it	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	0692      	lsls	r2, r2, #26
 8001f8a:	d42b      	bmi.n	8001fe4 <_printf_common+0xb0>
 8001f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f90:	4641      	mov	r1, r8
 8001f92:	4638      	mov	r0, r7
 8001f94:	47c8      	blx	r9
 8001f96:	3001      	adds	r0, #1
 8001f98:	d01e      	beq.n	8001fd8 <_printf_common+0xa4>
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	6922      	ldr	r2, [r4, #16]
 8001f9e:	f003 0306 	and.w	r3, r3, #6
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf02      	ittt	eq
 8001fa6:	68e5      	ldreq	r5, [r4, #12]
 8001fa8:	6833      	ldreq	r3, [r6, #0]
 8001faa:	1aed      	subeq	r5, r5, r3
 8001fac:	68a3      	ldr	r3, [r4, #8]
 8001fae:	bf0c      	ite	eq
 8001fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fb4:	2500      	movne	r5, #0
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	bfc4      	itt	gt
 8001fba:	1a9b      	subgt	r3, r3, r2
 8001fbc:	18ed      	addgt	r5, r5, r3
 8001fbe:	2600      	movs	r6, #0
 8001fc0:	341a      	adds	r4, #26
 8001fc2:	42b5      	cmp	r5, r6
 8001fc4:	d11a      	bne.n	8001ffc <_printf_common+0xc8>
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	e008      	b.n	8001fdc <_printf_common+0xa8>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	4652      	mov	r2, sl
 8001fce:	4641      	mov	r1, r8
 8001fd0:	4638      	mov	r0, r7
 8001fd2:	47c8      	blx	r9
 8001fd4:	3001      	adds	r0, #1
 8001fd6:	d103      	bne.n	8001fe0 <_printf_common+0xac>
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe0:	3501      	adds	r5, #1
 8001fe2:	e7c6      	b.n	8001f72 <_printf_common+0x3e>
 8001fe4:	18e1      	adds	r1, r4, r3
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	2030      	movs	r0, #48	@ 0x30
 8001fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001fee:	4422      	add	r2, r4
 8001ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001ff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	e7c7      	b.n	8001f8c <_printf_common+0x58>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	4622      	mov	r2, r4
 8002000:	4641      	mov	r1, r8
 8002002:	4638      	mov	r0, r7
 8002004:	47c8      	blx	r9
 8002006:	3001      	adds	r0, #1
 8002008:	d0e6      	beq.n	8001fd8 <_printf_common+0xa4>
 800200a:	3601      	adds	r6, #1
 800200c:	e7d9      	b.n	8001fc2 <_printf_common+0x8e>
	...

08002010 <_printf_i>:
 8002010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002014:	7e0f      	ldrb	r7, [r1, #24]
 8002016:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002018:	2f78      	cmp	r7, #120	@ 0x78
 800201a:	4691      	mov	r9, r2
 800201c:	4680      	mov	r8, r0
 800201e:	460c      	mov	r4, r1
 8002020:	469a      	mov	sl, r3
 8002022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002026:	d807      	bhi.n	8002038 <_printf_i+0x28>
 8002028:	2f62      	cmp	r7, #98	@ 0x62
 800202a:	d80a      	bhi.n	8002042 <_printf_i+0x32>
 800202c:	2f00      	cmp	r7, #0
 800202e:	f000 80d2 	beq.w	80021d6 <_printf_i+0x1c6>
 8002032:	2f58      	cmp	r7, #88	@ 0x58
 8002034:	f000 80b9 	beq.w	80021aa <_printf_i+0x19a>
 8002038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800203c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002040:	e03a      	b.n	80020b8 <_printf_i+0xa8>
 8002042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002046:	2b15      	cmp	r3, #21
 8002048:	d8f6      	bhi.n	8002038 <_printf_i+0x28>
 800204a:	a101      	add	r1, pc, #4	@ (adr r1, 8002050 <_printf_i+0x40>)
 800204c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002050:	080020a9 	.word	0x080020a9
 8002054:	080020bd 	.word	0x080020bd
 8002058:	08002039 	.word	0x08002039
 800205c:	08002039 	.word	0x08002039
 8002060:	08002039 	.word	0x08002039
 8002064:	08002039 	.word	0x08002039
 8002068:	080020bd 	.word	0x080020bd
 800206c:	08002039 	.word	0x08002039
 8002070:	08002039 	.word	0x08002039
 8002074:	08002039 	.word	0x08002039
 8002078:	08002039 	.word	0x08002039
 800207c:	080021bd 	.word	0x080021bd
 8002080:	080020e7 	.word	0x080020e7
 8002084:	08002177 	.word	0x08002177
 8002088:	08002039 	.word	0x08002039
 800208c:	08002039 	.word	0x08002039
 8002090:	080021df 	.word	0x080021df
 8002094:	08002039 	.word	0x08002039
 8002098:	080020e7 	.word	0x080020e7
 800209c:	08002039 	.word	0x08002039
 80020a0:	08002039 	.word	0x08002039
 80020a4:	0800217f 	.word	0x0800217f
 80020a8:	6833      	ldr	r3, [r6, #0]
 80020aa:	1d1a      	adds	r2, r3, #4
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6032      	str	r2, [r6, #0]
 80020b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020b8:	2301      	movs	r3, #1
 80020ba:	e09d      	b.n	80021f8 <_printf_i+0x1e8>
 80020bc:	6833      	ldr	r3, [r6, #0]
 80020be:	6820      	ldr	r0, [r4, #0]
 80020c0:	1d19      	adds	r1, r3, #4
 80020c2:	6031      	str	r1, [r6, #0]
 80020c4:	0606      	lsls	r6, r0, #24
 80020c6:	d501      	bpl.n	80020cc <_printf_i+0xbc>
 80020c8:	681d      	ldr	r5, [r3, #0]
 80020ca:	e003      	b.n	80020d4 <_printf_i+0xc4>
 80020cc:	0645      	lsls	r5, r0, #25
 80020ce:	d5fb      	bpl.n	80020c8 <_printf_i+0xb8>
 80020d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80020d4:	2d00      	cmp	r5, #0
 80020d6:	da03      	bge.n	80020e0 <_printf_i+0xd0>
 80020d8:	232d      	movs	r3, #45	@ 0x2d
 80020da:	426d      	negs	r5, r5
 80020dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020e0:	4859      	ldr	r0, [pc, #356]	@ (8002248 <_printf_i+0x238>)
 80020e2:	230a      	movs	r3, #10
 80020e4:	e011      	b.n	800210a <_printf_i+0xfa>
 80020e6:	6821      	ldr	r1, [r4, #0]
 80020e8:	6833      	ldr	r3, [r6, #0]
 80020ea:	0608      	lsls	r0, r1, #24
 80020ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80020f0:	d402      	bmi.n	80020f8 <_printf_i+0xe8>
 80020f2:	0649      	lsls	r1, r1, #25
 80020f4:	bf48      	it	mi
 80020f6:	b2ad      	uxthmi	r5, r5
 80020f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80020fa:	4853      	ldr	r0, [pc, #332]	@ (8002248 <_printf_i+0x238>)
 80020fc:	6033      	str	r3, [r6, #0]
 80020fe:	bf14      	ite	ne
 8002100:	230a      	movne	r3, #10
 8002102:	2308      	moveq	r3, #8
 8002104:	2100      	movs	r1, #0
 8002106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800210a:	6866      	ldr	r6, [r4, #4]
 800210c:	60a6      	str	r6, [r4, #8]
 800210e:	2e00      	cmp	r6, #0
 8002110:	bfa2      	ittt	ge
 8002112:	6821      	ldrge	r1, [r4, #0]
 8002114:	f021 0104 	bicge.w	r1, r1, #4
 8002118:	6021      	strge	r1, [r4, #0]
 800211a:	b90d      	cbnz	r5, 8002120 <_printf_i+0x110>
 800211c:	2e00      	cmp	r6, #0
 800211e:	d04b      	beq.n	80021b8 <_printf_i+0x1a8>
 8002120:	4616      	mov	r6, r2
 8002122:	fbb5 f1f3 	udiv	r1, r5, r3
 8002126:	fb03 5711 	mls	r7, r3, r1, r5
 800212a:	5dc7      	ldrb	r7, [r0, r7]
 800212c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002130:	462f      	mov	r7, r5
 8002132:	42bb      	cmp	r3, r7
 8002134:	460d      	mov	r5, r1
 8002136:	d9f4      	bls.n	8002122 <_printf_i+0x112>
 8002138:	2b08      	cmp	r3, #8
 800213a:	d10b      	bne.n	8002154 <_printf_i+0x144>
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	07df      	lsls	r7, r3, #31
 8002140:	d508      	bpl.n	8002154 <_printf_i+0x144>
 8002142:	6923      	ldr	r3, [r4, #16]
 8002144:	6861      	ldr	r1, [r4, #4]
 8002146:	4299      	cmp	r1, r3
 8002148:	bfde      	ittt	le
 800214a:	2330      	movle	r3, #48	@ 0x30
 800214c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002150:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002154:	1b92      	subs	r2, r2, r6
 8002156:	6122      	str	r2, [r4, #16]
 8002158:	f8cd a000 	str.w	sl, [sp]
 800215c:	464b      	mov	r3, r9
 800215e:	aa03      	add	r2, sp, #12
 8002160:	4621      	mov	r1, r4
 8002162:	4640      	mov	r0, r8
 8002164:	f7ff fee6 	bl	8001f34 <_printf_common>
 8002168:	3001      	adds	r0, #1
 800216a:	d14a      	bne.n	8002202 <_printf_i+0x1f2>
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	b004      	add	sp, #16
 8002172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	4833      	ldr	r0, [pc, #204]	@ (800224c <_printf_i+0x23c>)
 8002180:	2778      	movs	r7, #120	@ 0x78
 8002182:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	6831      	ldr	r1, [r6, #0]
 800218a:	061f      	lsls	r7, r3, #24
 800218c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002190:	d402      	bmi.n	8002198 <_printf_i+0x188>
 8002192:	065f      	lsls	r7, r3, #25
 8002194:	bf48      	it	mi
 8002196:	b2ad      	uxthmi	r5, r5
 8002198:	6031      	str	r1, [r6, #0]
 800219a:	07d9      	lsls	r1, r3, #31
 800219c:	bf44      	itt	mi
 800219e:	f043 0320 	orrmi.w	r3, r3, #32
 80021a2:	6023      	strmi	r3, [r4, #0]
 80021a4:	b11d      	cbz	r5, 80021ae <_printf_i+0x19e>
 80021a6:	2310      	movs	r3, #16
 80021a8:	e7ac      	b.n	8002104 <_printf_i+0xf4>
 80021aa:	4827      	ldr	r0, [pc, #156]	@ (8002248 <_printf_i+0x238>)
 80021ac:	e7e9      	b.n	8002182 <_printf_i+0x172>
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	f023 0320 	bic.w	r3, r3, #32
 80021b4:	6023      	str	r3, [r4, #0]
 80021b6:	e7f6      	b.n	80021a6 <_printf_i+0x196>
 80021b8:	4616      	mov	r6, r2
 80021ba:	e7bd      	b.n	8002138 <_printf_i+0x128>
 80021bc:	6833      	ldr	r3, [r6, #0]
 80021be:	6825      	ldr	r5, [r4, #0]
 80021c0:	6961      	ldr	r1, [r4, #20]
 80021c2:	1d18      	adds	r0, r3, #4
 80021c4:	6030      	str	r0, [r6, #0]
 80021c6:	062e      	lsls	r6, r5, #24
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	d501      	bpl.n	80021d0 <_printf_i+0x1c0>
 80021cc:	6019      	str	r1, [r3, #0]
 80021ce:	e002      	b.n	80021d6 <_printf_i+0x1c6>
 80021d0:	0668      	lsls	r0, r5, #25
 80021d2:	d5fb      	bpl.n	80021cc <_printf_i+0x1bc>
 80021d4:	8019      	strh	r1, [r3, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	6123      	str	r3, [r4, #16]
 80021da:	4616      	mov	r6, r2
 80021dc:	e7bc      	b.n	8002158 <_printf_i+0x148>
 80021de:	6833      	ldr	r3, [r6, #0]
 80021e0:	1d1a      	adds	r2, r3, #4
 80021e2:	6032      	str	r2, [r6, #0]
 80021e4:	681e      	ldr	r6, [r3, #0]
 80021e6:	6862      	ldr	r2, [r4, #4]
 80021e8:	2100      	movs	r1, #0
 80021ea:	4630      	mov	r0, r6
 80021ec:	f7fd fff8 	bl	80001e0 <memchr>
 80021f0:	b108      	cbz	r0, 80021f6 <_printf_i+0x1e6>
 80021f2:	1b80      	subs	r0, r0, r6
 80021f4:	6060      	str	r0, [r4, #4]
 80021f6:	6863      	ldr	r3, [r4, #4]
 80021f8:	6123      	str	r3, [r4, #16]
 80021fa:	2300      	movs	r3, #0
 80021fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002200:	e7aa      	b.n	8002158 <_printf_i+0x148>
 8002202:	6923      	ldr	r3, [r4, #16]
 8002204:	4632      	mov	r2, r6
 8002206:	4649      	mov	r1, r9
 8002208:	4640      	mov	r0, r8
 800220a:	47d0      	blx	sl
 800220c:	3001      	adds	r0, #1
 800220e:	d0ad      	beq.n	800216c <_printf_i+0x15c>
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	079b      	lsls	r3, r3, #30
 8002214:	d413      	bmi.n	800223e <_printf_i+0x22e>
 8002216:	68e0      	ldr	r0, [r4, #12]
 8002218:	9b03      	ldr	r3, [sp, #12]
 800221a:	4298      	cmp	r0, r3
 800221c:	bfb8      	it	lt
 800221e:	4618      	movlt	r0, r3
 8002220:	e7a6      	b.n	8002170 <_printf_i+0x160>
 8002222:	2301      	movs	r3, #1
 8002224:	4632      	mov	r2, r6
 8002226:	4649      	mov	r1, r9
 8002228:	4640      	mov	r0, r8
 800222a:	47d0      	blx	sl
 800222c:	3001      	adds	r0, #1
 800222e:	d09d      	beq.n	800216c <_printf_i+0x15c>
 8002230:	3501      	adds	r5, #1
 8002232:	68e3      	ldr	r3, [r4, #12]
 8002234:	9903      	ldr	r1, [sp, #12]
 8002236:	1a5b      	subs	r3, r3, r1
 8002238:	42ab      	cmp	r3, r5
 800223a:	dcf2      	bgt.n	8002222 <_printf_i+0x212>
 800223c:	e7eb      	b.n	8002216 <_printf_i+0x206>
 800223e:	2500      	movs	r5, #0
 8002240:	f104 0619 	add.w	r6, r4, #25
 8002244:	e7f5      	b.n	8002232 <_printf_i+0x222>
 8002246:	bf00      	nop
 8002248:	0800468d 	.word	0x0800468d
 800224c:	0800469e 	.word	0x0800469e

08002250 <std>:
 8002250:	2300      	movs	r3, #0
 8002252:	b510      	push	{r4, lr}
 8002254:	4604      	mov	r4, r0
 8002256:	e9c0 3300 	strd	r3, r3, [r0]
 800225a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800225e:	6083      	str	r3, [r0, #8]
 8002260:	8181      	strh	r1, [r0, #12]
 8002262:	6643      	str	r3, [r0, #100]	@ 0x64
 8002264:	81c2      	strh	r2, [r0, #14]
 8002266:	6183      	str	r3, [r0, #24]
 8002268:	4619      	mov	r1, r3
 800226a:	2208      	movs	r2, #8
 800226c:	305c      	adds	r0, #92	@ 0x5c
 800226e:	f000 f915 	bl	800249c <memset>
 8002272:	4b0d      	ldr	r3, [pc, #52]	@ (80022a8 <std+0x58>)
 8002274:	6263      	str	r3, [r4, #36]	@ 0x24
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <std+0x5c>)
 8002278:	62a3      	str	r3, [r4, #40]	@ 0x28
 800227a:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <std+0x60>)
 800227c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <std+0x64>)
 8002280:	6323      	str	r3, [r4, #48]	@ 0x30
 8002282:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <std+0x68>)
 8002284:	6224      	str	r4, [r4, #32]
 8002286:	429c      	cmp	r4, r3
 8002288:	d006      	beq.n	8002298 <std+0x48>
 800228a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800228e:	4294      	cmp	r4, r2
 8002290:	d002      	beq.n	8002298 <std+0x48>
 8002292:	33d0      	adds	r3, #208	@ 0xd0
 8002294:	429c      	cmp	r4, r3
 8002296:	d105      	bne.n	80022a4 <std+0x54>
 8002298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800229c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022a0:	f000 b978 	b.w	8002594 <__retarget_lock_init_recursive>
 80022a4:	bd10      	pop	{r4, pc}
 80022a6:	bf00      	nop
 80022a8:	080023d5 	.word	0x080023d5
 80022ac:	080023f7 	.word	0x080023f7
 80022b0:	0800242f 	.word	0x0800242f
 80022b4:	08002453 	.word	0x08002453
 80022b8:	20000204 	.word	0x20000204

080022bc <stdio_exit_handler>:
 80022bc:	4a02      	ldr	r2, [pc, #8]	@ (80022c8 <stdio_exit_handler+0xc>)
 80022be:	4903      	ldr	r1, [pc, #12]	@ (80022cc <stdio_exit_handler+0x10>)
 80022c0:	4803      	ldr	r0, [pc, #12]	@ (80022d0 <stdio_exit_handler+0x14>)
 80022c2:	f000 b869 	b.w	8002398 <_fwalk_sglue>
 80022c6:	bf00      	nop
 80022c8:	20000000 	.word	0x20000000
 80022cc:	08003ef5 	.word	0x08003ef5
 80022d0:	20000010 	.word	0x20000010

080022d4 <cleanup_stdio>:
 80022d4:	6841      	ldr	r1, [r0, #4]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <cleanup_stdio+0x34>)
 80022d8:	4299      	cmp	r1, r3
 80022da:	b510      	push	{r4, lr}
 80022dc:	4604      	mov	r4, r0
 80022de:	d001      	beq.n	80022e4 <cleanup_stdio+0x10>
 80022e0:	f001 fe08 	bl	8003ef4 <_fflush_r>
 80022e4:	68a1      	ldr	r1, [r4, #8]
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <cleanup_stdio+0x38>)
 80022e8:	4299      	cmp	r1, r3
 80022ea:	d002      	beq.n	80022f2 <cleanup_stdio+0x1e>
 80022ec:	4620      	mov	r0, r4
 80022ee:	f001 fe01 	bl	8003ef4 <_fflush_r>
 80022f2:	68e1      	ldr	r1, [r4, #12]
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <cleanup_stdio+0x3c>)
 80022f6:	4299      	cmp	r1, r3
 80022f8:	d004      	beq.n	8002304 <cleanup_stdio+0x30>
 80022fa:	4620      	mov	r0, r4
 80022fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002300:	f001 bdf8 	b.w	8003ef4 <_fflush_r>
 8002304:	bd10      	pop	{r4, pc}
 8002306:	bf00      	nop
 8002308:	20000204 	.word	0x20000204
 800230c:	2000026c 	.word	0x2000026c
 8002310:	200002d4 	.word	0x200002d4

08002314 <global_stdio_init.part.0>:
 8002314:	b510      	push	{r4, lr}
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <global_stdio_init.part.0+0x30>)
 8002318:	4c0b      	ldr	r4, [pc, #44]	@ (8002348 <global_stdio_init.part.0+0x34>)
 800231a:	4a0c      	ldr	r2, [pc, #48]	@ (800234c <global_stdio_init.part.0+0x38>)
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	4620      	mov	r0, r4
 8002320:	2200      	movs	r2, #0
 8002322:	2104      	movs	r1, #4
 8002324:	f7ff ff94 	bl	8002250 <std>
 8002328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800232c:	2201      	movs	r2, #1
 800232e:	2109      	movs	r1, #9
 8002330:	f7ff ff8e 	bl	8002250 <std>
 8002334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002338:	2202      	movs	r2, #2
 800233a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800233e:	2112      	movs	r1, #18
 8002340:	f7ff bf86 	b.w	8002250 <std>
 8002344:	2000033c 	.word	0x2000033c
 8002348:	20000204 	.word	0x20000204
 800234c:	080022bd 	.word	0x080022bd

08002350 <__sfp_lock_acquire>:
 8002350:	4801      	ldr	r0, [pc, #4]	@ (8002358 <__sfp_lock_acquire+0x8>)
 8002352:	f000 b920 	b.w	8002596 <__retarget_lock_acquire_recursive>
 8002356:	bf00      	nop
 8002358:	20000345 	.word	0x20000345

0800235c <__sfp_lock_release>:
 800235c:	4801      	ldr	r0, [pc, #4]	@ (8002364 <__sfp_lock_release+0x8>)
 800235e:	f000 b91b 	b.w	8002598 <__retarget_lock_release_recursive>
 8002362:	bf00      	nop
 8002364:	20000345 	.word	0x20000345

08002368 <__sinit>:
 8002368:	b510      	push	{r4, lr}
 800236a:	4604      	mov	r4, r0
 800236c:	f7ff fff0 	bl	8002350 <__sfp_lock_acquire>
 8002370:	6a23      	ldr	r3, [r4, #32]
 8002372:	b11b      	cbz	r3, 800237c <__sinit+0x14>
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002378:	f7ff bff0 	b.w	800235c <__sfp_lock_release>
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__sinit+0x28>)
 800237e:	6223      	str	r3, [r4, #32]
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <__sinit+0x2c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f5      	bne.n	8002374 <__sinit+0xc>
 8002388:	f7ff ffc4 	bl	8002314 <global_stdio_init.part.0>
 800238c:	e7f2      	b.n	8002374 <__sinit+0xc>
 800238e:	bf00      	nop
 8002390:	080022d5 	.word	0x080022d5
 8002394:	2000033c 	.word	0x2000033c

08002398 <_fwalk_sglue>:
 8002398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800239c:	4607      	mov	r7, r0
 800239e:	4688      	mov	r8, r1
 80023a0:	4614      	mov	r4, r2
 80023a2:	2600      	movs	r6, #0
 80023a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023a8:	f1b9 0901 	subs.w	r9, r9, #1
 80023ac:	d505      	bpl.n	80023ba <_fwalk_sglue+0x22>
 80023ae:	6824      	ldr	r4, [r4, #0]
 80023b0:	2c00      	cmp	r4, #0
 80023b2:	d1f7      	bne.n	80023a4 <_fwalk_sglue+0xc>
 80023b4:	4630      	mov	r0, r6
 80023b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ba:	89ab      	ldrh	r3, [r5, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d907      	bls.n	80023d0 <_fwalk_sglue+0x38>
 80023c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023c4:	3301      	adds	r3, #1
 80023c6:	d003      	beq.n	80023d0 <_fwalk_sglue+0x38>
 80023c8:	4629      	mov	r1, r5
 80023ca:	4638      	mov	r0, r7
 80023cc:	47c0      	blx	r8
 80023ce:	4306      	orrs	r6, r0
 80023d0:	3568      	adds	r5, #104	@ 0x68
 80023d2:	e7e9      	b.n	80023a8 <_fwalk_sglue+0x10>

080023d4 <__sread>:
 80023d4:	b510      	push	{r4, lr}
 80023d6:	460c      	mov	r4, r1
 80023d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023dc:	f000 f88c 	bl	80024f8 <_read_r>
 80023e0:	2800      	cmp	r0, #0
 80023e2:	bfab      	itete	ge
 80023e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80023e6:	89a3      	ldrhlt	r3, [r4, #12]
 80023e8:	181b      	addge	r3, r3, r0
 80023ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80023ee:	bfac      	ite	ge
 80023f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80023f2:	81a3      	strhlt	r3, [r4, #12]
 80023f4:	bd10      	pop	{r4, pc}

080023f6 <__swrite>:
 80023f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023fa:	461f      	mov	r7, r3
 80023fc:	898b      	ldrh	r3, [r1, #12]
 80023fe:	05db      	lsls	r3, r3, #23
 8002400:	4605      	mov	r5, r0
 8002402:	460c      	mov	r4, r1
 8002404:	4616      	mov	r6, r2
 8002406:	d505      	bpl.n	8002414 <__swrite+0x1e>
 8002408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800240c:	2302      	movs	r3, #2
 800240e:	2200      	movs	r2, #0
 8002410:	f000 f860 	bl	80024d4 <_lseek_r>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800241a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800241e:	81a3      	strh	r3, [r4, #12]
 8002420:	4632      	mov	r2, r6
 8002422:	463b      	mov	r3, r7
 8002424:	4628      	mov	r0, r5
 8002426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800242a:	f000 b877 	b.w	800251c <_write_r>

0800242e <__sseek>:
 800242e:	b510      	push	{r4, lr}
 8002430:	460c      	mov	r4, r1
 8002432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002436:	f000 f84d 	bl	80024d4 <_lseek_r>
 800243a:	1c43      	adds	r3, r0, #1
 800243c:	89a3      	ldrh	r3, [r4, #12]
 800243e:	bf15      	itete	ne
 8002440:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002442:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002446:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800244a:	81a3      	strheq	r3, [r4, #12]
 800244c:	bf18      	it	ne
 800244e:	81a3      	strhne	r3, [r4, #12]
 8002450:	bd10      	pop	{r4, pc}

08002452 <__sclose>:
 8002452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002456:	f000 b82d 	b.w	80024b4 <_close_r>
	...

0800245c <_vsiprintf_r>:
 800245c:	b500      	push	{lr}
 800245e:	b09b      	sub	sp, #108	@ 0x6c
 8002460:	9100      	str	r1, [sp, #0]
 8002462:	9104      	str	r1, [sp, #16]
 8002464:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002468:	9105      	str	r1, [sp, #20]
 800246a:	9102      	str	r1, [sp, #8]
 800246c:	4905      	ldr	r1, [pc, #20]	@ (8002484 <_vsiprintf_r+0x28>)
 800246e:	9103      	str	r1, [sp, #12]
 8002470:	4669      	mov	r1, sp
 8002472:	f001 fbbf 	bl	8003bf4 <_svfiprintf_r>
 8002476:	9b00      	ldr	r3, [sp, #0]
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	b01b      	add	sp, #108	@ 0x6c
 800247e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002482:	bf00      	nop
 8002484:	ffff0208 	.word	0xffff0208

08002488 <vsiprintf>:
 8002488:	4613      	mov	r3, r2
 800248a:	460a      	mov	r2, r1
 800248c:	4601      	mov	r1, r0
 800248e:	4802      	ldr	r0, [pc, #8]	@ (8002498 <vsiprintf+0x10>)
 8002490:	6800      	ldr	r0, [r0, #0]
 8002492:	f7ff bfe3 	b.w	800245c <_vsiprintf_r>
 8002496:	bf00      	nop
 8002498:	2000000c 	.word	0x2000000c

0800249c <memset>:
 800249c:	4402      	add	r2, r0
 800249e:	4603      	mov	r3, r0
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d100      	bne.n	80024a6 <memset+0xa>
 80024a4:	4770      	bx	lr
 80024a6:	f803 1b01 	strb.w	r1, [r3], #1
 80024aa:	e7f9      	b.n	80024a0 <memset+0x4>

080024ac <_localeconv_r>:
 80024ac:	4800      	ldr	r0, [pc, #0]	@ (80024b0 <_localeconv_r+0x4>)
 80024ae:	4770      	bx	lr
 80024b0:	2000014c 	.word	0x2000014c

080024b4 <_close_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	4d06      	ldr	r5, [pc, #24]	@ (80024d0 <_close_r+0x1c>)
 80024b8:	2300      	movs	r3, #0
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	602b      	str	r3, [r5, #0]
 80024c0:	f7fe fef2 	bl	80012a8 <_close>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d102      	bne.n	80024ce <_close_r+0x1a>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b103      	cbz	r3, 80024ce <_close_r+0x1a>
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	20000340 	.word	0x20000340

080024d4 <_lseek_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	4d07      	ldr	r5, [pc, #28]	@ (80024f4 <_lseek_r+0x20>)
 80024d8:	4604      	mov	r4, r0
 80024da:	4608      	mov	r0, r1
 80024dc:	4611      	mov	r1, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	602a      	str	r2, [r5, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f7fe ff07 	bl	80012f6 <_lseek>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d102      	bne.n	80024f2 <_lseek_r+0x1e>
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	b103      	cbz	r3, 80024f2 <_lseek_r+0x1e>
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	bd38      	pop	{r3, r4, r5, pc}
 80024f4:	20000340 	.word	0x20000340

080024f8 <_read_r>:
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	4d07      	ldr	r5, [pc, #28]	@ (8002518 <_read_r+0x20>)
 80024fc:	4604      	mov	r4, r0
 80024fe:	4608      	mov	r0, r1
 8002500:	4611      	mov	r1, r2
 8002502:	2200      	movs	r2, #0
 8002504:	602a      	str	r2, [r5, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	f7fe fe95 	bl	8001236 <_read>
 800250c:	1c43      	adds	r3, r0, #1
 800250e:	d102      	bne.n	8002516 <_read_r+0x1e>
 8002510:	682b      	ldr	r3, [r5, #0]
 8002512:	b103      	cbz	r3, 8002516 <_read_r+0x1e>
 8002514:	6023      	str	r3, [r4, #0]
 8002516:	bd38      	pop	{r3, r4, r5, pc}
 8002518:	20000340 	.word	0x20000340

0800251c <_write_r>:
 800251c:	b538      	push	{r3, r4, r5, lr}
 800251e:	4d07      	ldr	r5, [pc, #28]	@ (800253c <_write_r+0x20>)
 8002520:	4604      	mov	r4, r0
 8002522:	4608      	mov	r0, r1
 8002524:	4611      	mov	r1, r2
 8002526:	2200      	movs	r2, #0
 8002528:	602a      	str	r2, [r5, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	f7fe fea0 	bl	8001270 <_write>
 8002530:	1c43      	adds	r3, r0, #1
 8002532:	d102      	bne.n	800253a <_write_r+0x1e>
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	b103      	cbz	r3, 800253a <_write_r+0x1e>
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	bd38      	pop	{r3, r4, r5, pc}
 800253c:	20000340 	.word	0x20000340

08002540 <__errno>:
 8002540:	4b01      	ldr	r3, [pc, #4]	@ (8002548 <__errno+0x8>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000000c 	.word	0x2000000c

0800254c <__libc_init_array>:
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	4d0d      	ldr	r5, [pc, #52]	@ (8002584 <__libc_init_array+0x38>)
 8002550:	4c0d      	ldr	r4, [pc, #52]	@ (8002588 <__libc_init_array+0x3c>)
 8002552:	1b64      	subs	r4, r4, r5
 8002554:	10a4      	asrs	r4, r4, #2
 8002556:	2600      	movs	r6, #0
 8002558:	42a6      	cmp	r6, r4
 800255a:	d109      	bne.n	8002570 <__libc_init_array+0x24>
 800255c:	4d0b      	ldr	r5, [pc, #44]	@ (800258c <__libc_init_array+0x40>)
 800255e:	4c0c      	ldr	r4, [pc, #48]	@ (8002590 <__libc_init_array+0x44>)
 8002560:	f002 f866 	bl	8004630 <_init>
 8002564:	1b64      	subs	r4, r4, r5
 8002566:	10a4      	asrs	r4, r4, #2
 8002568:	2600      	movs	r6, #0
 800256a:	42a6      	cmp	r6, r4
 800256c:	d105      	bne.n	800257a <__libc_init_array+0x2e>
 800256e:	bd70      	pop	{r4, r5, r6, pc}
 8002570:	f855 3b04 	ldr.w	r3, [r5], #4
 8002574:	4798      	blx	r3
 8002576:	3601      	adds	r6, #1
 8002578:	e7ee      	b.n	8002558 <__libc_init_array+0xc>
 800257a:	f855 3b04 	ldr.w	r3, [r5], #4
 800257e:	4798      	blx	r3
 8002580:	3601      	adds	r6, #1
 8002582:	e7f2      	b.n	800256a <__libc_init_array+0x1e>
 8002584:	080049f8 	.word	0x080049f8
 8002588:	080049f8 	.word	0x080049f8
 800258c:	080049f8 	.word	0x080049f8
 8002590:	080049fc 	.word	0x080049fc

08002594 <__retarget_lock_init_recursive>:
 8002594:	4770      	bx	lr

08002596 <__retarget_lock_acquire_recursive>:
 8002596:	4770      	bx	lr

08002598 <__retarget_lock_release_recursive>:
 8002598:	4770      	bx	lr

0800259a <quorem>:
 800259a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800259e:	6903      	ldr	r3, [r0, #16]
 80025a0:	690c      	ldr	r4, [r1, #16]
 80025a2:	42a3      	cmp	r3, r4
 80025a4:	4607      	mov	r7, r0
 80025a6:	db7e      	blt.n	80026a6 <quorem+0x10c>
 80025a8:	3c01      	subs	r4, #1
 80025aa:	f101 0814 	add.w	r8, r1, #20
 80025ae:	00a3      	lsls	r3, r4, #2
 80025b0:	f100 0514 	add.w	r5, r0, #20
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80025c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80025c4:	3301      	adds	r3, #1
 80025c6:	429a      	cmp	r2, r3
 80025c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80025cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80025d0:	d32e      	bcc.n	8002630 <quorem+0x96>
 80025d2:	f04f 0a00 	mov.w	sl, #0
 80025d6:	46c4      	mov	ip, r8
 80025d8:	46ae      	mov	lr, r5
 80025da:	46d3      	mov	fp, sl
 80025dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80025e0:	b298      	uxth	r0, r3
 80025e2:	fb06 a000 	mla	r0, r6, r0, sl
 80025e6:	0c02      	lsrs	r2, r0, #16
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	fb06 2303 	mla	r3, r6, r3, r2
 80025ee:	f8de 2000 	ldr.w	r2, [lr]
 80025f2:	b280      	uxth	r0, r0
 80025f4:	b292      	uxth	r2, r2
 80025f6:	1a12      	subs	r2, r2, r0
 80025f8:	445a      	add	r2, fp
 80025fa:	f8de 0000 	ldr.w	r0, [lr]
 80025fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002602:	b29b      	uxth	r3, r3
 8002604:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002608:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800260c:	b292      	uxth	r2, r2
 800260e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002612:	45e1      	cmp	r9, ip
 8002614:	f84e 2b04 	str.w	r2, [lr], #4
 8002618:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800261c:	d2de      	bcs.n	80025dc <quorem+0x42>
 800261e:	9b00      	ldr	r3, [sp, #0]
 8002620:	58eb      	ldr	r3, [r5, r3]
 8002622:	b92b      	cbnz	r3, 8002630 <quorem+0x96>
 8002624:	9b01      	ldr	r3, [sp, #4]
 8002626:	3b04      	subs	r3, #4
 8002628:	429d      	cmp	r5, r3
 800262a:	461a      	mov	r2, r3
 800262c:	d32f      	bcc.n	800268e <quorem+0xf4>
 800262e:	613c      	str	r4, [r7, #16]
 8002630:	4638      	mov	r0, r7
 8002632:	f001 f97b 	bl	800392c <__mcmp>
 8002636:	2800      	cmp	r0, #0
 8002638:	db25      	blt.n	8002686 <quorem+0xec>
 800263a:	4629      	mov	r1, r5
 800263c:	2000      	movs	r0, #0
 800263e:	f858 2b04 	ldr.w	r2, [r8], #4
 8002642:	f8d1 c000 	ldr.w	ip, [r1]
 8002646:	fa1f fe82 	uxth.w	lr, r2
 800264a:	fa1f f38c 	uxth.w	r3, ip
 800264e:	eba3 030e 	sub.w	r3, r3, lr
 8002652:	4403      	add	r3, r0
 8002654:	0c12      	lsrs	r2, r2, #16
 8002656:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800265a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800265e:	b29b      	uxth	r3, r3
 8002660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002664:	45c1      	cmp	r9, r8
 8002666:	f841 3b04 	str.w	r3, [r1], #4
 800266a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800266e:	d2e6      	bcs.n	800263e <quorem+0xa4>
 8002670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002678:	b922      	cbnz	r2, 8002684 <quorem+0xea>
 800267a:	3b04      	subs	r3, #4
 800267c:	429d      	cmp	r5, r3
 800267e:	461a      	mov	r2, r3
 8002680:	d30b      	bcc.n	800269a <quorem+0x100>
 8002682:	613c      	str	r4, [r7, #16]
 8002684:	3601      	adds	r6, #1
 8002686:	4630      	mov	r0, r6
 8002688:	b003      	add	sp, #12
 800268a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	3b04      	subs	r3, #4
 8002692:	2a00      	cmp	r2, #0
 8002694:	d1cb      	bne.n	800262e <quorem+0x94>
 8002696:	3c01      	subs	r4, #1
 8002698:	e7c6      	b.n	8002628 <quorem+0x8e>
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	3b04      	subs	r3, #4
 800269e:	2a00      	cmp	r2, #0
 80026a0:	d1ef      	bne.n	8002682 <quorem+0xe8>
 80026a2:	3c01      	subs	r4, #1
 80026a4:	e7ea      	b.n	800267c <quorem+0xe2>
 80026a6:	2000      	movs	r0, #0
 80026a8:	e7ee      	b.n	8002688 <quorem+0xee>
 80026aa:	0000      	movs	r0, r0
 80026ac:	0000      	movs	r0, r0
	...

080026b0 <_dtoa_r>:
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	69c7      	ldr	r7, [r0, #28]
 80026b6:	b099      	sub	sp, #100	@ 0x64
 80026b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80026bc:	ec55 4b10 	vmov	r4, r5, d0
 80026c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80026c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80026c4:	4683      	mov	fp, r0
 80026c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80026c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80026ca:	b97f      	cbnz	r7, 80026ec <_dtoa_r+0x3c>
 80026cc:	2010      	movs	r0, #16
 80026ce:	f000 fdfd 	bl	80032cc <malloc>
 80026d2:	4602      	mov	r2, r0
 80026d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80026d8:	b920      	cbnz	r0, 80026e4 <_dtoa_r+0x34>
 80026da:	4ba7      	ldr	r3, [pc, #668]	@ (8002978 <_dtoa_r+0x2c8>)
 80026dc:	21ef      	movs	r1, #239	@ 0xef
 80026de:	48a7      	ldr	r0, [pc, #668]	@ (800297c <_dtoa_r+0x2cc>)
 80026e0:	f001 fc68 	bl	8003fb4 <__assert_func>
 80026e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80026e8:	6007      	str	r7, [r0, #0]
 80026ea:	60c7      	str	r7, [r0, #12]
 80026ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	b159      	cbz	r1, 800270c <_dtoa_r+0x5c>
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	604a      	str	r2, [r1, #4]
 80026f8:	2301      	movs	r3, #1
 80026fa:	4093      	lsls	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
 80026fe:	4658      	mov	r0, fp
 8002700:	f000 feda 	bl	80034b8 <_Bfree>
 8002704:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	1e2b      	subs	r3, r5, #0
 800270e:	bfb9      	ittee	lt
 8002710:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002714:	9303      	strlt	r3, [sp, #12]
 8002716:	2300      	movge	r3, #0
 8002718:	6033      	strge	r3, [r6, #0]
 800271a:	9f03      	ldr	r7, [sp, #12]
 800271c:	4b98      	ldr	r3, [pc, #608]	@ (8002980 <_dtoa_r+0x2d0>)
 800271e:	bfbc      	itt	lt
 8002720:	2201      	movlt	r2, #1
 8002722:	6032      	strlt	r2, [r6, #0]
 8002724:	43bb      	bics	r3, r7
 8002726:	d112      	bne.n	800274e <_dtoa_r+0x9e>
 8002728:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800272a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002734:	4323      	orrs	r3, r4
 8002736:	f000 854d 	beq.w	80031d4 <_dtoa_r+0xb24>
 800273a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800273c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8002994 <_dtoa_r+0x2e4>
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 854f 	beq.w	80031e4 <_dtoa_r+0xb34>
 8002746:	f10a 0303 	add.w	r3, sl, #3
 800274a:	f000 bd49 	b.w	80031e0 <_dtoa_r+0xb30>
 800274e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	ec51 0b17 	vmov	r0, r1, d7
 8002758:	2300      	movs	r3, #0
 800275a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800275e:	f7fe f9bb 	bl	8000ad8 <__aeabi_dcmpeq>
 8002762:	4680      	mov	r8, r0
 8002764:	b158      	cbz	r0, 800277e <_dtoa_r+0xce>
 8002766:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002768:	2301      	movs	r3, #1
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800276e:	b113      	cbz	r3, 8002776 <_dtoa_r+0xc6>
 8002770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002772:	4b84      	ldr	r3, [pc, #528]	@ (8002984 <_dtoa_r+0x2d4>)
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8002998 <_dtoa_r+0x2e8>
 800277a:	f000 bd33 	b.w	80031e4 <_dtoa_r+0xb34>
 800277e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002782:	aa16      	add	r2, sp, #88	@ 0x58
 8002784:	a917      	add	r1, sp, #92	@ 0x5c
 8002786:	4658      	mov	r0, fp
 8002788:	f001 f980 	bl	8003a8c <__d2b>
 800278c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002790:	4681      	mov	r9, r0
 8002792:	2e00      	cmp	r6, #0
 8002794:	d077      	beq.n	8002886 <_dtoa_r+0x1d6>
 8002796:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002798:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800279c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80027a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80027a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80027ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80027b0:	4619      	mov	r1, r3
 80027b2:	2200      	movs	r2, #0
 80027b4:	4b74      	ldr	r3, [pc, #464]	@ (8002988 <_dtoa_r+0x2d8>)
 80027b6:	f7fd fd6f 	bl	8000298 <__aeabi_dsub>
 80027ba:	a369      	add	r3, pc, #420	@ (adr r3, 8002960 <_dtoa_r+0x2b0>)
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f7fd ff22 	bl	8000608 <__aeabi_dmul>
 80027c4:	a368      	add	r3, pc, #416	@ (adr r3, 8002968 <_dtoa_r+0x2b8>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd fd67 	bl	800029c <__adddf3>
 80027ce:	4604      	mov	r4, r0
 80027d0:	4630      	mov	r0, r6
 80027d2:	460d      	mov	r5, r1
 80027d4:	f7fd feae 	bl	8000534 <__aeabi_i2d>
 80027d8:	a365      	add	r3, pc, #404	@ (adr r3, 8002970 <_dtoa_r+0x2c0>)
 80027da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027de:	f7fd ff13 	bl	8000608 <__aeabi_dmul>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4620      	mov	r0, r4
 80027e8:	4629      	mov	r1, r5
 80027ea:	f7fd fd57 	bl	800029c <__adddf3>
 80027ee:	4604      	mov	r4, r0
 80027f0:	460d      	mov	r5, r1
 80027f2:	f7fe f9b9 	bl	8000b68 <__aeabi_d2iz>
 80027f6:	2200      	movs	r2, #0
 80027f8:	4607      	mov	r7, r0
 80027fa:	2300      	movs	r3, #0
 80027fc:	4620      	mov	r0, r4
 80027fe:	4629      	mov	r1, r5
 8002800:	f7fe f974 	bl	8000aec <__aeabi_dcmplt>
 8002804:	b140      	cbz	r0, 8002818 <_dtoa_r+0x168>
 8002806:	4638      	mov	r0, r7
 8002808:	f7fd fe94 	bl	8000534 <__aeabi_i2d>
 800280c:	4622      	mov	r2, r4
 800280e:	462b      	mov	r3, r5
 8002810:	f7fe f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8002814:	b900      	cbnz	r0, 8002818 <_dtoa_r+0x168>
 8002816:	3f01      	subs	r7, #1
 8002818:	2f16      	cmp	r7, #22
 800281a:	d851      	bhi.n	80028c0 <_dtoa_r+0x210>
 800281c:	4b5b      	ldr	r3, [pc, #364]	@ (800298c <_dtoa_r+0x2dc>)
 800281e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800282a:	f7fe f95f 	bl	8000aec <__aeabi_dcmplt>
 800282e:	2800      	cmp	r0, #0
 8002830:	d048      	beq.n	80028c4 <_dtoa_r+0x214>
 8002832:	3f01      	subs	r7, #1
 8002834:	2300      	movs	r3, #0
 8002836:	9312      	str	r3, [sp, #72]	@ 0x48
 8002838:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800283a:	1b9b      	subs	r3, r3, r6
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	bf44      	itt	mi
 8002840:	f1c3 0801 	rsbmi	r8, r3, #1
 8002844:	2300      	movmi	r3, #0
 8002846:	9208      	str	r2, [sp, #32]
 8002848:	bf54      	ite	pl
 800284a:	f04f 0800 	movpl.w	r8, #0
 800284e:	9308      	strmi	r3, [sp, #32]
 8002850:	2f00      	cmp	r7, #0
 8002852:	db39      	blt.n	80028c8 <_dtoa_r+0x218>
 8002854:	9b08      	ldr	r3, [sp, #32]
 8002856:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002858:	443b      	add	r3, r7
 800285a:	9308      	str	r3, [sp, #32]
 800285c:	2300      	movs	r3, #0
 800285e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002862:	2b09      	cmp	r3, #9
 8002864:	d864      	bhi.n	8002930 <_dtoa_r+0x280>
 8002866:	2b05      	cmp	r3, #5
 8002868:	bfc4      	itt	gt
 800286a:	3b04      	subgt	r3, #4
 800286c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800286e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002870:	f1a3 0302 	sub.w	r3, r3, #2
 8002874:	bfcc      	ite	gt
 8002876:	2400      	movgt	r4, #0
 8002878:	2401      	movle	r4, #1
 800287a:	2b03      	cmp	r3, #3
 800287c:	d863      	bhi.n	8002946 <_dtoa_r+0x296>
 800287e:	e8df f003 	tbb	[pc, r3]
 8002882:	372a      	.short	0x372a
 8002884:	5535      	.short	0x5535
 8002886:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800288a:	441e      	add	r6, r3
 800288c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002890:	2b20      	cmp	r3, #32
 8002892:	bfc1      	itttt	gt
 8002894:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002898:	409f      	lslgt	r7, r3
 800289a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800289e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80028a2:	bfd6      	itet	le
 80028a4:	f1c3 0320 	rsble	r3, r3, #32
 80028a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80028ac:	fa04 f003 	lslle.w	r0, r4, r3
 80028b0:	f7fd fe30 	bl	8000514 <__aeabi_ui2d>
 80028b4:	2201      	movs	r2, #1
 80028b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80028ba:	3e01      	subs	r6, #1
 80028bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80028be:	e777      	b.n	80027b0 <_dtoa_r+0x100>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e7b8      	b.n	8002836 <_dtoa_r+0x186>
 80028c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80028c6:	e7b7      	b.n	8002838 <_dtoa_r+0x188>
 80028c8:	427b      	negs	r3, r7
 80028ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80028cc:	2300      	movs	r3, #0
 80028ce:	eba8 0807 	sub.w	r8, r8, r7
 80028d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80028d4:	e7c4      	b.n	8002860 <_dtoa_r+0x1b0>
 80028d6:	2300      	movs	r3, #0
 80028d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80028da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80028dc:	2b00      	cmp	r3, #0
 80028de:	dc35      	bgt.n	800294c <_dtoa_r+0x29c>
 80028e0:	2301      	movs	r3, #1
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	9307      	str	r3, [sp, #28]
 80028e6:	461a      	mov	r2, r3
 80028e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80028ea:	e00b      	b.n	8002904 <_dtoa_r+0x254>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e7f3      	b.n	80028d8 <_dtoa_r+0x228>
 80028f0:	2300      	movs	r3, #0
 80028f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80028f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	3301      	adds	r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	9307      	str	r3, [sp, #28]
 8002900:	bfb8      	it	lt
 8002902:	2301      	movlt	r3, #1
 8002904:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002908:	2100      	movs	r1, #0
 800290a:	2204      	movs	r2, #4
 800290c:	f102 0514 	add.w	r5, r2, #20
 8002910:	429d      	cmp	r5, r3
 8002912:	d91f      	bls.n	8002954 <_dtoa_r+0x2a4>
 8002914:	6041      	str	r1, [r0, #4]
 8002916:	4658      	mov	r0, fp
 8002918:	f000 fd8e 	bl	8003438 <_Balloc>
 800291c:	4682      	mov	sl, r0
 800291e:	2800      	cmp	r0, #0
 8002920:	d13c      	bne.n	800299c <_dtoa_r+0x2ec>
 8002922:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <_dtoa_r+0x2e0>)
 8002924:	4602      	mov	r2, r0
 8002926:	f240 11af 	movw	r1, #431	@ 0x1af
 800292a:	e6d8      	b.n	80026de <_dtoa_r+0x2e>
 800292c:	2301      	movs	r3, #1
 800292e:	e7e0      	b.n	80028f2 <_dtoa_r+0x242>
 8002930:	2401      	movs	r4, #1
 8002932:	2300      	movs	r3, #0
 8002934:	9309      	str	r3, [sp, #36]	@ 0x24
 8002936:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	9307      	str	r3, [sp, #28]
 8002940:	2200      	movs	r2, #0
 8002942:	2312      	movs	r3, #18
 8002944:	e7d0      	b.n	80028e8 <_dtoa_r+0x238>
 8002946:	2301      	movs	r3, #1
 8002948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800294a:	e7f5      	b.n	8002938 <_dtoa_r+0x288>
 800294c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	9307      	str	r3, [sp, #28]
 8002952:	e7d7      	b.n	8002904 <_dtoa_r+0x254>
 8002954:	3101      	adds	r1, #1
 8002956:	0052      	lsls	r2, r2, #1
 8002958:	e7d8      	b.n	800290c <_dtoa_r+0x25c>
 800295a:	bf00      	nop
 800295c:	f3af 8000 	nop.w
 8002960:	636f4361 	.word	0x636f4361
 8002964:	3fd287a7 	.word	0x3fd287a7
 8002968:	8b60c8b3 	.word	0x8b60c8b3
 800296c:	3fc68a28 	.word	0x3fc68a28
 8002970:	509f79fb 	.word	0x509f79fb
 8002974:	3fd34413 	.word	0x3fd34413
 8002978:	080046bc 	.word	0x080046bc
 800297c:	080046d3 	.word	0x080046d3
 8002980:	7ff00000 	.word	0x7ff00000
 8002984:	0800468c 	.word	0x0800468c
 8002988:	3ff80000 	.word	0x3ff80000
 800298c:	080047d0 	.word	0x080047d0
 8002990:	0800472b 	.word	0x0800472b
 8002994:	080046b8 	.word	0x080046b8
 8002998:	0800468b 	.word	0x0800468b
 800299c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80029a0:	6018      	str	r0, [r3, #0]
 80029a2:	9b07      	ldr	r3, [sp, #28]
 80029a4:	2b0e      	cmp	r3, #14
 80029a6:	f200 80a4 	bhi.w	8002af2 <_dtoa_r+0x442>
 80029aa:	2c00      	cmp	r4, #0
 80029ac:	f000 80a1 	beq.w	8002af2 <_dtoa_r+0x442>
 80029b0:	2f00      	cmp	r7, #0
 80029b2:	dd33      	ble.n	8002a1c <_dtoa_r+0x36c>
 80029b4:	4bad      	ldr	r3, [pc, #692]	@ (8002c6c <_dtoa_r+0x5bc>)
 80029b6:	f007 020f 	and.w	r2, r7, #15
 80029ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029be:	ed93 7b00 	vldr	d7, [r3]
 80029c2:	05f8      	lsls	r0, r7, #23
 80029c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80029c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80029cc:	d516      	bpl.n	80029fc <_dtoa_r+0x34c>
 80029ce:	4ba8      	ldr	r3, [pc, #672]	@ (8002c70 <_dtoa_r+0x5c0>)
 80029d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80029d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80029d8:	f7fd ff40 	bl	800085c <__aeabi_ddiv>
 80029dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029e0:	f004 040f 	and.w	r4, r4, #15
 80029e4:	2603      	movs	r6, #3
 80029e6:	4da2      	ldr	r5, [pc, #648]	@ (8002c70 <_dtoa_r+0x5c0>)
 80029e8:	b954      	cbnz	r4, 8002a00 <_dtoa_r+0x350>
 80029ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80029ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80029f2:	f7fd ff33 	bl	800085c <__aeabi_ddiv>
 80029f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029fa:	e028      	b.n	8002a4e <_dtoa_r+0x39e>
 80029fc:	2602      	movs	r6, #2
 80029fe:	e7f2      	b.n	80029e6 <_dtoa_r+0x336>
 8002a00:	07e1      	lsls	r1, r4, #31
 8002a02:	d508      	bpl.n	8002a16 <_dtoa_r+0x366>
 8002a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002a08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002a0c:	f7fd fdfc 	bl	8000608 <__aeabi_dmul>
 8002a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a14:	3601      	adds	r6, #1
 8002a16:	1064      	asrs	r4, r4, #1
 8002a18:	3508      	adds	r5, #8
 8002a1a:	e7e5      	b.n	80029e8 <_dtoa_r+0x338>
 8002a1c:	f000 80d2 	beq.w	8002bc4 <_dtoa_r+0x514>
 8002a20:	427c      	negs	r4, r7
 8002a22:	4b92      	ldr	r3, [pc, #584]	@ (8002c6c <_dtoa_r+0x5bc>)
 8002a24:	4d92      	ldr	r5, [pc, #584]	@ (8002c70 <_dtoa_r+0x5c0>)
 8002a26:	f004 020f 	and.w	r2, r4, #15
 8002a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002a36:	f7fd fde7 	bl	8000608 <__aeabi_dmul>
 8002a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a3e:	1124      	asrs	r4, r4, #4
 8002a40:	2300      	movs	r3, #0
 8002a42:	2602      	movs	r6, #2
 8002a44:	2c00      	cmp	r4, #0
 8002a46:	f040 80b2 	bne.w	8002bae <_dtoa_r+0x4fe>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1d3      	bne.n	80029f6 <_dtoa_r+0x346>
 8002a4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002a50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80b7 	beq.w	8002bc8 <_dtoa_r+0x518>
 8002a5a:	4b86      	ldr	r3, [pc, #536]	@ (8002c74 <_dtoa_r+0x5c4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	f7fe f843 	bl	8000aec <__aeabi_dcmplt>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	f000 80ae 	beq.w	8002bc8 <_dtoa_r+0x518>
 8002a6c:	9b07      	ldr	r3, [sp, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80aa 	beq.w	8002bc8 <_dtoa_r+0x518>
 8002a74:	9b00      	ldr	r3, [sp, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dd37      	ble.n	8002aea <_dtoa_r+0x43a>
 8002a7a:	1e7b      	subs	r3, r7, #1
 8002a7c:	9304      	str	r3, [sp, #16]
 8002a7e:	4620      	mov	r0, r4
 8002a80:	4b7d      	ldr	r3, [pc, #500]	@ (8002c78 <_dtoa_r+0x5c8>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	4629      	mov	r1, r5
 8002a86:	f7fd fdbf 	bl	8000608 <__aeabi_dmul>
 8002a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a8e:	9c00      	ldr	r4, [sp, #0]
 8002a90:	3601      	adds	r6, #1
 8002a92:	4630      	mov	r0, r6
 8002a94:	f7fd fd4e 	bl	8000534 <__aeabi_i2d>
 8002a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a9c:	f7fd fdb4 	bl	8000608 <__aeabi_dmul>
 8002aa0:	4b76      	ldr	r3, [pc, #472]	@ (8002c7c <_dtoa_r+0x5cc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f7fd fbfa 	bl	800029c <__adddf3>
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8002aae:	2c00      	cmp	r4, #0
 8002ab0:	f040 808d 	bne.w	8002bce <_dtoa_r+0x51e>
 8002ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ab8:	4b71      	ldr	r3, [pc, #452]	@ (8002c80 <_dtoa_r+0x5d0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	f7fd fbec 	bl	8000298 <__aeabi_dsub>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ac8:	462a      	mov	r2, r5
 8002aca:	4633      	mov	r3, r6
 8002acc:	f7fe f82c 	bl	8000b28 <__aeabi_dcmpgt>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	f040 828b 	bne.w	8002fec <_dtoa_r+0x93c>
 8002ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ada:	462a      	mov	r2, r5
 8002adc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002ae0:	f7fe f804 	bl	8000aec <__aeabi_dcmplt>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	f040 8128 	bne.w	8002d3a <_dtoa_r+0x68a>
 8002aea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8002aee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002af2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f2c0 815a 	blt.w	8002dae <_dtoa_r+0x6fe>
 8002afa:	2f0e      	cmp	r7, #14
 8002afc:	f300 8157 	bgt.w	8002dae <_dtoa_r+0x6fe>
 8002b00:	4b5a      	ldr	r3, [pc, #360]	@ (8002c6c <_dtoa_r+0x5bc>)
 8002b02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002b06:	ed93 7b00 	vldr	d7, [r3]
 8002b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	ed8d 7b00 	vstr	d7, [sp]
 8002b12:	da03      	bge.n	8002b1c <_dtoa_r+0x46c>
 8002b14:	9b07      	ldr	r3, [sp, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f340 8101 	ble.w	8002d1e <_dtoa_r+0x66e>
 8002b1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002b20:	4656      	mov	r6, sl
 8002b22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7fd fe97 	bl	800085c <__aeabi_ddiv>
 8002b2e:	f7fe f81b 	bl	8000b68 <__aeabi_d2iz>
 8002b32:	4680      	mov	r8, r0
 8002b34:	f7fd fcfe 	bl	8000534 <__aeabi_i2d>
 8002b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b3c:	f7fd fd64 	bl	8000608 <__aeabi_dmul>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8002b4c:	f7fd fba4 	bl	8000298 <__aeabi_dsub>
 8002b50:	f806 4b01 	strb.w	r4, [r6], #1
 8002b54:	9d07      	ldr	r5, [sp, #28]
 8002b56:	eba6 040a 	sub.w	r4, r6, sl
 8002b5a:	42a5      	cmp	r5, r4
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	f040 8117 	bne.w	8002d92 <_dtoa_r+0x6e2>
 8002b64:	f7fd fb9a 	bl	800029c <__adddf3>
 8002b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	460d      	mov	r5, r1
 8002b70:	f7fd ffda 	bl	8000b28 <__aeabi_dcmpgt>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f040 80f9 	bne.w	8002d6c <_dtoa_r+0x6bc>
 8002b7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	f7fd ffa9 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b86:	b118      	cbz	r0, 8002b90 <_dtoa_r+0x4e0>
 8002b88:	f018 0f01 	tst.w	r8, #1
 8002b8c:	f040 80ee 	bne.w	8002d6c <_dtoa_r+0x6bc>
 8002b90:	4649      	mov	r1, r9
 8002b92:	4658      	mov	r0, fp
 8002b94:	f000 fc90 	bl	80034b8 <_Bfree>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	7033      	strb	r3, [r6, #0]
 8002b9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002b9e:	3701      	adds	r7, #1
 8002ba0:	601f      	str	r7, [r3, #0]
 8002ba2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 831d 	beq.w	80031e4 <_dtoa_r+0xb34>
 8002baa:	601e      	str	r6, [r3, #0]
 8002bac:	e31a      	b.n	80031e4 <_dtoa_r+0xb34>
 8002bae:	07e2      	lsls	r2, r4, #31
 8002bb0:	d505      	bpl.n	8002bbe <_dtoa_r+0x50e>
 8002bb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002bb6:	f7fd fd27 	bl	8000608 <__aeabi_dmul>
 8002bba:	3601      	adds	r6, #1
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	1064      	asrs	r4, r4, #1
 8002bc0:	3508      	adds	r5, #8
 8002bc2:	e73f      	b.n	8002a44 <_dtoa_r+0x394>
 8002bc4:	2602      	movs	r6, #2
 8002bc6:	e742      	b.n	8002a4e <_dtoa_r+0x39e>
 8002bc8:	9c07      	ldr	r4, [sp, #28]
 8002bca:	9704      	str	r7, [sp, #16]
 8002bcc:	e761      	b.n	8002a92 <_dtoa_r+0x3e2>
 8002bce:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <_dtoa_r+0x5bc>)
 8002bd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002bd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002bd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002bda:	4454      	add	r4, sl
 8002bdc:	2900      	cmp	r1, #0
 8002bde:	d053      	beq.n	8002c88 <_dtoa_r+0x5d8>
 8002be0:	4928      	ldr	r1, [pc, #160]	@ (8002c84 <_dtoa_r+0x5d4>)
 8002be2:	2000      	movs	r0, #0
 8002be4:	f7fd fe3a 	bl	800085c <__aeabi_ddiv>
 8002be8:	4633      	mov	r3, r6
 8002bea:	462a      	mov	r2, r5
 8002bec:	f7fd fb54 	bl	8000298 <__aeabi_dsub>
 8002bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002bf4:	4656      	mov	r6, sl
 8002bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bfa:	f7fd ffb5 	bl	8000b68 <__aeabi_d2iz>
 8002bfe:	4605      	mov	r5, r0
 8002c00:	f7fd fc98 	bl	8000534 <__aeabi_i2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c0c:	f7fd fb44 	bl	8000298 <__aeabi_dsub>
 8002c10:	3530      	adds	r5, #48	@ 0x30
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c1a:	f806 5b01 	strb.w	r5, [r6], #1
 8002c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002c22:	f7fd ff63 	bl	8000aec <__aeabi_dcmplt>
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d171      	bne.n	8002d0e <_dtoa_r+0x65e>
 8002c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c2e:	4911      	ldr	r1, [pc, #68]	@ (8002c74 <_dtoa_r+0x5c4>)
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fd fb31 	bl	8000298 <__aeabi_dsub>
 8002c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002c3a:	f7fd ff57 	bl	8000aec <__aeabi_dcmplt>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	f040 8095 	bne.w	8002d6e <_dtoa_r+0x6be>
 8002c44:	42a6      	cmp	r6, r4
 8002c46:	f43f af50 	beq.w	8002aea <_dtoa_r+0x43a>
 8002c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <_dtoa_r+0x5c8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	f7fd fcd9 	bl	8000608 <__aeabi_dmul>
 8002c56:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <_dtoa_r+0x5c8>)
 8002c58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c62:	f7fd fcd1 	bl	8000608 <__aeabi_dmul>
 8002c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c6a:	e7c4      	b.n	8002bf6 <_dtoa_r+0x546>
 8002c6c:	080047d0 	.word	0x080047d0
 8002c70:	080047a8 	.word	0x080047a8
 8002c74:	3ff00000 	.word	0x3ff00000
 8002c78:	40240000 	.word	0x40240000
 8002c7c:	401c0000 	.word	0x401c0000
 8002c80:	40140000 	.word	0x40140000
 8002c84:	3fe00000 	.word	0x3fe00000
 8002c88:	4631      	mov	r1, r6
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f7fd fcbc 	bl	8000608 <__aeabi_dmul>
 8002c90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002c94:	9415      	str	r4, [sp, #84]	@ 0x54
 8002c96:	4656      	mov	r6, sl
 8002c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c9c:	f7fd ff64 	bl	8000b68 <__aeabi_d2iz>
 8002ca0:	4605      	mov	r5, r0
 8002ca2:	f7fd fc47 	bl	8000534 <__aeabi_i2d>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002cae:	f7fd faf3 	bl	8000298 <__aeabi_dsub>
 8002cb2:	3530      	adds	r5, #48	@ 0x30
 8002cb4:	f806 5b01 	strb.w	r5, [r6], #1
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	42a6      	cmp	r6, r4
 8002cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	d124      	bne.n	8002d12 <_dtoa_r+0x662>
 8002cc8:	4bac      	ldr	r3, [pc, #688]	@ (8002f7c <_dtoa_r+0x8cc>)
 8002cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8002cce:	f7fd fae5 	bl	800029c <__adddf3>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002cda:	f7fd ff25 	bl	8000b28 <__aeabi_dcmpgt>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	d145      	bne.n	8002d6e <_dtoa_r+0x6be>
 8002ce2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002ce6:	49a5      	ldr	r1, [pc, #660]	@ (8002f7c <_dtoa_r+0x8cc>)
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd fad5 	bl	8000298 <__aeabi_dsub>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002cf6:	f7fd fef9 	bl	8000aec <__aeabi_dcmplt>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	f43f aef5 	beq.w	8002aea <_dtoa_r+0x43a>
 8002d00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8002d02:	1e73      	subs	r3, r6, #1
 8002d04:	9315      	str	r3, [sp, #84]	@ 0x54
 8002d06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002d0a:	2b30      	cmp	r3, #48	@ 0x30
 8002d0c:	d0f8      	beq.n	8002d00 <_dtoa_r+0x650>
 8002d0e:	9f04      	ldr	r7, [sp, #16]
 8002d10:	e73e      	b.n	8002b90 <_dtoa_r+0x4e0>
 8002d12:	4b9b      	ldr	r3, [pc, #620]	@ (8002f80 <_dtoa_r+0x8d0>)
 8002d14:	f7fd fc78 	bl	8000608 <__aeabi_dmul>
 8002d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d1c:	e7bc      	b.n	8002c98 <_dtoa_r+0x5e8>
 8002d1e:	d10c      	bne.n	8002d3a <_dtoa_r+0x68a>
 8002d20:	4b98      	ldr	r3, [pc, #608]	@ (8002f84 <_dtoa_r+0x8d4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d28:	f7fd fc6e 	bl	8000608 <__aeabi_dmul>
 8002d2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d30:	f7fd fef0 	bl	8000b14 <__aeabi_dcmpge>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	f000 8157 	beq.w	8002fe8 <_dtoa_r+0x938>
 8002d3a:	2400      	movs	r4, #0
 8002d3c:	4625      	mov	r5, r4
 8002d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d40:	43db      	mvns	r3, r3
 8002d42:	9304      	str	r3, [sp, #16]
 8002d44:	4656      	mov	r6, sl
 8002d46:	2700      	movs	r7, #0
 8002d48:	4621      	mov	r1, r4
 8002d4a:	4658      	mov	r0, fp
 8002d4c:	f000 fbb4 	bl	80034b8 <_Bfree>
 8002d50:	2d00      	cmp	r5, #0
 8002d52:	d0dc      	beq.n	8002d0e <_dtoa_r+0x65e>
 8002d54:	b12f      	cbz	r7, 8002d62 <_dtoa_r+0x6b2>
 8002d56:	42af      	cmp	r7, r5
 8002d58:	d003      	beq.n	8002d62 <_dtoa_r+0x6b2>
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	4658      	mov	r0, fp
 8002d5e:	f000 fbab 	bl	80034b8 <_Bfree>
 8002d62:	4629      	mov	r1, r5
 8002d64:	4658      	mov	r0, fp
 8002d66:	f000 fba7 	bl	80034b8 <_Bfree>
 8002d6a:	e7d0      	b.n	8002d0e <_dtoa_r+0x65e>
 8002d6c:	9704      	str	r7, [sp, #16]
 8002d6e:	4633      	mov	r3, r6
 8002d70:	461e      	mov	r6, r3
 8002d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002d76:	2a39      	cmp	r2, #57	@ 0x39
 8002d78:	d107      	bne.n	8002d8a <_dtoa_r+0x6da>
 8002d7a:	459a      	cmp	sl, r3
 8002d7c:	d1f8      	bne.n	8002d70 <_dtoa_r+0x6c0>
 8002d7e:	9a04      	ldr	r2, [sp, #16]
 8002d80:	3201      	adds	r2, #1
 8002d82:	9204      	str	r2, [sp, #16]
 8002d84:	2230      	movs	r2, #48	@ 0x30
 8002d86:	f88a 2000 	strb.w	r2, [sl]
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	3201      	adds	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e7bd      	b.n	8002d0e <_dtoa_r+0x65e>
 8002d92:	4b7b      	ldr	r3, [pc, #492]	@ (8002f80 <_dtoa_r+0x8d0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	f7fd fc37 	bl	8000608 <__aeabi_dmul>
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	460d      	mov	r5, r1
 8002da2:	f7fd fe99 	bl	8000ad8 <__aeabi_dcmpeq>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	f43f aebb 	beq.w	8002b22 <_dtoa_r+0x472>
 8002dac:	e6f0      	b.n	8002b90 <_dtoa_r+0x4e0>
 8002dae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002db0:	2a00      	cmp	r2, #0
 8002db2:	f000 80db 	beq.w	8002f6c <_dtoa_r+0x8bc>
 8002db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002db8:	2a01      	cmp	r2, #1
 8002dba:	f300 80bf 	bgt.w	8002f3c <_dtoa_r+0x88c>
 8002dbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	f000 80b7 	beq.w	8002f34 <_dtoa_r+0x884>
 8002dc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8002dca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002dcc:	4646      	mov	r6, r8
 8002dce:	9a08      	ldr	r2, [sp, #32]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	441a      	add	r2, r3
 8002dd4:	4658      	mov	r0, fp
 8002dd6:	4498      	add	r8, r3
 8002dd8:	9208      	str	r2, [sp, #32]
 8002dda:	f000 fc21 	bl	8003620 <__i2b>
 8002dde:	4605      	mov	r5, r0
 8002de0:	b15e      	cbz	r6, 8002dfa <_dtoa_r+0x74a>
 8002de2:	9b08      	ldr	r3, [sp, #32]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	dd08      	ble.n	8002dfa <_dtoa_r+0x74a>
 8002de8:	42b3      	cmp	r3, r6
 8002dea:	9a08      	ldr	r2, [sp, #32]
 8002dec:	bfa8      	it	ge
 8002dee:	4633      	movge	r3, r6
 8002df0:	eba8 0803 	sub.w	r8, r8, r3
 8002df4:	1af6      	subs	r6, r6, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	9308      	str	r3, [sp, #32]
 8002dfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002dfc:	b1f3      	cbz	r3, 8002e3c <_dtoa_r+0x78c>
 8002dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80b7 	beq.w	8002f74 <_dtoa_r+0x8c4>
 8002e06:	b18c      	cbz	r4, 8002e2c <_dtoa_r+0x77c>
 8002e08:	4629      	mov	r1, r5
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	4658      	mov	r0, fp
 8002e0e:	f000 fcc7 	bl	80037a0 <__pow5mult>
 8002e12:	464a      	mov	r2, r9
 8002e14:	4601      	mov	r1, r0
 8002e16:	4605      	mov	r5, r0
 8002e18:	4658      	mov	r0, fp
 8002e1a:	f000 fc17 	bl	800364c <__multiply>
 8002e1e:	4649      	mov	r1, r9
 8002e20:	9004      	str	r0, [sp, #16]
 8002e22:	4658      	mov	r0, fp
 8002e24:	f000 fb48 	bl	80034b8 <_Bfree>
 8002e28:	9b04      	ldr	r3, [sp, #16]
 8002e2a:	4699      	mov	r9, r3
 8002e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e2e:	1b1a      	subs	r2, r3, r4
 8002e30:	d004      	beq.n	8002e3c <_dtoa_r+0x78c>
 8002e32:	4649      	mov	r1, r9
 8002e34:	4658      	mov	r0, fp
 8002e36:	f000 fcb3 	bl	80037a0 <__pow5mult>
 8002e3a:	4681      	mov	r9, r0
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4658      	mov	r0, fp
 8002e40:	f000 fbee 	bl	8003620 <__i2b>
 8002e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002e46:	4604      	mov	r4, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 81cf 	beq.w	80031ec <_dtoa_r+0xb3c>
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4601      	mov	r1, r0
 8002e52:	4658      	mov	r0, fp
 8002e54:	f000 fca4 	bl	80037a0 <__pow5mult>
 8002e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	f300 8095 	bgt.w	8002f8c <_dtoa_r+0x8dc>
 8002e62:	9b02      	ldr	r3, [sp, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 8087 	bne.w	8002f78 <_dtoa_r+0x8c8>
 8002e6a:	9b03      	ldr	r3, [sp, #12]
 8002e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 8089 	bne.w	8002f88 <_dtoa_r+0x8d8>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e7c:	0d1b      	lsrs	r3, r3, #20
 8002e7e:	051b      	lsls	r3, r3, #20
 8002e80:	b12b      	cbz	r3, 8002e8e <_dtoa_r+0x7de>
 8002e82:	9b08      	ldr	r3, [sp, #32]
 8002e84:	3301      	adds	r3, #1
 8002e86:	9308      	str	r3, [sp, #32]
 8002e88:	f108 0801 	add.w	r8, r8, #1
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 81b0 	beq.w	80031f8 <_dtoa_r+0xb48>
 8002e98:	6923      	ldr	r3, [r4, #16]
 8002e9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002e9e:	6918      	ldr	r0, [r3, #16]
 8002ea0:	f000 fb72 	bl	8003588 <__hi0bits>
 8002ea4:	f1c0 0020 	rsb	r0, r0, #32
 8002ea8:	9b08      	ldr	r3, [sp, #32]
 8002eaa:	4418      	add	r0, r3
 8002eac:	f010 001f 	ands.w	r0, r0, #31
 8002eb0:	d077      	beq.n	8002fa2 <_dtoa_r+0x8f2>
 8002eb2:	f1c0 0320 	rsb	r3, r0, #32
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	dd6b      	ble.n	8002f92 <_dtoa_r+0x8e2>
 8002eba:	9b08      	ldr	r3, [sp, #32]
 8002ebc:	f1c0 001c 	rsb	r0, r0, #28
 8002ec0:	4403      	add	r3, r0
 8002ec2:	4480      	add	r8, r0
 8002ec4:	4406      	add	r6, r0
 8002ec6:	9308      	str	r3, [sp, #32]
 8002ec8:	f1b8 0f00 	cmp.w	r8, #0
 8002ecc:	dd05      	ble.n	8002eda <_dtoa_r+0x82a>
 8002ece:	4649      	mov	r1, r9
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	4658      	mov	r0, fp
 8002ed4:	f000 fcbe 	bl	8003854 <__lshift>
 8002ed8:	4681      	mov	r9, r0
 8002eda:	9b08      	ldr	r3, [sp, #32]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	dd05      	ble.n	8002eec <_dtoa_r+0x83c>
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4658      	mov	r0, fp
 8002ee6:	f000 fcb5 	bl	8003854 <__lshift>
 8002eea:	4604      	mov	r4, r0
 8002eec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d059      	beq.n	8002fa6 <_dtoa_r+0x8f6>
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	4648      	mov	r0, r9
 8002ef6:	f000 fd19 	bl	800392c <__mcmp>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	da53      	bge.n	8002fa6 <_dtoa_r+0x8f6>
 8002efe:	1e7b      	subs	r3, r7, #1
 8002f00:	9304      	str	r3, [sp, #16]
 8002f02:	4649      	mov	r1, r9
 8002f04:	2300      	movs	r3, #0
 8002f06:	220a      	movs	r2, #10
 8002f08:	4658      	mov	r0, fp
 8002f0a:	f000 faf7 	bl	80034fc <__multadd>
 8002f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002f10:	4681      	mov	r9, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8172 	beq.w	80031fc <_dtoa_r+0xb4c>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	220a      	movs	r2, #10
 8002f1e:	4658      	mov	r0, fp
 8002f20:	f000 faec 	bl	80034fc <__multadd>
 8002f24:	9b00      	ldr	r3, [sp, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	4605      	mov	r5, r0
 8002f2a:	dc67      	bgt.n	8002ffc <_dtoa_r+0x94c>
 8002f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	dc41      	bgt.n	8002fb6 <_dtoa_r+0x906>
 8002f32:	e063      	b.n	8002ffc <_dtoa_r+0x94c>
 8002f34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002f36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8002f3a:	e746      	b.n	8002dca <_dtoa_r+0x71a>
 8002f3c:	9b07      	ldr	r3, [sp, #28]
 8002f3e:	1e5c      	subs	r4, r3, #1
 8002f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f42:	42a3      	cmp	r3, r4
 8002f44:	bfbf      	itttt	lt
 8002f46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8002f48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8002f4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8002f4c:	1ae3      	sublt	r3, r4, r3
 8002f4e:	bfb4      	ite	lt
 8002f50:	18d2      	addlt	r2, r2, r3
 8002f52:	1b1c      	subge	r4, r3, r4
 8002f54:	9b07      	ldr	r3, [sp, #28]
 8002f56:	bfbc      	itt	lt
 8002f58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8002f5a:	2400      	movlt	r4, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bfb5      	itete	lt
 8002f60:	eba8 0603 	sublt.w	r6, r8, r3
 8002f64:	9b07      	ldrge	r3, [sp, #28]
 8002f66:	2300      	movlt	r3, #0
 8002f68:	4646      	movge	r6, r8
 8002f6a:	e730      	b.n	8002dce <_dtoa_r+0x71e>
 8002f6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002f6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8002f70:	4646      	mov	r6, r8
 8002f72:	e735      	b.n	8002de0 <_dtoa_r+0x730>
 8002f74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f76:	e75c      	b.n	8002e32 <_dtoa_r+0x782>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e788      	b.n	8002e8e <_dtoa_r+0x7de>
 8002f7c:	3fe00000 	.word	0x3fe00000
 8002f80:	40240000 	.word	0x40240000
 8002f84:	40140000 	.word	0x40140000
 8002f88:	9b02      	ldr	r3, [sp, #8]
 8002f8a:	e780      	b.n	8002e8e <_dtoa_r+0x7de>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f90:	e782      	b.n	8002e98 <_dtoa_r+0x7e8>
 8002f92:	d099      	beq.n	8002ec8 <_dtoa_r+0x818>
 8002f94:	9a08      	ldr	r2, [sp, #32]
 8002f96:	331c      	adds	r3, #28
 8002f98:	441a      	add	r2, r3
 8002f9a:	4498      	add	r8, r3
 8002f9c:	441e      	add	r6, r3
 8002f9e:	9208      	str	r2, [sp, #32]
 8002fa0:	e792      	b.n	8002ec8 <_dtoa_r+0x818>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	e7f6      	b.n	8002f94 <_dtoa_r+0x8e4>
 8002fa6:	9b07      	ldr	r3, [sp, #28]
 8002fa8:	9704      	str	r7, [sp, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dc20      	bgt.n	8002ff0 <_dtoa_r+0x940>
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	dd1e      	ble.n	8002ff4 <_dtoa_r+0x944>
 8002fb6:	9b00      	ldr	r3, [sp, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f aec0 	bne.w	8002d3e <_dtoa_r+0x68e>
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	4658      	mov	r0, fp
 8002fc4:	f000 fa9a 	bl	80034fc <__multadd>
 8002fc8:	4601      	mov	r1, r0
 8002fca:	4604      	mov	r4, r0
 8002fcc:	4648      	mov	r0, r9
 8002fce:	f000 fcad 	bl	800392c <__mcmp>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	f77f aeb3 	ble.w	8002d3e <_dtoa_r+0x68e>
 8002fd8:	4656      	mov	r6, sl
 8002fda:	2331      	movs	r3, #49	@ 0x31
 8002fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8002fe0:	9b04      	ldr	r3, [sp, #16]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	9304      	str	r3, [sp, #16]
 8002fe6:	e6ae      	b.n	8002d46 <_dtoa_r+0x696>
 8002fe8:	9c07      	ldr	r4, [sp, #28]
 8002fea:	9704      	str	r7, [sp, #16]
 8002fec:	4625      	mov	r5, r4
 8002fee:	e7f3      	b.n	8002fd8 <_dtoa_r+0x928>
 8002ff0:	9b07      	ldr	r3, [sp, #28]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8104 	beq.w	8003204 <_dtoa_r+0xb54>
 8002ffc:	2e00      	cmp	r6, #0
 8002ffe:	dd05      	ble.n	800300c <_dtoa_r+0x95c>
 8003000:	4629      	mov	r1, r5
 8003002:	4632      	mov	r2, r6
 8003004:	4658      	mov	r0, fp
 8003006:	f000 fc25 	bl	8003854 <__lshift>
 800300a:	4605      	mov	r5, r0
 800300c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800300e:	2b00      	cmp	r3, #0
 8003010:	d05a      	beq.n	80030c8 <_dtoa_r+0xa18>
 8003012:	6869      	ldr	r1, [r5, #4]
 8003014:	4658      	mov	r0, fp
 8003016:	f000 fa0f 	bl	8003438 <_Balloc>
 800301a:	4606      	mov	r6, r0
 800301c:	b928      	cbnz	r0, 800302a <_dtoa_r+0x97a>
 800301e:	4b84      	ldr	r3, [pc, #528]	@ (8003230 <_dtoa_r+0xb80>)
 8003020:	4602      	mov	r2, r0
 8003022:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003026:	f7ff bb5a 	b.w	80026de <_dtoa_r+0x2e>
 800302a:	692a      	ldr	r2, [r5, #16]
 800302c:	3202      	adds	r2, #2
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	f105 010c 	add.w	r1, r5, #12
 8003034:	300c      	adds	r0, #12
 8003036:	f000 ffaf 	bl	8003f98 <memcpy>
 800303a:	2201      	movs	r2, #1
 800303c:	4631      	mov	r1, r6
 800303e:	4658      	mov	r0, fp
 8003040:	f000 fc08 	bl	8003854 <__lshift>
 8003044:	f10a 0301 	add.w	r3, sl, #1
 8003048:	9307      	str	r3, [sp, #28]
 800304a:	9b00      	ldr	r3, [sp, #0]
 800304c:	4453      	add	r3, sl
 800304e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003050:	9b02      	ldr	r3, [sp, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	462f      	mov	r7, r5
 8003058:	930a      	str	r3, [sp, #40]	@ 0x28
 800305a:	4605      	mov	r5, r0
 800305c:	9b07      	ldr	r3, [sp, #28]
 800305e:	4621      	mov	r1, r4
 8003060:	3b01      	subs	r3, #1
 8003062:	4648      	mov	r0, r9
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f7ff fa98 	bl	800259a <quorem>
 800306a:	4639      	mov	r1, r7
 800306c:	9002      	str	r0, [sp, #8]
 800306e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003072:	4648      	mov	r0, r9
 8003074:	f000 fc5a 	bl	800392c <__mcmp>
 8003078:	462a      	mov	r2, r5
 800307a:	9008      	str	r0, [sp, #32]
 800307c:	4621      	mov	r1, r4
 800307e:	4658      	mov	r0, fp
 8003080:	f000 fc70 	bl	8003964 <__mdiff>
 8003084:	68c2      	ldr	r2, [r0, #12]
 8003086:	4606      	mov	r6, r0
 8003088:	bb02      	cbnz	r2, 80030cc <_dtoa_r+0xa1c>
 800308a:	4601      	mov	r1, r0
 800308c:	4648      	mov	r0, r9
 800308e:	f000 fc4d 	bl	800392c <__mcmp>
 8003092:	4602      	mov	r2, r0
 8003094:	4631      	mov	r1, r6
 8003096:	4658      	mov	r0, fp
 8003098:	920e      	str	r2, [sp, #56]	@ 0x38
 800309a:	f000 fa0d 	bl	80034b8 <_Bfree>
 800309e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80030a2:	9e07      	ldr	r6, [sp, #28]
 80030a4:	ea43 0102 	orr.w	r1, r3, r2
 80030a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80030aa:	4319      	orrs	r1, r3
 80030ac:	d110      	bne.n	80030d0 <_dtoa_r+0xa20>
 80030ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80030b2:	d029      	beq.n	8003108 <_dtoa_r+0xa58>
 80030b4:	9b08      	ldr	r3, [sp, #32]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	dd02      	ble.n	80030c0 <_dtoa_r+0xa10>
 80030ba:	9b02      	ldr	r3, [sp, #8]
 80030bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80030c0:	9b00      	ldr	r3, [sp, #0]
 80030c2:	f883 8000 	strb.w	r8, [r3]
 80030c6:	e63f      	b.n	8002d48 <_dtoa_r+0x698>
 80030c8:	4628      	mov	r0, r5
 80030ca:	e7bb      	b.n	8003044 <_dtoa_r+0x994>
 80030cc:	2201      	movs	r2, #1
 80030ce:	e7e1      	b.n	8003094 <_dtoa_r+0x9e4>
 80030d0:	9b08      	ldr	r3, [sp, #32]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	db04      	blt.n	80030e0 <_dtoa_r+0xa30>
 80030d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80030d8:	430b      	orrs	r3, r1
 80030da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80030dc:	430b      	orrs	r3, r1
 80030de:	d120      	bne.n	8003122 <_dtoa_r+0xa72>
 80030e0:	2a00      	cmp	r2, #0
 80030e2:	dded      	ble.n	80030c0 <_dtoa_r+0xa10>
 80030e4:	4649      	mov	r1, r9
 80030e6:	2201      	movs	r2, #1
 80030e8:	4658      	mov	r0, fp
 80030ea:	f000 fbb3 	bl	8003854 <__lshift>
 80030ee:	4621      	mov	r1, r4
 80030f0:	4681      	mov	r9, r0
 80030f2:	f000 fc1b 	bl	800392c <__mcmp>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	dc03      	bgt.n	8003102 <_dtoa_r+0xa52>
 80030fa:	d1e1      	bne.n	80030c0 <_dtoa_r+0xa10>
 80030fc:	f018 0f01 	tst.w	r8, #1
 8003100:	d0de      	beq.n	80030c0 <_dtoa_r+0xa10>
 8003102:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003106:	d1d8      	bne.n	80030ba <_dtoa_r+0xa0a>
 8003108:	9a00      	ldr	r2, [sp, #0]
 800310a:	2339      	movs	r3, #57	@ 0x39
 800310c:	7013      	strb	r3, [r2, #0]
 800310e:	4633      	mov	r3, r6
 8003110:	461e      	mov	r6, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003118:	2a39      	cmp	r2, #57	@ 0x39
 800311a:	d052      	beq.n	80031c2 <_dtoa_r+0xb12>
 800311c:	3201      	adds	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e612      	b.n	8002d48 <_dtoa_r+0x698>
 8003122:	2a00      	cmp	r2, #0
 8003124:	dd07      	ble.n	8003136 <_dtoa_r+0xa86>
 8003126:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800312a:	d0ed      	beq.n	8003108 <_dtoa_r+0xa58>
 800312c:	9a00      	ldr	r2, [sp, #0]
 800312e:	f108 0301 	add.w	r3, r8, #1
 8003132:	7013      	strb	r3, [r2, #0]
 8003134:	e608      	b.n	8002d48 <_dtoa_r+0x698>
 8003136:	9b07      	ldr	r3, [sp, #28]
 8003138:	9a07      	ldr	r2, [sp, #28]
 800313a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800313e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003140:	4293      	cmp	r3, r2
 8003142:	d028      	beq.n	8003196 <_dtoa_r+0xae6>
 8003144:	4649      	mov	r1, r9
 8003146:	2300      	movs	r3, #0
 8003148:	220a      	movs	r2, #10
 800314a:	4658      	mov	r0, fp
 800314c:	f000 f9d6 	bl	80034fc <__multadd>
 8003150:	42af      	cmp	r7, r5
 8003152:	4681      	mov	r9, r0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f04f 020a 	mov.w	r2, #10
 800315c:	4639      	mov	r1, r7
 800315e:	4658      	mov	r0, fp
 8003160:	d107      	bne.n	8003172 <_dtoa_r+0xac2>
 8003162:	f000 f9cb 	bl	80034fc <__multadd>
 8003166:	4607      	mov	r7, r0
 8003168:	4605      	mov	r5, r0
 800316a:	9b07      	ldr	r3, [sp, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	9307      	str	r3, [sp, #28]
 8003170:	e774      	b.n	800305c <_dtoa_r+0x9ac>
 8003172:	f000 f9c3 	bl	80034fc <__multadd>
 8003176:	4629      	mov	r1, r5
 8003178:	4607      	mov	r7, r0
 800317a:	2300      	movs	r3, #0
 800317c:	220a      	movs	r2, #10
 800317e:	4658      	mov	r0, fp
 8003180:	f000 f9bc 	bl	80034fc <__multadd>
 8003184:	4605      	mov	r5, r0
 8003186:	e7f0      	b.n	800316a <_dtoa_r+0xaba>
 8003188:	9b00      	ldr	r3, [sp, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	bfcc      	ite	gt
 800318e:	461e      	movgt	r6, r3
 8003190:	2601      	movle	r6, #1
 8003192:	4456      	add	r6, sl
 8003194:	2700      	movs	r7, #0
 8003196:	4649      	mov	r1, r9
 8003198:	2201      	movs	r2, #1
 800319a:	4658      	mov	r0, fp
 800319c:	f000 fb5a 	bl	8003854 <__lshift>
 80031a0:	4621      	mov	r1, r4
 80031a2:	4681      	mov	r9, r0
 80031a4:	f000 fbc2 	bl	800392c <__mcmp>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	dcb0      	bgt.n	800310e <_dtoa_r+0xa5e>
 80031ac:	d102      	bne.n	80031b4 <_dtoa_r+0xb04>
 80031ae:	f018 0f01 	tst.w	r8, #1
 80031b2:	d1ac      	bne.n	800310e <_dtoa_r+0xa5e>
 80031b4:	4633      	mov	r3, r6
 80031b6:	461e      	mov	r6, r3
 80031b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80031bc:	2a30      	cmp	r2, #48	@ 0x30
 80031be:	d0fa      	beq.n	80031b6 <_dtoa_r+0xb06>
 80031c0:	e5c2      	b.n	8002d48 <_dtoa_r+0x698>
 80031c2:	459a      	cmp	sl, r3
 80031c4:	d1a4      	bne.n	8003110 <_dtoa_r+0xa60>
 80031c6:	9b04      	ldr	r3, [sp, #16]
 80031c8:	3301      	adds	r3, #1
 80031ca:	9304      	str	r3, [sp, #16]
 80031cc:	2331      	movs	r3, #49	@ 0x31
 80031ce:	f88a 3000 	strb.w	r3, [sl]
 80031d2:	e5b9      	b.n	8002d48 <_dtoa_r+0x698>
 80031d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80031d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003234 <_dtoa_r+0xb84>
 80031da:	b11b      	cbz	r3, 80031e4 <_dtoa_r+0xb34>
 80031dc:	f10a 0308 	add.w	r3, sl, #8
 80031e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4650      	mov	r0, sl
 80031e6:	b019      	add	sp, #100	@ 0x64
 80031e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	f77f ae37 	ble.w	8002e62 <_dtoa_r+0x7b2>
 80031f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80031f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80031f8:	2001      	movs	r0, #1
 80031fa:	e655      	b.n	8002ea8 <_dtoa_r+0x7f8>
 80031fc:	9b00      	ldr	r3, [sp, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f77f aed6 	ble.w	8002fb0 <_dtoa_r+0x900>
 8003204:	4656      	mov	r6, sl
 8003206:	4621      	mov	r1, r4
 8003208:	4648      	mov	r0, r9
 800320a:	f7ff f9c6 	bl	800259a <quorem>
 800320e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003212:	f806 8b01 	strb.w	r8, [r6], #1
 8003216:	9b00      	ldr	r3, [sp, #0]
 8003218:	eba6 020a 	sub.w	r2, r6, sl
 800321c:	4293      	cmp	r3, r2
 800321e:	ddb3      	ble.n	8003188 <_dtoa_r+0xad8>
 8003220:	4649      	mov	r1, r9
 8003222:	2300      	movs	r3, #0
 8003224:	220a      	movs	r2, #10
 8003226:	4658      	mov	r0, fp
 8003228:	f000 f968 	bl	80034fc <__multadd>
 800322c:	4681      	mov	r9, r0
 800322e:	e7ea      	b.n	8003206 <_dtoa_r+0xb56>
 8003230:	0800472b 	.word	0x0800472b
 8003234:	080046af 	.word	0x080046af

08003238 <_free_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4605      	mov	r5, r0
 800323c:	2900      	cmp	r1, #0
 800323e:	d041      	beq.n	80032c4 <_free_r+0x8c>
 8003240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003244:	1f0c      	subs	r4, r1, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	bfb8      	it	lt
 800324a:	18e4      	addlt	r4, r4, r3
 800324c:	f000 f8e8 	bl	8003420 <__malloc_lock>
 8003250:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <_free_r+0x90>)
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	b933      	cbnz	r3, 8003264 <_free_r+0x2c>
 8003256:	6063      	str	r3, [r4, #4]
 8003258:	6014      	str	r4, [r2, #0]
 800325a:	4628      	mov	r0, r5
 800325c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003260:	f000 b8e4 	b.w	800342c <__malloc_unlock>
 8003264:	42a3      	cmp	r3, r4
 8003266:	d908      	bls.n	800327a <_free_r+0x42>
 8003268:	6820      	ldr	r0, [r4, #0]
 800326a:	1821      	adds	r1, r4, r0
 800326c:	428b      	cmp	r3, r1
 800326e:	bf01      	itttt	eq
 8003270:	6819      	ldreq	r1, [r3, #0]
 8003272:	685b      	ldreq	r3, [r3, #4]
 8003274:	1809      	addeq	r1, r1, r0
 8003276:	6021      	streq	r1, [r4, #0]
 8003278:	e7ed      	b.n	8003256 <_free_r+0x1e>
 800327a:	461a      	mov	r2, r3
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b10b      	cbz	r3, 8003284 <_free_r+0x4c>
 8003280:	42a3      	cmp	r3, r4
 8003282:	d9fa      	bls.n	800327a <_free_r+0x42>
 8003284:	6811      	ldr	r1, [r2, #0]
 8003286:	1850      	adds	r0, r2, r1
 8003288:	42a0      	cmp	r0, r4
 800328a:	d10b      	bne.n	80032a4 <_free_r+0x6c>
 800328c:	6820      	ldr	r0, [r4, #0]
 800328e:	4401      	add	r1, r0
 8003290:	1850      	adds	r0, r2, r1
 8003292:	4283      	cmp	r3, r0
 8003294:	6011      	str	r1, [r2, #0]
 8003296:	d1e0      	bne.n	800325a <_free_r+0x22>
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	6053      	str	r3, [r2, #4]
 800329e:	4408      	add	r0, r1
 80032a0:	6010      	str	r0, [r2, #0]
 80032a2:	e7da      	b.n	800325a <_free_r+0x22>
 80032a4:	d902      	bls.n	80032ac <_free_r+0x74>
 80032a6:	230c      	movs	r3, #12
 80032a8:	602b      	str	r3, [r5, #0]
 80032aa:	e7d6      	b.n	800325a <_free_r+0x22>
 80032ac:	6820      	ldr	r0, [r4, #0]
 80032ae:	1821      	adds	r1, r4, r0
 80032b0:	428b      	cmp	r3, r1
 80032b2:	bf04      	itt	eq
 80032b4:	6819      	ldreq	r1, [r3, #0]
 80032b6:	685b      	ldreq	r3, [r3, #4]
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	bf04      	itt	eq
 80032bc:	1809      	addeq	r1, r1, r0
 80032be:	6021      	streq	r1, [r4, #0]
 80032c0:	6054      	str	r4, [r2, #4]
 80032c2:	e7ca      	b.n	800325a <_free_r+0x22>
 80032c4:	bd38      	pop	{r3, r4, r5, pc}
 80032c6:	bf00      	nop
 80032c8:	2000034c 	.word	0x2000034c

080032cc <malloc>:
 80032cc:	4b02      	ldr	r3, [pc, #8]	@ (80032d8 <malloc+0xc>)
 80032ce:	4601      	mov	r1, r0
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	f000 b825 	b.w	8003320 <_malloc_r>
 80032d6:	bf00      	nop
 80032d8:	2000000c 	.word	0x2000000c

080032dc <sbrk_aligned>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	4e0f      	ldr	r6, [pc, #60]	@ (800331c <sbrk_aligned+0x40>)
 80032e0:	460c      	mov	r4, r1
 80032e2:	6831      	ldr	r1, [r6, #0]
 80032e4:	4605      	mov	r5, r0
 80032e6:	b911      	cbnz	r1, 80032ee <sbrk_aligned+0x12>
 80032e8:	f000 fe46 	bl	8003f78 <_sbrk_r>
 80032ec:	6030      	str	r0, [r6, #0]
 80032ee:	4621      	mov	r1, r4
 80032f0:	4628      	mov	r0, r5
 80032f2:	f000 fe41 	bl	8003f78 <_sbrk_r>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	d103      	bne.n	8003302 <sbrk_aligned+0x26>
 80032fa:	f04f 34ff 	mov.w	r4, #4294967295
 80032fe:	4620      	mov	r0, r4
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	1cc4      	adds	r4, r0, #3
 8003304:	f024 0403 	bic.w	r4, r4, #3
 8003308:	42a0      	cmp	r0, r4
 800330a:	d0f8      	beq.n	80032fe <sbrk_aligned+0x22>
 800330c:	1a21      	subs	r1, r4, r0
 800330e:	4628      	mov	r0, r5
 8003310:	f000 fe32 	bl	8003f78 <_sbrk_r>
 8003314:	3001      	adds	r0, #1
 8003316:	d1f2      	bne.n	80032fe <sbrk_aligned+0x22>
 8003318:	e7ef      	b.n	80032fa <sbrk_aligned+0x1e>
 800331a:	bf00      	nop
 800331c:	20000348 	.word	0x20000348

08003320 <_malloc_r>:
 8003320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003324:	1ccd      	adds	r5, r1, #3
 8003326:	f025 0503 	bic.w	r5, r5, #3
 800332a:	3508      	adds	r5, #8
 800332c:	2d0c      	cmp	r5, #12
 800332e:	bf38      	it	cc
 8003330:	250c      	movcc	r5, #12
 8003332:	2d00      	cmp	r5, #0
 8003334:	4606      	mov	r6, r0
 8003336:	db01      	blt.n	800333c <_malloc_r+0x1c>
 8003338:	42a9      	cmp	r1, r5
 800333a:	d904      	bls.n	8003346 <_malloc_r+0x26>
 800333c:	230c      	movs	r3, #12
 800333e:	6033      	str	r3, [r6, #0]
 8003340:	2000      	movs	r0, #0
 8003342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003346:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800341c <_malloc_r+0xfc>
 800334a:	f000 f869 	bl	8003420 <__malloc_lock>
 800334e:	f8d8 3000 	ldr.w	r3, [r8]
 8003352:	461c      	mov	r4, r3
 8003354:	bb44      	cbnz	r4, 80033a8 <_malloc_r+0x88>
 8003356:	4629      	mov	r1, r5
 8003358:	4630      	mov	r0, r6
 800335a:	f7ff ffbf 	bl	80032dc <sbrk_aligned>
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	4604      	mov	r4, r0
 8003362:	d158      	bne.n	8003416 <_malloc_r+0xf6>
 8003364:	f8d8 4000 	ldr.w	r4, [r8]
 8003368:	4627      	mov	r7, r4
 800336a:	2f00      	cmp	r7, #0
 800336c:	d143      	bne.n	80033f6 <_malloc_r+0xd6>
 800336e:	2c00      	cmp	r4, #0
 8003370:	d04b      	beq.n	800340a <_malloc_r+0xea>
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	4639      	mov	r1, r7
 8003376:	4630      	mov	r0, r6
 8003378:	eb04 0903 	add.w	r9, r4, r3
 800337c:	f000 fdfc 	bl	8003f78 <_sbrk_r>
 8003380:	4581      	cmp	r9, r0
 8003382:	d142      	bne.n	800340a <_malloc_r+0xea>
 8003384:	6821      	ldr	r1, [r4, #0]
 8003386:	1a6d      	subs	r5, r5, r1
 8003388:	4629      	mov	r1, r5
 800338a:	4630      	mov	r0, r6
 800338c:	f7ff ffa6 	bl	80032dc <sbrk_aligned>
 8003390:	3001      	adds	r0, #1
 8003392:	d03a      	beq.n	800340a <_malloc_r+0xea>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	442b      	add	r3, r5
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	f8d8 3000 	ldr.w	r3, [r8]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	bb62      	cbnz	r2, 80033fc <_malloc_r+0xdc>
 80033a2:	f8c8 7000 	str.w	r7, [r8]
 80033a6:	e00f      	b.n	80033c8 <_malloc_r+0xa8>
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	1b52      	subs	r2, r2, r5
 80033ac:	d420      	bmi.n	80033f0 <_malloc_r+0xd0>
 80033ae:	2a0b      	cmp	r2, #11
 80033b0:	d917      	bls.n	80033e2 <_malloc_r+0xc2>
 80033b2:	1961      	adds	r1, r4, r5
 80033b4:	42a3      	cmp	r3, r4
 80033b6:	6025      	str	r5, [r4, #0]
 80033b8:	bf18      	it	ne
 80033ba:	6059      	strne	r1, [r3, #4]
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	bf08      	it	eq
 80033c0:	f8c8 1000 	streq.w	r1, [r8]
 80033c4:	5162      	str	r2, [r4, r5]
 80033c6:	604b      	str	r3, [r1, #4]
 80033c8:	4630      	mov	r0, r6
 80033ca:	f000 f82f 	bl	800342c <__malloc_unlock>
 80033ce:	f104 000b 	add.w	r0, r4, #11
 80033d2:	1d23      	adds	r3, r4, #4
 80033d4:	f020 0007 	bic.w	r0, r0, #7
 80033d8:	1ac2      	subs	r2, r0, r3
 80033da:	bf1c      	itt	ne
 80033dc:	1a1b      	subne	r3, r3, r0
 80033de:	50a3      	strne	r3, [r4, r2]
 80033e0:	e7af      	b.n	8003342 <_malloc_r+0x22>
 80033e2:	6862      	ldr	r2, [r4, #4]
 80033e4:	42a3      	cmp	r3, r4
 80033e6:	bf0c      	ite	eq
 80033e8:	f8c8 2000 	streq.w	r2, [r8]
 80033ec:	605a      	strne	r2, [r3, #4]
 80033ee:	e7eb      	b.n	80033c8 <_malloc_r+0xa8>
 80033f0:	4623      	mov	r3, r4
 80033f2:	6864      	ldr	r4, [r4, #4]
 80033f4:	e7ae      	b.n	8003354 <_malloc_r+0x34>
 80033f6:	463c      	mov	r4, r7
 80033f8:	687f      	ldr	r7, [r7, #4]
 80033fa:	e7b6      	b.n	800336a <_malloc_r+0x4a>
 80033fc:	461a      	mov	r2, r3
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	42a3      	cmp	r3, r4
 8003402:	d1fb      	bne.n	80033fc <_malloc_r+0xdc>
 8003404:	2300      	movs	r3, #0
 8003406:	6053      	str	r3, [r2, #4]
 8003408:	e7de      	b.n	80033c8 <_malloc_r+0xa8>
 800340a:	230c      	movs	r3, #12
 800340c:	6033      	str	r3, [r6, #0]
 800340e:	4630      	mov	r0, r6
 8003410:	f000 f80c 	bl	800342c <__malloc_unlock>
 8003414:	e794      	b.n	8003340 <_malloc_r+0x20>
 8003416:	6005      	str	r5, [r0, #0]
 8003418:	e7d6      	b.n	80033c8 <_malloc_r+0xa8>
 800341a:	bf00      	nop
 800341c:	2000034c 	.word	0x2000034c

08003420 <__malloc_lock>:
 8003420:	4801      	ldr	r0, [pc, #4]	@ (8003428 <__malloc_lock+0x8>)
 8003422:	f7ff b8b8 	b.w	8002596 <__retarget_lock_acquire_recursive>
 8003426:	bf00      	nop
 8003428:	20000344 	.word	0x20000344

0800342c <__malloc_unlock>:
 800342c:	4801      	ldr	r0, [pc, #4]	@ (8003434 <__malloc_unlock+0x8>)
 800342e:	f7ff b8b3 	b.w	8002598 <__retarget_lock_release_recursive>
 8003432:	bf00      	nop
 8003434:	20000344 	.word	0x20000344

08003438 <_Balloc>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	69c6      	ldr	r6, [r0, #28]
 800343c:	4604      	mov	r4, r0
 800343e:	460d      	mov	r5, r1
 8003440:	b976      	cbnz	r6, 8003460 <_Balloc+0x28>
 8003442:	2010      	movs	r0, #16
 8003444:	f7ff ff42 	bl	80032cc <malloc>
 8003448:	4602      	mov	r2, r0
 800344a:	61e0      	str	r0, [r4, #28]
 800344c:	b920      	cbnz	r0, 8003458 <_Balloc+0x20>
 800344e:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <_Balloc+0x78>)
 8003450:	4818      	ldr	r0, [pc, #96]	@ (80034b4 <_Balloc+0x7c>)
 8003452:	216b      	movs	r1, #107	@ 0x6b
 8003454:	f000 fdae 	bl	8003fb4 <__assert_func>
 8003458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800345c:	6006      	str	r6, [r0, #0]
 800345e:	60c6      	str	r6, [r0, #12]
 8003460:	69e6      	ldr	r6, [r4, #28]
 8003462:	68f3      	ldr	r3, [r6, #12]
 8003464:	b183      	cbz	r3, 8003488 <_Balloc+0x50>
 8003466:	69e3      	ldr	r3, [r4, #28]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800346e:	b9b8      	cbnz	r0, 80034a0 <_Balloc+0x68>
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f605 	lsl.w	r6, r1, r5
 8003476:	1d72      	adds	r2, r6, #5
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	4620      	mov	r0, r4
 800347c:	f000 fdb8 	bl	8003ff0 <_calloc_r>
 8003480:	b160      	cbz	r0, 800349c <_Balloc+0x64>
 8003482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003486:	e00e      	b.n	80034a6 <_Balloc+0x6e>
 8003488:	2221      	movs	r2, #33	@ 0x21
 800348a:	2104      	movs	r1, #4
 800348c:	4620      	mov	r0, r4
 800348e:	f000 fdaf 	bl	8003ff0 <_calloc_r>
 8003492:	69e3      	ldr	r3, [r4, #28]
 8003494:	60f0      	str	r0, [r6, #12]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e4      	bne.n	8003466 <_Balloc+0x2e>
 800349c:	2000      	movs	r0, #0
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	6802      	ldr	r2, [r0, #0]
 80034a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80034a6:	2300      	movs	r3, #0
 80034a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80034ac:	e7f7      	b.n	800349e <_Balloc+0x66>
 80034ae:	bf00      	nop
 80034b0:	080046bc 	.word	0x080046bc
 80034b4:	0800473c 	.word	0x0800473c

080034b8 <_Bfree>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	69c6      	ldr	r6, [r0, #28]
 80034bc:	4605      	mov	r5, r0
 80034be:	460c      	mov	r4, r1
 80034c0:	b976      	cbnz	r6, 80034e0 <_Bfree+0x28>
 80034c2:	2010      	movs	r0, #16
 80034c4:	f7ff ff02 	bl	80032cc <malloc>
 80034c8:	4602      	mov	r2, r0
 80034ca:	61e8      	str	r0, [r5, #28]
 80034cc:	b920      	cbnz	r0, 80034d8 <_Bfree+0x20>
 80034ce:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <_Bfree+0x3c>)
 80034d0:	4809      	ldr	r0, [pc, #36]	@ (80034f8 <_Bfree+0x40>)
 80034d2:	218f      	movs	r1, #143	@ 0x8f
 80034d4:	f000 fd6e 	bl	8003fb4 <__assert_func>
 80034d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80034dc:	6006      	str	r6, [r0, #0]
 80034de:	60c6      	str	r6, [r0, #12]
 80034e0:	b13c      	cbz	r4, 80034f2 <_Bfree+0x3a>
 80034e2:	69eb      	ldr	r3, [r5, #28]
 80034e4:	6862      	ldr	r2, [r4, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034ec:	6021      	str	r1, [r4, #0]
 80034ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	080046bc 	.word	0x080046bc
 80034f8:	0800473c 	.word	0x0800473c

080034fc <__multadd>:
 80034fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003500:	690d      	ldr	r5, [r1, #16]
 8003502:	4607      	mov	r7, r0
 8003504:	460c      	mov	r4, r1
 8003506:	461e      	mov	r6, r3
 8003508:	f101 0c14 	add.w	ip, r1, #20
 800350c:	2000      	movs	r0, #0
 800350e:	f8dc 3000 	ldr.w	r3, [ip]
 8003512:	b299      	uxth	r1, r3
 8003514:	fb02 6101 	mla	r1, r2, r1, r6
 8003518:	0c1e      	lsrs	r6, r3, #16
 800351a:	0c0b      	lsrs	r3, r1, #16
 800351c:	fb02 3306 	mla	r3, r2, r6, r3
 8003520:	b289      	uxth	r1, r1
 8003522:	3001      	adds	r0, #1
 8003524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003528:	4285      	cmp	r5, r0
 800352a:	f84c 1b04 	str.w	r1, [ip], #4
 800352e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003532:	dcec      	bgt.n	800350e <__multadd+0x12>
 8003534:	b30e      	cbz	r6, 800357a <__multadd+0x7e>
 8003536:	68a3      	ldr	r3, [r4, #8]
 8003538:	42ab      	cmp	r3, r5
 800353a:	dc19      	bgt.n	8003570 <__multadd+0x74>
 800353c:	6861      	ldr	r1, [r4, #4]
 800353e:	4638      	mov	r0, r7
 8003540:	3101      	adds	r1, #1
 8003542:	f7ff ff79 	bl	8003438 <_Balloc>
 8003546:	4680      	mov	r8, r0
 8003548:	b928      	cbnz	r0, 8003556 <__multadd+0x5a>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0c      	ldr	r3, [pc, #48]	@ (8003580 <__multadd+0x84>)
 800354e:	480d      	ldr	r0, [pc, #52]	@ (8003584 <__multadd+0x88>)
 8003550:	21ba      	movs	r1, #186	@ 0xba
 8003552:	f000 fd2f 	bl	8003fb4 <__assert_func>
 8003556:	6922      	ldr	r2, [r4, #16]
 8003558:	3202      	adds	r2, #2
 800355a:	f104 010c 	add.w	r1, r4, #12
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	300c      	adds	r0, #12
 8003562:	f000 fd19 	bl	8003f98 <memcpy>
 8003566:	4621      	mov	r1, r4
 8003568:	4638      	mov	r0, r7
 800356a:	f7ff ffa5 	bl	80034b8 <_Bfree>
 800356e:	4644      	mov	r4, r8
 8003570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003574:	3501      	adds	r5, #1
 8003576:	615e      	str	r6, [r3, #20]
 8003578:	6125      	str	r5, [r4, #16]
 800357a:	4620      	mov	r0, r4
 800357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003580:	0800472b 	.word	0x0800472b
 8003584:	0800473c 	.word	0x0800473c

08003588 <__hi0bits>:
 8003588:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800358c:	4603      	mov	r3, r0
 800358e:	bf36      	itet	cc
 8003590:	0403      	lslcc	r3, r0, #16
 8003592:	2000      	movcs	r0, #0
 8003594:	2010      	movcc	r0, #16
 8003596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800359a:	bf3c      	itt	cc
 800359c:	021b      	lslcc	r3, r3, #8
 800359e:	3008      	addcc	r0, #8
 80035a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035a4:	bf3c      	itt	cc
 80035a6:	011b      	lslcc	r3, r3, #4
 80035a8:	3004      	addcc	r0, #4
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ae:	bf3c      	itt	cc
 80035b0:	009b      	lslcc	r3, r3, #2
 80035b2:	3002      	addcc	r0, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db05      	blt.n	80035c4 <__hi0bits+0x3c>
 80035b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80035bc:	f100 0001 	add.w	r0, r0, #1
 80035c0:	bf08      	it	eq
 80035c2:	2020      	moveq	r0, #32
 80035c4:	4770      	bx	lr

080035c6 <__lo0bits>:
 80035c6:	6803      	ldr	r3, [r0, #0]
 80035c8:	4602      	mov	r2, r0
 80035ca:	f013 0007 	ands.w	r0, r3, #7
 80035ce:	d00b      	beq.n	80035e8 <__lo0bits+0x22>
 80035d0:	07d9      	lsls	r1, r3, #31
 80035d2:	d421      	bmi.n	8003618 <__lo0bits+0x52>
 80035d4:	0798      	lsls	r0, r3, #30
 80035d6:	bf49      	itett	mi
 80035d8:	085b      	lsrmi	r3, r3, #1
 80035da:	089b      	lsrpl	r3, r3, #2
 80035dc:	2001      	movmi	r0, #1
 80035de:	6013      	strmi	r3, [r2, #0]
 80035e0:	bf5c      	itt	pl
 80035e2:	6013      	strpl	r3, [r2, #0]
 80035e4:	2002      	movpl	r0, #2
 80035e6:	4770      	bx	lr
 80035e8:	b299      	uxth	r1, r3
 80035ea:	b909      	cbnz	r1, 80035f0 <__lo0bits+0x2a>
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	2010      	movs	r0, #16
 80035f0:	b2d9      	uxtb	r1, r3
 80035f2:	b909      	cbnz	r1, 80035f8 <__lo0bits+0x32>
 80035f4:	3008      	adds	r0, #8
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	0719      	lsls	r1, r3, #28
 80035fa:	bf04      	itt	eq
 80035fc:	091b      	lsreq	r3, r3, #4
 80035fe:	3004      	addeq	r0, #4
 8003600:	0799      	lsls	r1, r3, #30
 8003602:	bf04      	itt	eq
 8003604:	089b      	lsreq	r3, r3, #2
 8003606:	3002      	addeq	r0, #2
 8003608:	07d9      	lsls	r1, r3, #31
 800360a:	d403      	bmi.n	8003614 <__lo0bits+0x4e>
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	f100 0001 	add.w	r0, r0, #1
 8003612:	d003      	beq.n	800361c <__lo0bits+0x56>
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4770      	bx	lr
 8003618:	2000      	movs	r0, #0
 800361a:	4770      	bx	lr
 800361c:	2020      	movs	r0, #32
 800361e:	4770      	bx	lr

08003620 <__i2b>:
 8003620:	b510      	push	{r4, lr}
 8003622:	460c      	mov	r4, r1
 8003624:	2101      	movs	r1, #1
 8003626:	f7ff ff07 	bl	8003438 <_Balloc>
 800362a:	4602      	mov	r2, r0
 800362c:	b928      	cbnz	r0, 800363a <__i2b+0x1a>
 800362e:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <__i2b+0x24>)
 8003630:	4805      	ldr	r0, [pc, #20]	@ (8003648 <__i2b+0x28>)
 8003632:	f240 1145 	movw	r1, #325	@ 0x145
 8003636:	f000 fcbd 	bl	8003fb4 <__assert_func>
 800363a:	2301      	movs	r3, #1
 800363c:	6144      	str	r4, [r0, #20]
 800363e:	6103      	str	r3, [r0, #16]
 8003640:	bd10      	pop	{r4, pc}
 8003642:	bf00      	nop
 8003644:	0800472b 	.word	0x0800472b
 8003648:	0800473c 	.word	0x0800473c

0800364c <__multiply>:
 800364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003650:	4614      	mov	r4, r2
 8003652:	690a      	ldr	r2, [r1, #16]
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	429a      	cmp	r2, r3
 8003658:	bfa8      	it	ge
 800365a:	4623      	movge	r3, r4
 800365c:	460f      	mov	r7, r1
 800365e:	bfa4      	itt	ge
 8003660:	460c      	movge	r4, r1
 8003662:	461f      	movge	r7, r3
 8003664:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003668:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800366c:	68a3      	ldr	r3, [r4, #8]
 800366e:	6861      	ldr	r1, [r4, #4]
 8003670:	eb0a 0609 	add.w	r6, sl, r9
 8003674:	42b3      	cmp	r3, r6
 8003676:	b085      	sub	sp, #20
 8003678:	bfb8      	it	lt
 800367a:	3101      	addlt	r1, #1
 800367c:	f7ff fedc 	bl	8003438 <_Balloc>
 8003680:	b930      	cbnz	r0, 8003690 <__multiply+0x44>
 8003682:	4602      	mov	r2, r0
 8003684:	4b44      	ldr	r3, [pc, #272]	@ (8003798 <__multiply+0x14c>)
 8003686:	4845      	ldr	r0, [pc, #276]	@ (800379c <__multiply+0x150>)
 8003688:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800368c:	f000 fc92 	bl	8003fb4 <__assert_func>
 8003690:	f100 0514 	add.w	r5, r0, #20
 8003694:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003698:	462b      	mov	r3, r5
 800369a:	2200      	movs	r2, #0
 800369c:	4543      	cmp	r3, r8
 800369e:	d321      	bcc.n	80036e4 <__multiply+0x98>
 80036a0:	f107 0114 	add.w	r1, r7, #20
 80036a4:	f104 0214 	add.w	r2, r4, #20
 80036a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80036ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80036b0:	9302      	str	r3, [sp, #8]
 80036b2:	1b13      	subs	r3, r2, r4
 80036b4:	3b15      	subs	r3, #21
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	3304      	adds	r3, #4
 80036bc:	f104 0715 	add.w	r7, r4, #21
 80036c0:	42ba      	cmp	r2, r7
 80036c2:	bf38      	it	cc
 80036c4:	2304      	movcc	r3, #4
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	9b02      	ldr	r3, [sp, #8]
 80036ca:	9103      	str	r1, [sp, #12]
 80036cc:	428b      	cmp	r3, r1
 80036ce:	d80c      	bhi.n	80036ea <__multiply+0x9e>
 80036d0:	2e00      	cmp	r6, #0
 80036d2:	dd03      	ble.n	80036dc <__multiply+0x90>
 80036d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d05b      	beq.n	8003794 <__multiply+0x148>
 80036dc:	6106      	str	r6, [r0, #16]
 80036de:	b005      	add	sp, #20
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e4:	f843 2b04 	str.w	r2, [r3], #4
 80036e8:	e7d8      	b.n	800369c <__multiply+0x50>
 80036ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80036ee:	f1ba 0f00 	cmp.w	sl, #0
 80036f2:	d024      	beq.n	800373e <__multiply+0xf2>
 80036f4:	f104 0e14 	add.w	lr, r4, #20
 80036f8:	46a9      	mov	r9, r5
 80036fa:	f04f 0c00 	mov.w	ip, #0
 80036fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003702:	f8d9 3000 	ldr.w	r3, [r9]
 8003706:	fa1f fb87 	uxth.w	fp, r7
 800370a:	b29b      	uxth	r3, r3
 800370c:	fb0a 330b 	mla	r3, sl, fp, r3
 8003710:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003714:	f8d9 7000 	ldr.w	r7, [r9]
 8003718:	4463      	add	r3, ip
 800371a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800371e:	fb0a c70b 	mla	r7, sl, fp, ip
 8003722:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003726:	b29b      	uxth	r3, r3
 8003728:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800372c:	4572      	cmp	r2, lr
 800372e:	f849 3b04 	str.w	r3, [r9], #4
 8003732:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003736:	d8e2      	bhi.n	80036fe <__multiply+0xb2>
 8003738:	9b01      	ldr	r3, [sp, #4]
 800373a:	f845 c003 	str.w	ip, [r5, r3]
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003744:	3104      	adds	r1, #4
 8003746:	f1b9 0f00 	cmp.w	r9, #0
 800374a:	d021      	beq.n	8003790 <__multiply+0x144>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	f104 0c14 	add.w	ip, r4, #20
 8003752:	46ae      	mov	lr, r5
 8003754:	f04f 0a00 	mov.w	sl, #0
 8003758:	f8bc b000 	ldrh.w	fp, [ip]
 800375c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003760:	fb09 770b 	mla	r7, r9, fp, r7
 8003764:	4457      	add	r7, sl
 8003766:	b29b      	uxth	r3, r3
 8003768:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800376c:	f84e 3b04 	str.w	r3, [lr], #4
 8003770:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003778:	f8be 3000 	ldrh.w	r3, [lr]
 800377c:	fb09 330a 	mla	r3, r9, sl, r3
 8003780:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003784:	4562      	cmp	r2, ip
 8003786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800378a:	d8e5      	bhi.n	8003758 <__multiply+0x10c>
 800378c:	9f01      	ldr	r7, [sp, #4]
 800378e:	51eb      	str	r3, [r5, r7]
 8003790:	3504      	adds	r5, #4
 8003792:	e799      	b.n	80036c8 <__multiply+0x7c>
 8003794:	3e01      	subs	r6, #1
 8003796:	e79b      	b.n	80036d0 <__multiply+0x84>
 8003798:	0800472b 	.word	0x0800472b
 800379c:	0800473c 	.word	0x0800473c

080037a0 <__pow5mult>:
 80037a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037a4:	4615      	mov	r5, r2
 80037a6:	f012 0203 	ands.w	r2, r2, #3
 80037aa:	4607      	mov	r7, r0
 80037ac:	460e      	mov	r6, r1
 80037ae:	d007      	beq.n	80037c0 <__pow5mult+0x20>
 80037b0:	4c25      	ldr	r4, [pc, #148]	@ (8003848 <__pow5mult+0xa8>)
 80037b2:	3a01      	subs	r2, #1
 80037b4:	2300      	movs	r3, #0
 80037b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80037ba:	f7ff fe9f 	bl	80034fc <__multadd>
 80037be:	4606      	mov	r6, r0
 80037c0:	10ad      	asrs	r5, r5, #2
 80037c2:	d03d      	beq.n	8003840 <__pow5mult+0xa0>
 80037c4:	69fc      	ldr	r4, [r7, #28]
 80037c6:	b97c      	cbnz	r4, 80037e8 <__pow5mult+0x48>
 80037c8:	2010      	movs	r0, #16
 80037ca:	f7ff fd7f 	bl	80032cc <malloc>
 80037ce:	4602      	mov	r2, r0
 80037d0:	61f8      	str	r0, [r7, #28]
 80037d2:	b928      	cbnz	r0, 80037e0 <__pow5mult+0x40>
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <__pow5mult+0xac>)
 80037d6:	481e      	ldr	r0, [pc, #120]	@ (8003850 <__pow5mult+0xb0>)
 80037d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80037dc:	f000 fbea 	bl	8003fb4 <__assert_func>
 80037e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80037e4:	6004      	str	r4, [r0, #0]
 80037e6:	60c4      	str	r4, [r0, #12]
 80037e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80037ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80037f0:	b94c      	cbnz	r4, 8003806 <__pow5mult+0x66>
 80037f2:	f240 2171 	movw	r1, #625	@ 0x271
 80037f6:	4638      	mov	r0, r7
 80037f8:	f7ff ff12 	bl	8003620 <__i2b>
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8003802:	4604      	mov	r4, r0
 8003804:	6003      	str	r3, [r0, #0]
 8003806:	f04f 0900 	mov.w	r9, #0
 800380a:	07eb      	lsls	r3, r5, #31
 800380c:	d50a      	bpl.n	8003824 <__pow5mult+0x84>
 800380e:	4631      	mov	r1, r6
 8003810:	4622      	mov	r2, r4
 8003812:	4638      	mov	r0, r7
 8003814:	f7ff ff1a 	bl	800364c <__multiply>
 8003818:	4631      	mov	r1, r6
 800381a:	4680      	mov	r8, r0
 800381c:	4638      	mov	r0, r7
 800381e:	f7ff fe4b 	bl	80034b8 <_Bfree>
 8003822:	4646      	mov	r6, r8
 8003824:	106d      	asrs	r5, r5, #1
 8003826:	d00b      	beq.n	8003840 <__pow5mult+0xa0>
 8003828:	6820      	ldr	r0, [r4, #0]
 800382a:	b938      	cbnz	r0, 800383c <__pow5mult+0x9c>
 800382c:	4622      	mov	r2, r4
 800382e:	4621      	mov	r1, r4
 8003830:	4638      	mov	r0, r7
 8003832:	f7ff ff0b 	bl	800364c <__multiply>
 8003836:	6020      	str	r0, [r4, #0]
 8003838:	f8c0 9000 	str.w	r9, [r0]
 800383c:	4604      	mov	r4, r0
 800383e:	e7e4      	b.n	800380a <__pow5mult+0x6a>
 8003840:	4630      	mov	r0, r6
 8003842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003846:	bf00      	nop
 8003848:	08004798 	.word	0x08004798
 800384c:	080046bc 	.word	0x080046bc
 8003850:	0800473c 	.word	0x0800473c

08003854 <__lshift>:
 8003854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	460c      	mov	r4, r1
 800385a:	6849      	ldr	r1, [r1, #4]
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003862:	68a3      	ldr	r3, [r4, #8]
 8003864:	4607      	mov	r7, r0
 8003866:	4691      	mov	r9, r2
 8003868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800386c:	f108 0601 	add.w	r6, r8, #1
 8003870:	42b3      	cmp	r3, r6
 8003872:	db0b      	blt.n	800388c <__lshift+0x38>
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff fddf 	bl	8003438 <_Balloc>
 800387a:	4605      	mov	r5, r0
 800387c:	b948      	cbnz	r0, 8003892 <__lshift+0x3e>
 800387e:	4602      	mov	r2, r0
 8003880:	4b28      	ldr	r3, [pc, #160]	@ (8003924 <__lshift+0xd0>)
 8003882:	4829      	ldr	r0, [pc, #164]	@ (8003928 <__lshift+0xd4>)
 8003884:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003888:	f000 fb94 	bl	8003fb4 <__assert_func>
 800388c:	3101      	adds	r1, #1
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	e7ee      	b.n	8003870 <__lshift+0x1c>
 8003892:	2300      	movs	r3, #0
 8003894:	f100 0114 	add.w	r1, r0, #20
 8003898:	f100 0210 	add.w	r2, r0, #16
 800389c:	4618      	mov	r0, r3
 800389e:	4553      	cmp	r3, sl
 80038a0:	db33      	blt.n	800390a <__lshift+0xb6>
 80038a2:	6920      	ldr	r0, [r4, #16]
 80038a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80038a8:	f104 0314 	add.w	r3, r4, #20
 80038ac:	f019 091f 	ands.w	r9, r9, #31
 80038b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80038b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80038b8:	d02b      	beq.n	8003912 <__lshift+0xbe>
 80038ba:	f1c9 0e20 	rsb	lr, r9, #32
 80038be:	468a      	mov	sl, r1
 80038c0:	2200      	movs	r2, #0
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	fa00 f009 	lsl.w	r0, r0, r9
 80038c8:	4310      	orrs	r0, r2
 80038ca:	f84a 0b04 	str.w	r0, [sl], #4
 80038ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80038d2:	459c      	cmp	ip, r3
 80038d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80038d8:	d8f3      	bhi.n	80038c2 <__lshift+0x6e>
 80038da:	ebac 0304 	sub.w	r3, ip, r4
 80038de:	3b15      	subs	r3, #21
 80038e0:	f023 0303 	bic.w	r3, r3, #3
 80038e4:	3304      	adds	r3, #4
 80038e6:	f104 0015 	add.w	r0, r4, #21
 80038ea:	4584      	cmp	ip, r0
 80038ec:	bf38      	it	cc
 80038ee:	2304      	movcc	r3, #4
 80038f0:	50ca      	str	r2, [r1, r3]
 80038f2:	b10a      	cbz	r2, 80038f8 <__lshift+0xa4>
 80038f4:	f108 0602 	add.w	r6, r8, #2
 80038f8:	3e01      	subs	r6, #1
 80038fa:	4638      	mov	r0, r7
 80038fc:	612e      	str	r6, [r5, #16]
 80038fe:	4621      	mov	r1, r4
 8003900:	f7ff fdda 	bl	80034b8 <_Bfree>
 8003904:	4628      	mov	r0, r5
 8003906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390a:	f842 0f04 	str.w	r0, [r2, #4]!
 800390e:	3301      	adds	r3, #1
 8003910:	e7c5      	b.n	800389e <__lshift+0x4a>
 8003912:	3904      	subs	r1, #4
 8003914:	f853 2b04 	ldr.w	r2, [r3], #4
 8003918:	f841 2f04 	str.w	r2, [r1, #4]!
 800391c:	459c      	cmp	ip, r3
 800391e:	d8f9      	bhi.n	8003914 <__lshift+0xc0>
 8003920:	e7ea      	b.n	80038f8 <__lshift+0xa4>
 8003922:	bf00      	nop
 8003924:	0800472b 	.word	0x0800472b
 8003928:	0800473c 	.word	0x0800473c

0800392c <__mcmp>:
 800392c:	690a      	ldr	r2, [r1, #16]
 800392e:	4603      	mov	r3, r0
 8003930:	6900      	ldr	r0, [r0, #16]
 8003932:	1a80      	subs	r0, r0, r2
 8003934:	b530      	push	{r4, r5, lr}
 8003936:	d10e      	bne.n	8003956 <__mcmp+0x2a>
 8003938:	3314      	adds	r3, #20
 800393a:	3114      	adds	r1, #20
 800393c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003940:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003944:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003948:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800394c:	4295      	cmp	r5, r2
 800394e:	d003      	beq.n	8003958 <__mcmp+0x2c>
 8003950:	d205      	bcs.n	800395e <__mcmp+0x32>
 8003952:	f04f 30ff 	mov.w	r0, #4294967295
 8003956:	bd30      	pop	{r4, r5, pc}
 8003958:	42a3      	cmp	r3, r4
 800395a:	d3f3      	bcc.n	8003944 <__mcmp+0x18>
 800395c:	e7fb      	b.n	8003956 <__mcmp+0x2a>
 800395e:	2001      	movs	r0, #1
 8003960:	e7f9      	b.n	8003956 <__mcmp+0x2a>
	...

08003964 <__mdiff>:
 8003964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003968:	4689      	mov	r9, r1
 800396a:	4606      	mov	r6, r0
 800396c:	4611      	mov	r1, r2
 800396e:	4648      	mov	r0, r9
 8003970:	4614      	mov	r4, r2
 8003972:	f7ff ffdb 	bl	800392c <__mcmp>
 8003976:	1e05      	subs	r5, r0, #0
 8003978:	d112      	bne.n	80039a0 <__mdiff+0x3c>
 800397a:	4629      	mov	r1, r5
 800397c:	4630      	mov	r0, r6
 800397e:	f7ff fd5b 	bl	8003438 <_Balloc>
 8003982:	4602      	mov	r2, r0
 8003984:	b928      	cbnz	r0, 8003992 <__mdiff+0x2e>
 8003986:	4b3f      	ldr	r3, [pc, #252]	@ (8003a84 <__mdiff+0x120>)
 8003988:	f240 2137 	movw	r1, #567	@ 0x237
 800398c:	483e      	ldr	r0, [pc, #248]	@ (8003a88 <__mdiff+0x124>)
 800398e:	f000 fb11 	bl	8003fb4 <__assert_func>
 8003992:	2301      	movs	r3, #1
 8003994:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003998:	4610      	mov	r0, r2
 800399a:	b003      	add	sp, #12
 800399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a0:	bfbc      	itt	lt
 80039a2:	464b      	movlt	r3, r9
 80039a4:	46a1      	movlt	r9, r4
 80039a6:	4630      	mov	r0, r6
 80039a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80039ac:	bfba      	itte	lt
 80039ae:	461c      	movlt	r4, r3
 80039b0:	2501      	movlt	r5, #1
 80039b2:	2500      	movge	r5, #0
 80039b4:	f7ff fd40 	bl	8003438 <_Balloc>
 80039b8:	4602      	mov	r2, r0
 80039ba:	b918      	cbnz	r0, 80039c4 <__mdiff+0x60>
 80039bc:	4b31      	ldr	r3, [pc, #196]	@ (8003a84 <__mdiff+0x120>)
 80039be:	f240 2145 	movw	r1, #581	@ 0x245
 80039c2:	e7e3      	b.n	800398c <__mdiff+0x28>
 80039c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80039c8:	6926      	ldr	r6, [r4, #16]
 80039ca:	60c5      	str	r5, [r0, #12]
 80039cc:	f109 0310 	add.w	r3, r9, #16
 80039d0:	f109 0514 	add.w	r5, r9, #20
 80039d4:	f104 0e14 	add.w	lr, r4, #20
 80039d8:	f100 0b14 	add.w	fp, r0, #20
 80039dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80039e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	46d9      	mov	r9, fp
 80039e8:	f04f 0c00 	mov.w	ip, #0
 80039ec:	9b01      	ldr	r3, [sp, #4]
 80039ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80039f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	fa1f f38a 	uxth.w	r3, sl
 80039fc:	4619      	mov	r1, r3
 80039fe:	b283      	uxth	r3, r0
 8003a00:	1acb      	subs	r3, r1, r3
 8003a02:	0c00      	lsrs	r0, r0, #16
 8003a04:	4463      	add	r3, ip
 8003a06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8003a0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003a14:	4576      	cmp	r6, lr
 8003a16:	f849 3b04 	str.w	r3, [r9], #4
 8003a1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003a1e:	d8e5      	bhi.n	80039ec <__mdiff+0x88>
 8003a20:	1b33      	subs	r3, r6, r4
 8003a22:	3b15      	subs	r3, #21
 8003a24:	f023 0303 	bic.w	r3, r3, #3
 8003a28:	3415      	adds	r4, #21
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	42a6      	cmp	r6, r4
 8003a2e:	bf38      	it	cc
 8003a30:	2304      	movcc	r3, #4
 8003a32:	441d      	add	r5, r3
 8003a34:	445b      	add	r3, fp
 8003a36:	461e      	mov	r6, r3
 8003a38:	462c      	mov	r4, r5
 8003a3a:	4544      	cmp	r4, r8
 8003a3c:	d30e      	bcc.n	8003a5c <__mdiff+0xf8>
 8003a3e:	f108 0103 	add.w	r1, r8, #3
 8003a42:	1b49      	subs	r1, r1, r5
 8003a44:	f021 0103 	bic.w	r1, r1, #3
 8003a48:	3d03      	subs	r5, #3
 8003a4a:	45a8      	cmp	r8, r5
 8003a4c:	bf38      	it	cc
 8003a4e:	2100      	movcc	r1, #0
 8003a50:	440b      	add	r3, r1
 8003a52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003a56:	b191      	cbz	r1, 8003a7e <__mdiff+0x11a>
 8003a58:	6117      	str	r7, [r2, #16]
 8003a5a:	e79d      	b.n	8003998 <__mdiff+0x34>
 8003a5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8003a60:	46e6      	mov	lr, ip
 8003a62:	0c08      	lsrs	r0, r1, #16
 8003a64:	fa1c fc81 	uxtah	ip, ip, r1
 8003a68:	4471      	add	r1, lr
 8003a6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003a6e:	b289      	uxth	r1, r1
 8003a70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003a74:	f846 1b04 	str.w	r1, [r6], #4
 8003a78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003a7c:	e7dd      	b.n	8003a3a <__mdiff+0xd6>
 8003a7e:	3f01      	subs	r7, #1
 8003a80:	e7e7      	b.n	8003a52 <__mdiff+0xee>
 8003a82:	bf00      	nop
 8003a84:	0800472b 	.word	0x0800472b
 8003a88:	0800473c 	.word	0x0800473c

08003a8c <__d2b>:
 8003a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a90:	460f      	mov	r7, r1
 8003a92:	2101      	movs	r1, #1
 8003a94:	ec59 8b10 	vmov	r8, r9, d0
 8003a98:	4616      	mov	r6, r2
 8003a9a:	f7ff fccd 	bl	8003438 <_Balloc>
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	b930      	cbnz	r0, 8003ab0 <__d2b+0x24>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b23      	ldr	r3, [pc, #140]	@ (8003b34 <__d2b+0xa8>)
 8003aa6:	4824      	ldr	r0, [pc, #144]	@ (8003b38 <__d2b+0xac>)
 8003aa8:	f240 310f 	movw	r1, #783	@ 0x30f
 8003aac:	f000 fa82 	bl	8003fb4 <__assert_func>
 8003ab0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003ab4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003ab8:	b10d      	cbz	r5, 8003abe <__d2b+0x32>
 8003aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	f1b8 0300 	subs.w	r3, r8, #0
 8003ac4:	d023      	beq.n	8003b0e <__d2b+0x82>
 8003ac6:	4668      	mov	r0, sp
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	f7ff fd7c 	bl	80035c6 <__lo0bits>
 8003ace:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003ad2:	b1d0      	cbz	r0, 8003b0a <__d2b+0x7e>
 8003ad4:	f1c0 0320 	rsb	r3, r0, #32
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	430b      	orrs	r3, r1
 8003ade:	40c2      	lsrs	r2, r0
 8003ae0:	6163      	str	r3, [r4, #20]
 8003ae2:	9201      	str	r2, [sp, #4]
 8003ae4:	9b01      	ldr	r3, [sp, #4]
 8003ae6:	61a3      	str	r3, [r4, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2201      	moveq	r2, #1
 8003aee:	2202      	movne	r2, #2
 8003af0:	6122      	str	r2, [r4, #16]
 8003af2:	b1a5      	cbz	r5, 8003b1e <__d2b+0x92>
 8003af4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8003af8:	4405      	add	r5, r0
 8003afa:	603d      	str	r5, [r7, #0]
 8003afc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003b00:	6030      	str	r0, [r6, #0]
 8003b02:	4620      	mov	r0, r4
 8003b04:	b003      	add	sp, #12
 8003b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b0a:	6161      	str	r1, [r4, #20]
 8003b0c:	e7ea      	b.n	8003ae4 <__d2b+0x58>
 8003b0e:	a801      	add	r0, sp, #4
 8003b10:	f7ff fd59 	bl	80035c6 <__lo0bits>
 8003b14:	9b01      	ldr	r3, [sp, #4]
 8003b16:	6163      	str	r3, [r4, #20]
 8003b18:	3020      	adds	r0, #32
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	e7e8      	b.n	8003af0 <__d2b+0x64>
 8003b1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003b22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8003b26:	6038      	str	r0, [r7, #0]
 8003b28:	6918      	ldr	r0, [r3, #16]
 8003b2a:	f7ff fd2d 	bl	8003588 <__hi0bits>
 8003b2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003b32:	e7e5      	b.n	8003b00 <__d2b+0x74>
 8003b34:	0800472b 	.word	0x0800472b
 8003b38:	0800473c 	.word	0x0800473c

08003b3c <__ssputs_r>:
 8003b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b40:	688e      	ldr	r6, [r1, #8]
 8003b42:	461f      	mov	r7, r3
 8003b44:	42be      	cmp	r6, r7
 8003b46:	680b      	ldr	r3, [r1, #0]
 8003b48:	4682      	mov	sl, r0
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	4690      	mov	r8, r2
 8003b4e:	d82d      	bhi.n	8003bac <__ssputs_r+0x70>
 8003b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b58:	d026      	beq.n	8003ba8 <__ssputs_r+0x6c>
 8003b5a:	6965      	ldr	r5, [r4, #20]
 8003b5c:	6909      	ldr	r1, [r1, #16]
 8003b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b62:	eba3 0901 	sub.w	r9, r3, r1
 8003b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b6a:	1c7b      	adds	r3, r7, #1
 8003b6c:	444b      	add	r3, r9
 8003b6e:	106d      	asrs	r5, r5, #1
 8003b70:	429d      	cmp	r5, r3
 8003b72:	bf38      	it	cc
 8003b74:	461d      	movcc	r5, r3
 8003b76:	0553      	lsls	r3, r2, #21
 8003b78:	d527      	bpl.n	8003bca <__ssputs_r+0x8e>
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	f7ff fbd0 	bl	8003320 <_malloc_r>
 8003b80:	4606      	mov	r6, r0
 8003b82:	b360      	cbz	r0, 8003bde <__ssputs_r+0xa2>
 8003b84:	6921      	ldr	r1, [r4, #16]
 8003b86:	464a      	mov	r2, r9
 8003b88:	f000 fa06 	bl	8003f98 <memcpy>
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	6126      	str	r6, [r4, #16]
 8003b9a:	6165      	str	r5, [r4, #20]
 8003b9c:	444e      	add	r6, r9
 8003b9e:	eba5 0509 	sub.w	r5, r5, r9
 8003ba2:	6026      	str	r6, [r4, #0]
 8003ba4:	60a5      	str	r5, [r4, #8]
 8003ba6:	463e      	mov	r6, r7
 8003ba8:	42be      	cmp	r6, r7
 8003baa:	d900      	bls.n	8003bae <__ssputs_r+0x72>
 8003bac:	463e      	mov	r6, r7
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	f000 f9c6 	bl	8003f44 <memmove>
 8003bb8:	68a3      	ldr	r3, [r4, #8]
 8003bba:	1b9b      	subs	r3, r3, r6
 8003bbc:	60a3      	str	r3, [r4, #8]
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	4433      	add	r3, r6
 8003bc2:	6023      	str	r3, [r4, #0]
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bca:	462a      	mov	r2, r5
 8003bcc:	f000 fa36 	bl	800403c <_realloc_r>
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d1e0      	bne.n	8003b98 <__ssputs_r+0x5c>
 8003bd6:	6921      	ldr	r1, [r4, #16]
 8003bd8:	4650      	mov	r0, sl
 8003bda:	f7ff fb2d 	bl	8003238 <_free_r>
 8003bde:	230c      	movs	r3, #12
 8003be0:	f8ca 3000 	str.w	r3, [sl]
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	e7e9      	b.n	8003bc6 <__ssputs_r+0x8a>
	...

08003bf4 <_svfiprintf_r>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	4698      	mov	r8, r3
 8003bfa:	898b      	ldrh	r3, [r1, #12]
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	b09d      	sub	sp, #116	@ 0x74
 8003c00:	4607      	mov	r7, r0
 8003c02:	460d      	mov	r5, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	d510      	bpl.n	8003c2a <_svfiprintf_r+0x36>
 8003c08:	690b      	ldr	r3, [r1, #16]
 8003c0a:	b973      	cbnz	r3, 8003c2a <_svfiprintf_r+0x36>
 8003c0c:	2140      	movs	r1, #64	@ 0x40
 8003c0e:	f7ff fb87 	bl	8003320 <_malloc_r>
 8003c12:	6028      	str	r0, [r5, #0]
 8003c14:	6128      	str	r0, [r5, #16]
 8003c16:	b930      	cbnz	r0, 8003c26 <_svfiprintf_r+0x32>
 8003c18:	230c      	movs	r3, #12
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	b01d      	add	sp, #116	@ 0x74
 8003c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c26:	2340      	movs	r3, #64	@ 0x40
 8003c28:	616b      	str	r3, [r5, #20]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c2e:	2320      	movs	r3, #32
 8003c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c38:	2330      	movs	r3, #48	@ 0x30
 8003c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003dd8 <_svfiprintf_r+0x1e4>
 8003c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c42:	f04f 0901 	mov.w	r9, #1
 8003c46:	4623      	mov	r3, r4
 8003c48:	469a      	mov	sl, r3
 8003c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c4e:	b10a      	cbz	r2, 8003c54 <_svfiprintf_r+0x60>
 8003c50:	2a25      	cmp	r2, #37	@ 0x25
 8003c52:	d1f9      	bne.n	8003c48 <_svfiprintf_r+0x54>
 8003c54:	ebba 0b04 	subs.w	fp, sl, r4
 8003c58:	d00b      	beq.n	8003c72 <_svfiprintf_r+0x7e>
 8003c5a:	465b      	mov	r3, fp
 8003c5c:	4622      	mov	r2, r4
 8003c5e:	4629      	mov	r1, r5
 8003c60:	4638      	mov	r0, r7
 8003c62:	f7ff ff6b 	bl	8003b3c <__ssputs_r>
 8003c66:	3001      	adds	r0, #1
 8003c68:	f000 80a7 	beq.w	8003dba <_svfiprintf_r+0x1c6>
 8003c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c6e:	445a      	add	r2, fp
 8003c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c72:	f89a 3000 	ldrb.w	r3, [sl]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 809f 	beq.w	8003dba <_svfiprintf_r+0x1c6>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c86:	f10a 0a01 	add.w	sl, sl, #1
 8003c8a:	9304      	str	r3, [sp, #16]
 8003c8c:	9307      	str	r3, [sp, #28]
 8003c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c94:	4654      	mov	r4, sl
 8003c96:	2205      	movs	r2, #5
 8003c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9c:	484e      	ldr	r0, [pc, #312]	@ (8003dd8 <_svfiprintf_r+0x1e4>)
 8003c9e:	f7fc fa9f 	bl	80001e0 <memchr>
 8003ca2:	9a04      	ldr	r2, [sp, #16]
 8003ca4:	b9d8      	cbnz	r0, 8003cde <_svfiprintf_r+0xea>
 8003ca6:	06d0      	lsls	r0, r2, #27
 8003ca8:	bf44      	itt	mi
 8003caa:	2320      	movmi	r3, #32
 8003cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cb0:	0711      	lsls	r1, r2, #28
 8003cb2:	bf44      	itt	mi
 8003cb4:	232b      	movmi	r3, #43	@ 0x2b
 8003cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cba:	f89a 3000 	ldrb.w	r3, [sl]
 8003cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc0:	d015      	beq.n	8003cee <_svfiprintf_r+0xfa>
 8003cc2:	9a07      	ldr	r2, [sp, #28]
 8003cc4:	4654      	mov	r4, sl
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f04f 0c0a 	mov.w	ip, #10
 8003ccc:	4621      	mov	r1, r4
 8003cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd2:	3b30      	subs	r3, #48	@ 0x30
 8003cd4:	2b09      	cmp	r3, #9
 8003cd6:	d94b      	bls.n	8003d70 <_svfiprintf_r+0x17c>
 8003cd8:	b1b0      	cbz	r0, 8003d08 <_svfiprintf_r+0x114>
 8003cda:	9207      	str	r2, [sp, #28]
 8003cdc:	e014      	b.n	8003d08 <_svfiprintf_r+0x114>
 8003cde:	eba0 0308 	sub.w	r3, r0, r8
 8003ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	9304      	str	r3, [sp, #16]
 8003cea:	46a2      	mov	sl, r4
 8003cec:	e7d2      	b.n	8003c94 <_svfiprintf_r+0xa0>
 8003cee:	9b03      	ldr	r3, [sp, #12]
 8003cf0:	1d19      	adds	r1, r3, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	9103      	str	r1, [sp, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bfbb      	ittet	lt
 8003cfa:	425b      	neglt	r3, r3
 8003cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8003d00:	9307      	strge	r3, [sp, #28]
 8003d02:	9307      	strlt	r3, [sp, #28]
 8003d04:	bfb8      	it	lt
 8003d06:	9204      	strlt	r2, [sp, #16]
 8003d08:	7823      	ldrb	r3, [r4, #0]
 8003d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d0c:	d10a      	bne.n	8003d24 <_svfiprintf_r+0x130>
 8003d0e:	7863      	ldrb	r3, [r4, #1]
 8003d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d12:	d132      	bne.n	8003d7a <_svfiprintf_r+0x186>
 8003d14:	9b03      	ldr	r3, [sp, #12]
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	9203      	str	r2, [sp, #12]
 8003d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d20:	3402      	adds	r4, #2
 8003d22:	9305      	str	r3, [sp, #20]
 8003d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003de8 <_svfiprintf_r+0x1f4>
 8003d28:	7821      	ldrb	r1, [r4, #0]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	4650      	mov	r0, sl
 8003d2e:	f7fc fa57 	bl	80001e0 <memchr>
 8003d32:	b138      	cbz	r0, 8003d44 <_svfiprintf_r+0x150>
 8003d34:	9b04      	ldr	r3, [sp, #16]
 8003d36:	eba0 000a 	sub.w	r0, r0, sl
 8003d3a:	2240      	movs	r2, #64	@ 0x40
 8003d3c:	4082      	lsls	r2, r0
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	3401      	adds	r4, #1
 8003d42:	9304      	str	r3, [sp, #16]
 8003d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d48:	4824      	ldr	r0, [pc, #144]	@ (8003ddc <_svfiprintf_r+0x1e8>)
 8003d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d4e:	2206      	movs	r2, #6
 8003d50:	f7fc fa46 	bl	80001e0 <memchr>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d036      	beq.n	8003dc6 <_svfiprintf_r+0x1d2>
 8003d58:	4b21      	ldr	r3, [pc, #132]	@ (8003de0 <_svfiprintf_r+0x1ec>)
 8003d5a:	bb1b      	cbnz	r3, 8003da4 <_svfiprintf_r+0x1b0>
 8003d5c:	9b03      	ldr	r3, [sp, #12]
 8003d5e:	3307      	adds	r3, #7
 8003d60:	f023 0307 	bic.w	r3, r3, #7
 8003d64:	3308      	adds	r3, #8
 8003d66:	9303      	str	r3, [sp, #12]
 8003d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d6a:	4433      	add	r3, r6
 8003d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d6e:	e76a      	b.n	8003c46 <_svfiprintf_r+0x52>
 8003d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d74:	460c      	mov	r4, r1
 8003d76:	2001      	movs	r0, #1
 8003d78:	e7a8      	b.n	8003ccc <_svfiprintf_r+0xd8>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	3401      	adds	r4, #1
 8003d7e:	9305      	str	r3, [sp, #20]
 8003d80:	4619      	mov	r1, r3
 8003d82:	f04f 0c0a 	mov.w	ip, #10
 8003d86:	4620      	mov	r0, r4
 8003d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d8c:	3a30      	subs	r2, #48	@ 0x30
 8003d8e:	2a09      	cmp	r2, #9
 8003d90:	d903      	bls.n	8003d9a <_svfiprintf_r+0x1a6>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0c6      	beq.n	8003d24 <_svfiprintf_r+0x130>
 8003d96:	9105      	str	r1, [sp, #20]
 8003d98:	e7c4      	b.n	8003d24 <_svfiprintf_r+0x130>
 8003d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d9e:	4604      	mov	r4, r0
 8003da0:	2301      	movs	r3, #1
 8003da2:	e7f0      	b.n	8003d86 <_svfiprintf_r+0x192>
 8003da4:	ab03      	add	r3, sp, #12
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	462a      	mov	r2, r5
 8003daa:	4b0e      	ldr	r3, [pc, #56]	@ (8003de4 <_svfiprintf_r+0x1f0>)
 8003dac:	a904      	add	r1, sp, #16
 8003dae:	4638      	mov	r0, r7
 8003db0:	f7fd fe96 	bl	8001ae0 <_printf_float>
 8003db4:	1c42      	adds	r2, r0, #1
 8003db6:	4606      	mov	r6, r0
 8003db8:	d1d6      	bne.n	8003d68 <_svfiprintf_r+0x174>
 8003dba:	89ab      	ldrh	r3, [r5, #12]
 8003dbc:	065b      	lsls	r3, r3, #25
 8003dbe:	f53f af2d 	bmi.w	8003c1c <_svfiprintf_r+0x28>
 8003dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dc4:	e72c      	b.n	8003c20 <_svfiprintf_r+0x2c>
 8003dc6:	ab03      	add	r3, sp, #12
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	462a      	mov	r2, r5
 8003dcc:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <_svfiprintf_r+0x1f0>)
 8003dce:	a904      	add	r1, sp, #16
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f7fe f91d 	bl	8002010 <_printf_i>
 8003dd6:	e7ed      	b.n	8003db4 <_svfiprintf_r+0x1c0>
 8003dd8:	08004898 	.word	0x08004898
 8003ddc:	080048a2 	.word	0x080048a2
 8003de0:	08001ae1 	.word	0x08001ae1
 8003de4:	08003b3d 	.word	0x08003b3d
 8003de8:	0800489e 	.word	0x0800489e

08003dec <__sflush_r>:
 8003dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df4:	0716      	lsls	r6, r2, #28
 8003df6:	4605      	mov	r5, r0
 8003df8:	460c      	mov	r4, r1
 8003dfa:	d454      	bmi.n	8003ea6 <__sflush_r+0xba>
 8003dfc:	684b      	ldr	r3, [r1, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	dc02      	bgt.n	8003e08 <__sflush_r+0x1c>
 8003e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	dd48      	ble.n	8003e9a <__sflush_r+0xae>
 8003e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e0a:	2e00      	cmp	r6, #0
 8003e0c:	d045      	beq.n	8003e9a <__sflush_r+0xae>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e14:	682f      	ldr	r7, [r5, #0]
 8003e16:	6a21      	ldr	r1, [r4, #32]
 8003e18:	602b      	str	r3, [r5, #0]
 8003e1a:	d030      	beq.n	8003e7e <__sflush_r+0x92>
 8003e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	0759      	lsls	r1, r3, #29
 8003e22:	d505      	bpl.n	8003e30 <__sflush_r+0x44>
 8003e24:	6863      	ldr	r3, [r4, #4]
 8003e26:	1ad2      	subs	r2, r2, r3
 8003e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e2a:	b10b      	cbz	r3, 8003e30 <__sflush_r+0x44>
 8003e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	2300      	movs	r3, #0
 8003e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e34:	6a21      	ldr	r1, [r4, #32]
 8003e36:	4628      	mov	r0, r5
 8003e38:	47b0      	blx	r6
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	d106      	bne.n	8003e4e <__sflush_r+0x62>
 8003e40:	6829      	ldr	r1, [r5, #0]
 8003e42:	291d      	cmp	r1, #29
 8003e44:	d82b      	bhi.n	8003e9e <__sflush_r+0xb2>
 8003e46:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef0 <__sflush_r+0x104>)
 8003e48:	410a      	asrs	r2, r1
 8003e4a:	07d6      	lsls	r6, r2, #31
 8003e4c:	d427      	bmi.n	8003e9e <__sflush_r+0xb2>
 8003e4e:	2200      	movs	r2, #0
 8003e50:	6062      	str	r2, [r4, #4]
 8003e52:	04d9      	lsls	r1, r3, #19
 8003e54:	6922      	ldr	r2, [r4, #16]
 8003e56:	6022      	str	r2, [r4, #0]
 8003e58:	d504      	bpl.n	8003e64 <__sflush_r+0x78>
 8003e5a:	1c42      	adds	r2, r0, #1
 8003e5c:	d101      	bne.n	8003e62 <__sflush_r+0x76>
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	b903      	cbnz	r3, 8003e64 <__sflush_r+0x78>
 8003e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e66:	602f      	str	r7, [r5, #0]
 8003e68:	b1b9      	cbz	r1, 8003e9a <__sflush_r+0xae>
 8003e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e6e:	4299      	cmp	r1, r3
 8003e70:	d002      	beq.n	8003e78 <__sflush_r+0x8c>
 8003e72:	4628      	mov	r0, r5
 8003e74:	f7ff f9e0 	bl	8003238 <_free_r>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e7c:	e00d      	b.n	8003e9a <__sflush_r+0xae>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4628      	mov	r0, r5
 8003e82:	47b0      	blx	r6
 8003e84:	4602      	mov	r2, r0
 8003e86:	1c50      	adds	r0, r2, #1
 8003e88:	d1c9      	bne.n	8003e1e <__sflush_r+0x32>
 8003e8a:	682b      	ldr	r3, [r5, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0c6      	beq.n	8003e1e <__sflush_r+0x32>
 8003e90:	2b1d      	cmp	r3, #29
 8003e92:	d001      	beq.n	8003e98 <__sflush_r+0xac>
 8003e94:	2b16      	cmp	r3, #22
 8003e96:	d11e      	bne.n	8003ed6 <__sflush_r+0xea>
 8003e98:	602f      	str	r7, [r5, #0]
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e022      	b.n	8003ee4 <__sflush_r+0xf8>
 8003e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ea2:	b21b      	sxth	r3, r3
 8003ea4:	e01b      	b.n	8003ede <__sflush_r+0xf2>
 8003ea6:	690f      	ldr	r7, [r1, #16]
 8003ea8:	2f00      	cmp	r7, #0
 8003eaa:	d0f6      	beq.n	8003e9a <__sflush_r+0xae>
 8003eac:	0793      	lsls	r3, r2, #30
 8003eae:	680e      	ldr	r6, [r1, #0]
 8003eb0:	bf08      	it	eq
 8003eb2:	694b      	ldreq	r3, [r1, #20]
 8003eb4:	600f      	str	r7, [r1, #0]
 8003eb6:	bf18      	it	ne
 8003eb8:	2300      	movne	r3, #0
 8003eba:	eba6 0807 	sub.w	r8, r6, r7
 8003ebe:	608b      	str	r3, [r1, #8]
 8003ec0:	f1b8 0f00 	cmp.w	r8, #0
 8003ec4:	dde9      	ble.n	8003e9a <__sflush_r+0xae>
 8003ec6:	6a21      	ldr	r1, [r4, #32]
 8003ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003eca:	4643      	mov	r3, r8
 8003ecc:	463a      	mov	r2, r7
 8003ece:	4628      	mov	r0, r5
 8003ed0:	47b0      	blx	r6
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	dc08      	bgt.n	8003ee8 <__sflush_r+0xfc>
 8003ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee8:	4407      	add	r7, r0
 8003eea:	eba8 0800 	sub.w	r8, r8, r0
 8003eee:	e7e7      	b.n	8003ec0 <__sflush_r+0xd4>
 8003ef0:	dfbffffe 	.word	0xdfbffffe

08003ef4 <_fflush_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	4605      	mov	r5, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	b913      	cbnz	r3, 8003f04 <_fflush_r+0x10>
 8003efe:	2500      	movs	r5, #0
 8003f00:	4628      	mov	r0, r5
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	b118      	cbz	r0, 8003f0e <_fflush_r+0x1a>
 8003f06:	6a03      	ldr	r3, [r0, #32]
 8003f08:	b90b      	cbnz	r3, 8003f0e <_fflush_r+0x1a>
 8003f0a:	f7fe fa2d 	bl	8002368 <__sinit>
 8003f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f3      	beq.n	8003efe <_fflush_r+0xa>
 8003f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f18:	07d0      	lsls	r0, r2, #31
 8003f1a:	d404      	bmi.n	8003f26 <_fflush_r+0x32>
 8003f1c:	0599      	lsls	r1, r3, #22
 8003f1e:	d402      	bmi.n	8003f26 <_fflush_r+0x32>
 8003f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f22:	f7fe fb38 	bl	8002596 <__retarget_lock_acquire_recursive>
 8003f26:	4628      	mov	r0, r5
 8003f28:	4621      	mov	r1, r4
 8003f2a:	f7ff ff5f 	bl	8003dec <__sflush_r>
 8003f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f30:	07da      	lsls	r2, r3, #31
 8003f32:	4605      	mov	r5, r0
 8003f34:	d4e4      	bmi.n	8003f00 <_fflush_r+0xc>
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	059b      	lsls	r3, r3, #22
 8003f3a:	d4e1      	bmi.n	8003f00 <_fflush_r+0xc>
 8003f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f3e:	f7fe fb2b 	bl	8002598 <__retarget_lock_release_recursive>
 8003f42:	e7dd      	b.n	8003f00 <_fflush_r+0xc>

08003f44 <memmove>:
 8003f44:	4288      	cmp	r0, r1
 8003f46:	b510      	push	{r4, lr}
 8003f48:	eb01 0402 	add.w	r4, r1, r2
 8003f4c:	d902      	bls.n	8003f54 <memmove+0x10>
 8003f4e:	4284      	cmp	r4, r0
 8003f50:	4623      	mov	r3, r4
 8003f52:	d807      	bhi.n	8003f64 <memmove+0x20>
 8003f54:	1e43      	subs	r3, r0, #1
 8003f56:	42a1      	cmp	r1, r4
 8003f58:	d008      	beq.n	8003f6c <memmove+0x28>
 8003f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f62:	e7f8      	b.n	8003f56 <memmove+0x12>
 8003f64:	4402      	add	r2, r0
 8003f66:	4601      	mov	r1, r0
 8003f68:	428a      	cmp	r2, r1
 8003f6a:	d100      	bne.n	8003f6e <memmove+0x2a>
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f76:	e7f7      	b.n	8003f68 <memmove+0x24>

08003f78 <_sbrk_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4d06      	ldr	r5, [pc, #24]	@ (8003f94 <_sbrk_r+0x1c>)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	f7fd f9c4 	bl	8001310 <_sbrk>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_sbrk_r+0x1a>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_sbrk_r+0x1a>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	20000340 	.word	0x20000340

08003f98 <memcpy>:
 8003f98:	440a      	add	r2, r1
 8003f9a:	4291      	cmp	r1, r2
 8003f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fa0:	d100      	bne.n	8003fa4 <memcpy+0xc>
 8003fa2:	4770      	bx	lr
 8003fa4:	b510      	push	{r4, lr}
 8003fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fae:	4291      	cmp	r1, r2
 8003fb0:	d1f9      	bne.n	8003fa6 <memcpy+0xe>
 8003fb2:	bd10      	pop	{r4, pc}

08003fb4 <__assert_func>:
 8003fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003fb6:	4614      	mov	r4, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <__assert_func+0x2c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	68d8      	ldr	r0, [r3, #12]
 8003fc2:	b954      	cbnz	r4, 8003fda <__assert_func+0x26>
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <__assert_func+0x30>)
 8003fc6:	461c      	mov	r4, r3
 8003fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003fcc:	9100      	str	r1, [sp, #0]
 8003fce:	462b      	mov	r3, r5
 8003fd0:	4905      	ldr	r1, [pc, #20]	@ (8003fe8 <__assert_func+0x34>)
 8003fd2:	f000 f86f 	bl	80040b4 <fiprintf>
 8003fd6:	f000 f87f 	bl	80040d8 <abort>
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <__assert_func+0x38>)
 8003fdc:	e7f4      	b.n	8003fc8 <__assert_func+0x14>
 8003fde:	bf00      	nop
 8003fe0:	2000000c 	.word	0x2000000c
 8003fe4:	080048ee 	.word	0x080048ee
 8003fe8:	080048c0 	.word	0x080048c0
 8003fec:	080048b3 	.word	0x080048b3

08003ff0 <_calloc_r>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	fba1 5402 	umull	r5, r4, r1, r2
 8003ff6:	b93c      	cbnz	r4, 8004008 <_calloc_r+0x18>
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	f7ff f991 	bl	8003320 <_malloc_r>
 8003ffe:	4606      	mov	r6, r0
 8004000:	b928      	cbnz	r0, 800400e <_calloc_r+0x1e>
 8004002:	2600      	movs	r6, #0
 8004004:	4630      	mov	r0, r6
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	220c      	movs	r2, #12
 800400a:	6002      	str	r2, [r0, #0]
 800400c:	e7f9      	b.n	8004002 <_calloc_r+0x12>
 800400e:	462a      	mov	r2, r5
 8004010:	4621      	mov	r1, r4
 8004012:	f7fe fa43 	bl	800249c <memset>
 8004016:	e7f5      	b.n	8004004 <_calloc_r+0x14>

08004018 <__ascii_mbtowc>:
 8004018:	b082      	sub	sp, #8
 800401a:	b901      	cbnz	r1, 800401e <__ascii_mbtowc+0x6>
 800401c:	a901      	add	r1, sp, #4
 800401e:	b142      	cbz	r2, 8004032 <__ascii_mbtowc+0x1a>
 8004020:	b14b      	cbz	r3, 8004036 <__ascii_mbtowc+0x1e>
 8004022:	7813      	ldrb	r3, [r2, #0]
 8004024:	600b      	str	r3, [r1, #0]
 8004026:	7812      	ldrb	r2, [r2, #0]
 8004028:	1e10      	subs	r0, r2, #0
 800402a:	bf18      	it	ne
 800402c:	2001      	movne	r0, #1
 800402e:	b002      	add	sp, #8
 8004030:	4770      	bx	lr
 8004032:	4610      	mov	r0, r2
 8004034:	e7fb      	b.n	800402e <__ascii_mbtowc+0x16>
 8004036:	f06f 0001 	mvn.w	r0, #1
 800403a:	e7f8      	b.n	800402e <__ascii_mbtowc+0x16>

0800403c <_realloc_r>:
 800403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004040:	4680      	mov	r8, r0
 8004042:	4615      	mov	r5, r2
 8004044:	460c      	mov	r4, r1
 8004046:	b921      	cbnz	r1, 8004052 <_realloc_r+0x16>
 8004048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800404c:	4611      	mov	r1, r2
 800404e:	f7ff b967 	b.w	8003320 <_malloc_r>
 8004052:	b92a      	cbnz	r2, 8004060 <_realloc_r+0x24>
 8004054:	f7ff f8f0 	bl	8003238 <_free_r>
 8004058:	2400      	movs	r4, #0
 800405a:	4620      	mov	r0, r4
 800405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004060:	f000 f841 	bl	80040e6 <_malloc_usable_size_r>
 8004064:	4285      	cmp	r5, r0
 8004066:	4606      	mov	r6, r0
 8004068:	d802      	bhi.n	8004070 <_realloc_r+0x34>
 800406a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800406e:	d8f4      	bhi.n	800405a <_realloc_r+0x1e>
 8004070:	4629      	mov	r1, r5
 8004072:	4640      	mov	r0, r8
 8004074:	f7ff f954 	bl	8003320 <_malloc_r>
 8004078:	4607      	mov	r7, r0
 800407a:	2800      	cmp	r0, #0
 800407c:	d0ec      	beq.n	8004058 <_realloc_r+0x1c>
 800407e:	42b5      	cmp	r5, r6
 8004080:	462a      	mov	r2, r5
 8004082:	4621      	mov	r1, r4
 8004084:	bf28      	it	cs
 8004086:	4632      	movcs	r2, r6
 8004088:	f7ff ff86 	bl	8003f98 <memcpy>
 800408c:	4621      	mov	r1, r4
 800408e:	4640      	mov	r0, r8
 8004090:	f7ff f8d2 	bl	8003238 <_free_r>
 8004094:	463c      	mov	r4, r7
 8004096:	e7e0      	b.n	800405a <_realloc_r+0x1e>

08004098 <__ascii_wctomb>:
 8004098:	4603      	mov	r3, r0
 800409a:	4608      	mov	r0, r1
 800409c:	b141      	cbz	r1, 80040b0 <__ascii_wctomb+0x18>
 800409e:	2aff      	cmp	r2, #255	@ 0xff
 80040a0:	d904      	bls.n	80040ac <__ascii_wctomb+0x14>
 80040a2:	228a      	movs	r2, #138	@ 0x8a
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f04f 30ff 	mov.w	r0, #4294967295
 80040aa:	4770      	bx	lr
 80040ac:	700a      	strb	r2, [r1, #0]
 80040ae:	2001      	movs	r0, #1
 80040b0:	4770      	bx	lr
	...

080040b4 <fiprintf>:
 80040b4:	b40e      	push	{r1, r2, r3}
 80040b6:	b503      	push	{r0, r1, lr}
 80040b8:	4601      	mov	r1, r0
 80040ba:	ab03      	add	r3, sp, #12
 80040bc:	4805      	ldr	r0, [pc, #20]	@ (80040d4 <fiprintf+0x20>)
 80040be:	f853 2b04 	ldr.w	r2, [r3], #4
 80040c2:	6800      	ldr	r0, [r0, #0]
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	f000 f83f 	bl	8004148 <_vfiprintf_r>
 80040ca:	b002      	add	sp, #8
 80040cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80040d0:	b003      	add	sp, #12
 80040d2:	4770      	bx	lr
 80040d4:	2000000c 	.word	0x2000000c

080040d8 <abort>:
 80040d8:	b508      	push	{r3, lr}
 80040da:	2006      	movs	r0, #6
 80040dc:	f000 fa08 	bl	80044f0 <raise>
 80040e0:	2001      	movs	r0, #1
 80040e2:	f7fd f89d 	bl	8001220 <_exit>

080040e6 <_malloc_usable_size_r>:
 80040e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ea:	1f18      	subs	r0, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bfbc      	itt	lt
 80040f0:	580b      	ldrlt	r3, [r1, r0]
 80040f2:	18c0      	addlt	r0, r0, r3
 80040f4:	4770      	bx	lr

080040f6 <__sfputc_r>:
 80040f6:	6893      	ldr	r3, [r2, #8]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	b410      	push	{r4}
 80040fe:	6093      	str	r3, [r2, #8]
 8004100:	da08      	bge.n	8004114 <__sfputc_r+0x1e>
 8004102:	6994      	ldr	r4, [r2, #24]
 8004104:	42a3      	cmp	r3, r4
 8004106:	db01      	blt.n	800410c <__sfputc_r+0x16>
 8004108:	290a      	cmp	r1, #10
 800410a:	d103      	bne.n	8004114 <__sfputc_r+0x1e>
 800410c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004110:	f000 b932 	b.w	8004378 <__swbuf_r>
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	1c58      	adds	r0, r3, #1
 8004118:	6010      	str	r0, [r2, #0]
 800411a:	7019      	strb	r1, [r3, #0]
 800411c:	4608      	mov	r0, r1
 800411e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004122:	4770      	bx	lr

08004124 <__sfputs_r>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	4606      	mov	r6, r0
 8004128:	460f      	mov	r7, r1
 800412a:	4614      	mov	r4, r2
 800412c:	18d5      	adds	r5, r2, r3
 800412e:	42ac      	cmp	r4, r5
 8004130:	d101      	bne.n	8004136 <__sfputs_r+0x12>
 8004132:	2000      	movs	r0, #0
 8004134:	e007      	b.n	8004146 <__sfputs_r+0x22>
 8004136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413a:	463a      	mov	r2, r7
 800413c:	4630      	mov	r0, r6
 800413e:	f7ff ffda 	bl	80040f6 <__sfputc_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d1f3      	bne.n	800412e <__sfputs_r+0xa>
 8004146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004148 <_vfiprintf_r>:
 8004148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414c:	460d      	mov	r5, r1
 800414e:	b09d      	sub	sp, #116	@ 0x74
 8004150:	4614      	mov	r4, r2
 8004152:	4698      	mov	r8, r3
 8004154:	4606      	mov	r6, r0
 8004156:	b118      	cbz	r0, 8004160 <_vfiprintf_r+0x18>
 8004158:	6a03      	ldr	r3, [r0, #32]
 800415a:	b90b      	cbnz	r3, 8004160 <_vfiprintf_r+0x18>
 800415c:	f7fe f904 	bl	8002368 <__sinit>
 8004160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004162:	07d9      	lsls	r1, r3, #31
 8004164:	d405      	bmi.n	8004172 <_vfiprintf_r+0x2a>
 8004166:	89ab      	ldrh	r3, [r5, #12]
 8004168:	059a      	lsls	r2, r3, #22
 800416a:	d402      	bmi.n	8004172 <_vfiprintf_r+0x2a>
 800416c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800416e:	f7fe fa12 	bl	8002596 <__retarget_lock_acquire_recursive>
 8004172:	89ab      	ldrh	r3, [r5, #12]
 8004174:	071b      	lsls	r3, r3, #28
 8004176:	d501      	bpl.n	800417c <_vfiprintf_r+0x34>
 8004178:	692b      	ldr	r3, [r5, #16]
 800417a:	b99b      	cbnz	r3, 80041a4 <_vfiprintf_r+0x5c>
 800417c:	4629      	mov	r1, r5
 800417e:	4630      	mov	r0, r6
 8004180:	f000 f938 	bl	80043f4 <__swsetup_r>
 8004184:	b170      	cbz	r0, 80041a4 <_vfiprintf_r+0x5c>
 8004186:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004188:	07dc      	lsls	r4, r3, #31
 800418a:	d504      	bpl.n	8004196 <_vfiprintf_r+0x4e>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	b01d      	add	sp, #116	@ 0x74
 8004192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	0598      	lsls	r0, r3, #22
 800419a:	d4f7      	bmi.n	800418c <_vfiprintf_r+0x44>
 800419c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800419e:	f7fe f9fb 	bl	8002598 <__retarget_lock_release_recursive>
 80041a2:	e7f3      	b.n	800418c <_vfiprintf_r+0x44>
 80041a4:	2300      	movs	r3, #0
 80041a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80041a8:	2320      	movs	r3, #32
 80041aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b2:	2330      	movs	r3, #48	@ 0x30
 80041b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004364 <_vfiprintf_r+0x21c>
 80041b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041bc:	f04f 0901 	mov.w	r9, #1
 80041c0:	4623      	mov	r3, r4
 80041c2:	469a      	mov	sl, r3
 80041c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c8:	b10a      	cbz	r2, 80041ce <_vfiprintf_r+0x86>
 80041ca:	2a25      	cmp	r2, #37	@ 0x25
 80041cc:	d1f9      	bne.n	80041c2 <_vfiprintf_r+0x7a>
 80041ce:	ebba 0b04 	subs.w	fp, sl, r4
 80041d2:	d00b      	beq.n	80041ec <_vfiprintf_r+0xa4>
 80041d4:	465b      	mov	r3, fp
 80041d6:	4622      	mov	r2, r4
 80041d8:	4629      	mov	r1, r5
 80041da:	4630      	mov	r0, r6
 80041dc:	f7ff ffa2 	bl	8004124 <__sfputs_r>
 80041e0:	3001      	adds	r0, #1
 80041e2:	f000 80a7 	beq.w	8004334 <_vfiprintf_r+0x1ec>
 80041e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041e8:	445a      	add	r2, fp
 80041ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80041ec:	f89a 3000 	ldrb.w	r3, [sl]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 809f 	beq.w	8004334 <_vfiprintf_r+0x1ec>
 80041f6:	2300      	movs	r3, #0
 80041f8:	f04f 32ff 	mov.w	r2, #4294967295
 80041fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004200:	f10a 0a01 	add.w	sl, sl, #1
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	9307      	str	r3, [sp, #28]
 8004208:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800420c:	931a      	str	r3, [sp, #104]	@ 0x68
 800420e:	4654      	mov	r4, sl
 8004210:	2205      	movs	r2, #5
 8004212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004216:	4853      	ldr	r0, [pc, #332]	@ (8004364 <_vfiprintf_r+0x21c>)
 8004218:	f7fb ffe2 	bl	80001e0 <memchr>
 800421c:	9a04      	ldr	r2, [sp, #16]
 800421e:	b9d8      	cbnz	r0, 8004258 <_vfiprintf_r+0x110>
 8004220:	06d1      	lsls	r1, r2, #27
 8004222:	bf44      	itt	mi
 8004224:	2320      	movmi	r3, #32
 8004226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800422a:	0713      	lsls	r3, r2, #28
 800422c:	bf44      	itt	mi
 800422e:	232b      	movmi	r3, #43	@ 0x2b
 8004230:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004234:	f89a 3000 	ldrb.w	r3, [sl]
 8004238:	2b2a      	cmp	r3, #42	@ 0x2a
 800423a:	d015      	beq.n	8004268 <_vfiprintf_r+0x120>
 800423c:	9a07      	ldr	r2, [sp, #28]
 800423e:	4654      	mov	r4, sl
 8004240:	2000      	movs	r0, #0
 8004242:	f04f 0c0a 	mov.w	ip, #10
 8004246:	4621      	mov	r1, r4
 8004248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800424c:	3b30      	subs	r3, #48	@ 0x30
 800424e:	2b09      	cmp	r3, #9
 8004250:	d94b      	bls.n	80042ea <_vfiprintf_r+0x1a2>
 8004252:	b1b0      	cbz	r0, 8004282 <_vfiprintf_r+0x13a>
 8004254:	9207      	str	r2, [sp, #28]
 8004256:	e014      	b.n	8004282 <_vfiprintf_r+0x13a>
 8004258:	eba0 0308 	sub.w	r3, r0, r8
 800425c:	fa09 f303 	lsl.w	r3, r9, r3
 8004260:	4313      	orrs	r3, r2
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	46a2      	mov	sl, r4
 8004266:	e7d2      	b.n	800420e <_vfiprintf_r+0xc6>
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	1d19      	adds	r1, r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	9103      	str	r1, [sp, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	bfbb      	ittet	lt
 8004274:	425b      	neglt	r3, r3
 8004276:	f042 0202 	orrlt.w	r2, r2, #2
 800427a:	9307      	strge	r3, [sp, #28]
 800427c:	9307      	strlt	r3, [sp, #28]
 800427e:	bfb8      	it	lt
 8004280:	9204      	strlt	r2, [sp, #16]
 8004282:	7823      	ldrb	r3, [r4, #0]
 8004284:	2b2e      	cmp	r3, #46	@ 0x2e
 8004286:	d10a      	bne.n	800429e <_vfiprintf_r+0x156>
 8004288:	7863      	ldrb	r3, [r4, #1]
 800428a:	2b2a      	cmp	r3, #42	@ 0x2a
 800428c:	d132      	bne.n	80042f4 <_vfiprintf_r+0x1ac>
 800428e:	9b03      	ldr	r3, [sp, #12]
 8004290:	1d1a      	adds	r2, r3, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	9203      	str	r2, [sp, #12]
 8004296:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800429a:	3402      	adds	r4, #2
 800429c:	9305      	str	r3, [sp, #20]
 800429e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004374 <_vfiprintf_r+0x22c>
 80042a2:	7821      	ldrb	r1, [r4, #0]
 80042a4:	2203      	movs	r2, #3
 80042a6:	4650      	mov	r0, sl
 80042a8:	f7fb ff9a 	bl	80001e0 <memchr>
 80042ac:	b138      	cbz	r0, 80042be <_vfiprintf_r+0x176>
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	eba0 000a 	sub.w	r0, r0, sl
 80042b4:	2240      	movs	r2, #64	@ 0x40
 80042b6:	4082      	lsls	r2, r0
 80042b8:	4313      	orrs	r3, r2
 80042ba:	3401      	adds	r4, #1
 80042bc:	9304      	str	r3, [sp, #16]
 80042be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c2:	4829      	ldr	r0, [pc, #164]	@ (8004368 <_vfiprintf_r+0x220>)
 80042c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042c8:	2206      	movs	r2, #6
 80042ca:	f7fb ff89 	bl	80001e0 <memchr>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d03f      	beq.n	8004352 <_vfiprintf_r+0x20a>
 80042d2:	4b26      	ldr	r3, [pc, #152]	@ (800436c <_vfiprintf_r+0x224>)
 80042d4:	bb1b      	cbnz	r3, 800431e <_vfiprintf_r+0x1d6>
 80042d6:	9b03      	ldr	r3, [sp, #12]
 80042d8:	3307      	adds	r3, #7
 80042da:	f023 0307 	bic.w	r3, r3, #7
 80042de:	3308      	adds	r3, #8
 80042e0:	9303      	str	r3, [sp, #12]
 80042e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e4:	443b      	add	r3, r7
 80042e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e8:	e76a      	b.n	80041c0 <_vfiprintf_r+0x78>
 80042ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ee:	460c      	mov	r4, r1
 80042f0:	2001      	movs	r0, #1
 80042f2:	e7a8      	b.n	8004246 <_vfiprintf_r+0xfe>
 80042f4:	2300      	movs	r3, #0
 80042f6:	3401      	adds	r4, #1
 80042f8:	9305      	str	r3, [sp, #20]
 80042fa:	4619      	mov	r1, r3
 80042fc:	f04f 0c0a 	mov.w	ip, #10
 8004300:	4620      	mov	r0, r4
 8004302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004306:	3a30      	subs	r2, #48	@ 0x30
 8004308:	2a09      	cmp	r2, #9
 800430a:	d903      	bls.n	8004314 <_vfiprintf_r+0x1cc>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0c6      	beq.n	800429e <_vfiprintf_r+0x156>
 8004310:	9105      	str	r1, [sp, #20]
 8004312:	e7c4      	b.n	800429e <_vfiprintf_r+0x156>
 8004314:	fb0c 2101 	mla	r1, ip, r1, r2
 8004318:	4604      	mov	r4, r0
 800431a:	2301      	movs	r3, #1
 800431c:	e7f0      	b.n	8004300 <_vfiprintf_r+0x1b8>
 800431e:	ab03      	add	r3, sp, #12
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	462a      	mov	r2, r5
 8004324:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <_vfiprintf_r+0x228>)
 8004326:	a904      	add	r1, sp, #16
 8004328:	4630      	mov	r0, r6
 800432a:	f7fd fbd9 	bl	8001ae0 <_printf_float>
 800432e:	4607      	mov	r7, r0
 8004330:	1c78      	adds	r0, r7, #1
 8004332:	d1d6      	bne.n	80042e2 <_vfiprintf_r+0x19a>
 8004334:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004336:	07d9      	lsls	r1, r3, #31
 8004338:	d405      	bmi.n	8004346 <_vfiprintf_r+0x1fe>
 800433a:	89ab      	ldrh	r3, [r5, #12]
 800433c:	059a      	lsls	r2, r3, #22
 800433e:	d402      	bmi.n	8004346 <_vfiprintf_r+0x1fe>
 8004340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004342:	f7fe f929 	bl	8002598 <__retarget_lock_release_recursive>
 8004346:	89ab      	ldrh	r3, [r5, #12]
 8004348:	065b      	lsls	r3, r3, #25
 800434a:	f53f af1f 	bmi.w	800418c <_vfiprintf_r+0x44>
 800434e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004350:	e71e      	b.n	8004190 <_vfiprintf_r+0x48>
 8004352:	ab03      	add	r3, sp, #12
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	462a      	mov	r2, r5
 8004358:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <_vfiprintf_r+0x228>)
 800435a:	a904      	add	r1, sp, #16
 800435c:	4630      	mov	r0, r6
 800435e:	f7fd fe57 	bl	8002010 <_printf_i>
 8004362:	e7e4      	b.n	800432e <_vfiprintf_r+0x1e6>
 8004364:	08004898 	.word	0x08004898
 8004368:	080048a2 	.word	0x080048a2
 800436c:	08001ae1 	.word	0x08001ae1
 8004370:	08004125 	.word	0x08004125
 8004374:	0800489e 	.word	0x0800489e

08004378 <__swbuf_r>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	460e      	mov	r6, r1
 800437c:	4614      	mov	r4, r2
 800437e:	4605      	mov	r5, r0
 8004380:	b118      	cbz	r0, 800438a <__swbuf_r+0x12>
 8004382:	6a03      	ldr	r3, [r0, #32]
 8004384:	b90b      	cbnz	r3, 800438a <__swbuf_r+0x12>
 8004386:	f7fd ffef 	bl	8002368 <__sinit>
 800438a:	69a3      	ldr	r3, [r4, #24]
 800438c:	60a3      	str	r3, [r4, #8]
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	071a      	lsls	r2, r3, #28
 8004392:	d501      	bpl.n	8004398 <__swbuf_r+0x20>
 8004394:	6923      	ldr	r3, [r4, #16]
 8004396:	b943      	cbnz	r3, 80043aa <__swbuf_r+0x32>
 8004398:	4621      	mov	r1, r4
 800439a:	4628      	mov	r0, r5
 800439c:	f000 f82a 	bl	80043f4 <__swsetup_r>
 80043a0:	b118      	cbz	r0, 80043aa <__swbuf_r+0x32>
 80043a2:	f04f 37ff 	mov.w	r7, #4294967295
 80043a6:	4638      	mov	r0, r7
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	6922      	ldr	r2, [r4, #16]
 80043ae:	1a98      	subs	r0, r3, r2
 80043b0:	6963      	ldr	r3, [r4, #20]
 80043b2:	b2f6      	uxtb	r6, r6
 80043b4:	4283      	cmp	r3, r0
 80043b6:	4637      	mov	r7, r6
 80043b8:	dc05      	bgt.n	80043c6 <__swbuf_r+0x4e>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	f7ff fd99 	bl	8003ef4 <_fflush_r>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d1ed      	bne.n	80043a2 <__swbuf_r+0x2a>
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60a3      	str	r3, [r4, #8]
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	6022      	str	r2, [r4, #0]
 80043d2:	701e      	strb	r6, [r3, #0]
 80043d4:	6962      	ldr	r2, [r4, #20]
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	429a      	cmp	r2, r3
 80043da:	d004      	beq.n	80043e6 <__swbuf_r+0x6e>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	07db      	lsls	r3, r3, #31
 80043e0:	d5e1      	bpl.n	80043a6 <__swbuf_r+0x2e>
 80043e2:	2e0a      	cmp	r6, #10
 80043e4:	d1df      	bne.n	80043a6 <__swbuf_r+0x2e>
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f7ff fd83 	bl	8003ef4 <_fflush_r>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d0d9      	beq.n	80043a6 <__swbuf_r+0x2e>
 80043f2:	e7d6      	b.n	80043a2 <__swbuf_r+0x2a>

080043f4 <__swsetup_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4b29      	ldr	r3, [pc, #164]	@ (800449c <__swsetup_r+0xa8>)
 80043f8:	4605      	mov	r5, r0
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	460c      	mov	r4, r1
 80043fe:	b118      	cbz	r0, 8004408 <__swsetup_r+0x14>
 8004400:	6a03      	ldr	r3, [r0, #32]
 8004402:	b90b      	cbnz	r3, 8004408 <__swsetup_r+0x14>
 8004404:	f7fd ffb0 	bl	8002368 <__sinit>
 8004408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800440c:	0719      	lsls	r1, r3, #28
 800440e:	d422      	bmi.n	8004456 <__swsetup_r+0x62>
 8004410:	06da      	lsls	r2, r3, #27
 8004412:	d407      	bmi.n	8004424 <__swsetup_r+0x30>
 8004414:	2209      	movs	r2, #9
 8004416:	602a      	str	r2, [r5, #0]
 8004418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800441c:	81a3      	strh	r3, [r4, #12]
 800441e:	f04f 30ff 	mov.w	r0, #4294967295
 8004422:	e033      	b.n	800448c <__swsetup_r+0x98>
 8004424:	0758      	lsls	r0, r3, #29
 8004426:	d512      	bpl.n	800444e <__swsetup_r+0x5a>
 8004428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800442a:	b141      	cbz	r1, 800443e <__swsetup_r+0x4a>
 800442c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004430:	4299      	cmp	r1, r3
 8004432:	d002      	beq.n	800443a <__swsetup_r+0x46>
 8004434:	4628      	mov	r0, r5
 8004436:	f7fe feff 	bl	8003238 <_free_r>
 800443a:	2300      	movs	r3, #0
 800443c:	6363      	str	r3, [r4, #52]	@ 0x34
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	2300      	movs	r3, #0
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	6923      	ldr	r3, [r4, #16]
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	89a3      	ldrh	r3, [r4, #12]
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	6923      	ldr	r3, [r4, #16]
 8004458:	b94b      	cbnz	r3, 800446e <__swsetup_r+0x7a>
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004464:	d003      	beq.n	800446e <__swsetup_r+0x7a>
 8004466:	4621      	mov	r1, r4
 8004468:	4628      	mov	r0, r5
 800446a:	f000 f883 	bl	8004574 <__smakebuf_r>
 800446e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004472:	f013 0201 	ands.w	r2, r3, #1
 8004476:	d00a      	beq.n	800448e <__swsetup_r+0x9a>
 8004478:	2200      	movs	r2, #0
 800447a:	60a2      	str	r2, [r4, #8]
 800447c:	6962      	ldr	r2, [r4, #20]
 800447e:	4252      	negs	r2, r2
 8004480:	61a2      	str	r2, [r4, #24]
 8004482:	6922      	ldr	r2, [r4, #16]
 8004484:	b942      	cbnz	r2, 8004498 <__swsetup_r+0xa4>
 8004486:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800448a:	d1c5      	bne.n	8004418 <__swsetup_r+0x24>
 800448c:	bd38      	pop	{r3, r4, r5, pc}
 800448e:	0799      	lsls	r1, r3, #30
 8004490:	bf58      	it	pl
 8004492:	6962      	ldrpl	r2, [r4, #20]
 8004494:	60a2      	str	r2, [r4, #8]
 8004496:	e7f4      	b.n	8004482 <__swsetup_r+0x8e>
 8004498:	2000      	movs	r0, #0
 800449a:	e7f7      	b.n	800448c <__swsetup_r+0x98>
 800449c:	2000000c 	.word	0x2000000c

080044a0 <_raise_r>:
 80044a0:	291f      	cmp	r1, #31
 80044a2:	b538      	push	{r3, r4, r5, lr}
 80044a4:	4605      	mov	r5, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	d904      	bls.n	80044b4 <_raise_r+0x14>
 80044aa:	2316      	movs	r3, #22
 80044ac:	6003      	str	r3, [r0, #0]
 80044ae:	f04f 30ff 	mov.w	r0, #4294967295
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80044b6:	b112      	cbz	r2, 80044be <_raise_r+0x1e>
 80044b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044bc:	b94b      	cbnz	r3, 80044d2 <_raise_r+0x32>
 80044be:	4628      	mov	r0, r5
 80044c0:	f000 f830 	bl	8004524 <_getpid_r>
 80044c4:	4622      	mov	r2, r4
 80044c6:	4601      	mov	r1, r0
 80044c8:	4628      	mov	r0, r5
 80044ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ce:	f000 b817 	b.w	8004500 <_kill_r>
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d00a      	beq.n	80044ec <_raise_r+0x4c>
 80044d6:	1c59      	adds	r1, r3, #1
 80044d8:	d103      	bne.n	80044e2 <_raise_r+0x42>
 80044da:	2316      	movs	r3, #22
 80044dc:	6003      	str	r3, [r0, #0]
 80044de:	2001      	movs	r0, #1
 80044e0:	e7e7      	b.n	80044b2 <_raise_r+0x12>
 80044e2:	2100      	movs	r1, #0
 80044e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80044e8:	4620      	mov	r0, r4
 80044ea:	4798      	blx	r3
 80044ec:	2000      	movs	r0, #0
 80044ee:	e7e0      	b.n	80044b2 <_raise_r+0x12>

080044f0 <raise>:
 80044f0:	4b02      	ldr	r3, [pc, #8]	@ (80044fc <raise+0xc>)
 80044f2:	4601      	mov	r1, r0
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	f7ff bfd3 	b.w	80044a0 <_raise_r>
 80044fa:	bf00      	nop
 80044fc:	2000000c 	.word	0x2000000c

08004500 <_kill_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d07      	ldr	r5, [pc, #28]	@ (8004520 <_kill_r+0x20>)
 8004504:	2300      	movs	r3, #0
 8004506:	4604      	mov	r4, r0
 8004508:	4608      	mov	r0, r1
 800450a:	4611      	mov	r1, r2
 800450c:	602b      	str	r3, [r5, #0]
 800450e:	f7fc fe77 	bl	8001200 <_kill>
 8004512:	1c43      	adds	r3, r0, #1
 8004514:	d102      	bne.n	800451c <_kill_r+0x1c>
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	b103      	cbz	r3, 800451c <_kill_r+0x1c>
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	bd38      	pop	{r3, r4, r5, pc}
 800451e:	bf00      	nop
 8004520:	20000340 	.word	0x20000340

08004524 <_getpid_r>:
 8004524:	f7fc be64 	b.w	80011f0 <_getpid>

08004528 <__swhatbuf_r>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	460c      	mov	r4, r1
 800452c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004530:	2900      	cmp	r1, #0
 8004532:	b096      	sub	sp, #88	@ 0x58
 8004534:	4615      	mov	r5, r2
 8004536:	461e      	mov	r6, r3
 8004538:	da0d      	bge.n	8004556 <__swhatbuf_r+0x2e>
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	bf14      	ite	ne
 8004546:	2340      	movne	r3, #64	@ 0x40
 8004548:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800454c:	2000      	movs	r0, #0
 800454e:	6031      	str	r1, [r6, #0]
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	b016      	add	sp, #88	@ 0x58
 8004554:	bd70      	pop	{r4, r5, r6, pc}
 8004556:	466a      	mov	r2, sp
 8004558:	f000 f848 	bl	80045ec <_fstat_r>
 800455c:	2800      	cmp	r0, #0
 800455e:	dbec      	blt.n	800453a <__swhatbuf_r+0x12>
 8004560:	9901      	ldr	r1, [sp, #4]
 8004562:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004566:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800456a:	4259      	negs	r1, r3
 800456c:	4159      	adcs	r1, r3
 800456e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004572:	e7eb      	b.n	800454c <__swhatbuf_r+0x24>

08004574 <__smakebuf_r>:
 8004574:	898b      	ldrh	r3, [r1, #12]
 8004576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004578:	079d      	lsls	r5, r3, #30
 800457a:	4606      	mov	r6, r0
 800457c:	460c      	mov	r4, r1
 800457e:	d507      	bpl.n	8004590 <__smakebuf_r+0x1c>
 8004580:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	6123      	str	r3, [r4, #16]
 8004588:	2301      	movs	r3, #1
 800458a:	6163      	str	r3, [r4, #20]
 800458c:	b003      	add	sp, #12
 800458e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004590:	ab01      	add	r3, sp, #4
 8004592:	466a      	mov	r2, sp
 8004594:	f7ff ffc8 	bl	8004528 <__swhatbuf_r>
 8004598:	9f00      	ldr	r7, [sp, #0]
 800459a:	4605      	mov	r5, r0
 800459c:	4639      	mov	r1, r7
 800459e:	4630      	mov	r0, r6
 80045a0:	f7fe febe 	bl	8003320 <_malloc_r>
 80045a4:	b948      	cbnz	r0, 80045ba <__smakebuf_r+0x46>
 80045a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045aa:	059a      	lsls	r2, r3, #22
 80045ac:	d4ee      	bmi.n	800458c <__smakebuf_r+0x18>
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	81a3      	strh	r3, [r4, #12]
 80045b8:	e7e2      	b.n	8004580 <__smakebuf_r+0xc>
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	6020      	str	r0, [r4, #0]
 80045be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	9b01      	ldr	r3, [sp, #4]
 80045c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045ca:	b15b      	cbz	r3, 80045e4 <__smakebuf_r+0x70>
 80045cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045d0:	4630      	mov	r0, r6
 80045d2:	f000 f81d 	bl	8004610 <_isatty_r>
 80045d6:	b128      	cbz	r0, 80045e4 <__smakebuf_r+0x70>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	431d      	orrs	r5, r3
 80045e8:	81a5      	strh	r5, [r4, #12]
 80045ea:	e7cf      	b.n	800458c <__smakebuf_r+0x18>

080045ec <_fstat_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d07      	ldr	r5, [pc, #28]	@ (800460c <_fstat_r+0x20>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	602b      	str	r3, [r5, #0]
 80045fa:	f7fc fe61 	bl	80012c0 <_fstat>
 80045fe:	1c43      	adds	r3, r0, #1
 8004600:	d102      	bne.n	8004608 <_fstat_r+0x1c>
 8004602:	682b      	ldr	r3, [r5, #0]
 8004604:	b103      	cbz	r3, 8004608 <_fstat_r+0x1c>
 8004606:	6023      	str	r3, [r4, #0]
 8004608:	bd38      	pop	{r3, r4, r5, pc}
 800460a:	bf00      	nop
 800460c:	20000340 	.word	0x20000340

08004610 <_isatty_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4d06      	ldr	r5, [pc, #24]	@ (800462c <_isatty_r+0x1c>)
 8004614:	2300      	movs	r3, #0
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	f7fc fe60 	bl	80012e0 <_isatty>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_isatty_r+0x1a>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_isatty_r+0x1a>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	20000340 	.word	0x20000340

08004630 <_init>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr

0800463c <_fini>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr
